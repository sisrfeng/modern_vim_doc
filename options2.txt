
*'list'* *'nolist'*
'list'                  boolean (default off)
                        local to window
List mode: By default, show tabs as ">", trailing spaces as "-", and non-breakable space characters as "+".
Useful to see the difference  between tabs and spaces and for trailing blanks.
Further changed by  the 'listchars' option.

The cursor is displayed at the start of the space a Tab character occupies,
not at the end as usual in Normal mode.
To get this cursor
position while displaying Tabs with spaces,
use:
                :set list lcs=tab:\ \

        list mode will also affect formatting (set with 'textwidth'
        or 'wrapmargin') when 'cpoptions' includes 'L'.  See 'listchars' for
        changing the way tabs are displayed.

*'listchars'* *'lcs'*
'listchars' 'lcs'       string  (default: "tab:> ,trail:-,nbsp:+"
                                 Vi default: "eol:$")
                        global or local to window |global-local|
        Strings to use in 'list' mode and for the |:list| command.  It is a
        comma separated list of string settings.

*lcs-eol*
          eol:c         Character to show at the end of each line.  When
                        omitted, there is no extra character at the end of the
                        line.
*lcs-tab*
          tab:xy[z]     Two or three characters to be used to show a tab.
                        The third character is optional.

          tab:xy        The 'x' is always used, then 'y' as many times as will
                        fit.  Thus "tab:>-" displays:
                                >
                                >-
                                >--
                                etc.

          tab:xyz       The 'z' is always used, then 'x' is prepended, and
                        then 'y' is used as many times as will fit.  Thus
                        "tab:<->" displays:
                                >
                                <>
                                <->
                                <-->
                                etc.

                        When "tab:" is omitted, a tab is shown as ^I.
*lcs-space*
          space:c       Character to show for a space.  When omitted, spaces
                        are left blank.
*lcs-multispace*
          multispace:c...
                        One or more characters to use cyclically to show for
                        multiple consecutive spaces.  Overrides the "space"
                        setting, except for single spaces.  When omitted, the
                        "space" setting is used.  For example,
                        `:set listchars=multispace:---+` shows ten consecutive
                        spaces as:
                                ---+---+--
*lcs-lead*
          lead:c        Character to show for leading spaces.  When omitted,
                        leading spaces are blank.  Overrides the "space" and
                        "multispace" settings for leading spaces.  You can
                        combine it with "tab:", for example:
                                :set listchars+=tab:>-,lead:.

*lcs-trail*
          trail:c       Character to show for trailing spaces.  When omitted,
                        trailing spaces are blank.  Overrides the "space" and
                        "multispace" settings for trailing spaces.
*lcs-extends*
          extends:c     Character to show in the last column, when 'wrap' is
                        off and the line continues beyond the right of the
                        screen.
*lcs-precedes*
          precedes:c    Character to show in the first visible column of the
                        physical line, when there is text preceding the
                        character visible in the first column.
*lcs-conceal*
          conceal:c     Character to show in place of concealed text, when
                        'conceallevel' is set to 1.  A space when omitted.
*lcs-nbsp*
          nbsp:c        Character to show for a non-breakable space character
                        (0xA0 (160 decimal) and U+202F).  Left blank when
                        omitted.

        The characters ':' and ',' should not be used.  UTF-8 characters can
        be used.  All characters must be single width.

        Each character can be specified as hex:
                set listchars=eol:\\x24
                set listchars=eol:\\u21b5
                set listchars=eol:\\U000021b5
        a double backslash is used.  The number of hex characters
        must be exactly 2 for \\x, 4 for \\u and 8 for \\U.

        Examples:
            :set lcs=tab:>-,trail:-
            :set lcs=tab:>-,eol:<,nbsp:%
            :set lcs=extends:>,precedes:<
        |hl-NonText| highlighting will be used for "eol", "extends" and
        "precedes". |hl-Whitespace| for "nbsp", "space", "tab", "multispace",
        "lead" and "trail".

*'lpl'* *'nolpl'* *'loadplugins'* *'noloadplugins'*
'loadplugins' 'lpl'     boolean (default on)
                        global
        When on the plugin scripts are loaded when starting up |load-plugins|.
        This option can be reset in your |vimrc| file to disable the loading
        of plugins.
        using the "-u NONE" and "--noplugin" command line arguments
        reset this option. |-u| |--noplugin|

*'magic'* *'nomagic'*
'magic'                 boolean (default on)
                        global

        Changes the special characters that can be used in search patterns.
        See |pattern|.
        WARNING:
            Switching this option off most likely breaks plugins!
            That is because many patterns assume it's on and  will
            fail when it's off.

            Only switch it off when working with old Vi scripts.

         In any other situation,  write patterns that work when 'magic' is on.

         Include "\M" when you want to. (see |/\M|)

*'makeef'* *'mef'*
'makeef' 'mef'          string  (default: "")
                        global
        Name of the errorfile for the |:make| command (see |:make_makeprg|)
        and the |:grep| command.
        When it is empty, an internally generated temp file will be used.
        When "##" is included, it is replaced by a number to make the name
        unique.  This makes sure that the ":make" command doesn't overwrite an
        existing file.
        NOT used for the ":cf" command.  See 'errorfile' for that.
        Environment variables are expanded |:set_env|.
        See |option-backslash| about including spaces and backslashes.
        This option cannot be set from a |modeline| or in the |sandbox|, for  security reasons.

*'makeencoding'* *'menc'*
'makeencoding' 'menc'   string  (default "")
                        global or local to buffer |global-local|
        Encoding used for reading the output of external commands.  When empty,
        encoding is not converted.
        This is used for `:make`, `:lmake`, `:grep`, `:lgrep`, `:grepadd`,
        `:lgrepadd`, `:cfile`, `:cgetfile`, `:caddfile`, `:lfile`, `:lgetfile`,
        and `:laddfile`.

        This would be mostly useful when you use MS-Windows.  If |+iconv| is
        enabled and GNU libiconv is used, setting 'makeencoding' to "char" has
        the same effect as setting to the system locale encoding.  Example:
                :set makeencoding=char  " system locale is used

*'makeprg'* *'mp'*
'makeprg' 'mp'          string  (default "make")
                        global or local to buffer |global-local|
        Program to use for the ":make" command.  See |:make_makeprg|.
        This option may contain '%' and '#' characters (see  |:_%| and |:_#|),
        which are expanded to the current and alternate file name.  Use |::S|
        to escape file names in case they contain special characters.
        Environment variables are expanded |:set_env|.  See |option-backslash|
        about including spaces and backslashes.
        a '|' must be escaped twice: once for ":set" and once for
        the interpretation of a command.  When you use a filter called
        "myfilter" do it like this:
            :set makeprg=gmake\ \\\|\ myfilter
        The placeholder "$*" can be given (even multiple times) to specify
        where the arguments will be included, for example:
            :set makeprg=latex\ \\\\nonstopmode\ \\\\input\\{$*}
        This option cannot be set from a |modeline| or in the |sandbox|, for security reasons.

*'matchpairs'* *'mps'*
'matchpairs' 'mps'      string  (default "(:),{:},[:]")
                        local to buffer
        Characters that form pairs.  The |%| command jumps from one to the
        other.
        Only character pairs are allowed that are different, thus you cannot
        jump between two double quotes.
        The characters must be separated by a colon.
        The pairs must be separated by a comma.  Example for including '<' and
        '>' (for HTML):
                :set mps+=<:>

        A more exotic example, to jump between the '=' and ';' in an
        assignment, useful for languages like C and Java:
                :au FileType c,cpp,java set mps+==:;

        For a more advanced way of using "%", see the matchit.vim plugin in
        the $VIMRUNTIME/plugin directory. |add-local-help|

*'matchtime'* *'mat'*
'matchtime' 'mat'       number  (default 5)
                        global
        Tenths of a second to show the matching paren, when 'showmatch' is
        set.  this is not in milliseconds, like other options that
        set a time.  This is to be compatible with Nvi.

*'maxcombine'* *'mco'*
'maxcombine' 'mco'      Removed. |vim-differences|
        Nvim always displays up to 6 combining characters.  You can still edit
    text with more than 6 combining characters, you just can't see them.
    Use |g8| or |ga|.  See |mbyte-combining|.

*'maxfuncdepth'* *'mfd'*
'maxfuncdepth' 'mfd'    number  (default 100)
                        global
        Maximum depth of function calls for user functions.  This normally
        catches endless recursion.  When using a recursive function with
        more depth, set 'maxfuncdepth' to a bigger number.  But this will use
        more memory, there is the danger of failing when memory is exhausted.
        Increasing this limit above 200 also changes the maximum for Ex
        command recursion, see |E169|.
        See also |:function|.

*'maxmapdepth'* *'mmd'* *E223*
'maxmapdepth' 'mmd'     number  (default 1000)
                        global
        Maximum number of times a mapping is done without resulting in a
        character to be used.  This normally catches endless mappings, like
        ":map x y" with ":map y x".  It still does not catch ":map g wg",
        because the 'w' is used before the next mapping is done.  See also
        |key-mapping|.

*'maxmempattern'* *'mmp'*
'maxmempattern' 'mmp'   number  (default 1000)
                        global
        Maximum amount of memory (in Kbyte) to use for pattern matching.
        The maximum value is about 2000000.  Use this to work without a limit.
*E363*
        When Vim runs into the limit it gives an error message and mostly
        behaves like CTRL-C was typed.
        Running into the limit often means that the pattern is very
        inefficient or too complex.  This may already happen with the pattern
        "\(.\)*" on a very long line.  ".*" works much better.
        Might also happen on redraw, when syntax rules try to match a complex
        text structure.
        Vim may run out of memory before hitting the 'maxmempattern' limit, in
        which case you get an "Out of memory" error instead.

*'menuitems'* *'mis'*
'menuitems' 'mis'       number  (default 25)
                        global
        Maximum number of items to use in a menu.  Used for menus that are
        generated from a list of items, e.g., the Buffers menu.  Changing this
        option has no direct effect, the menu must be refreshed first.

*'mkspellmem'* *'msm'*
'mkspellmem' 'msm'      string  (default "460000,2000,500")
                        global
        Parameters for |:mkspell|.  This tunes when to start compressing the
        word tree.  Compression can be slow when there are many words, but
        it's needed to avoid running out of memory.  The amount of memory used
        per word depends very much on how similar the words are, that's why
        this tuning is complicated.

        There are three numbers, separated by commas:
                {start},{inc},{added}

        For most languages the uncompressed word tree fits in memory.  {start}
        gives the amount of memory in Kbyte that can be used before any
        compression is done.  It should be a bit smaller than the amount of
        memory that is available to Vim.

        When going over the {start} limit the {inc} number specifies the
        amount of memory in Kbyte that can be allocated before another
        compression is done.  A low number means compression is done after
        less words are added, which is slow.  A high number means more memory
        will be allocated.

        After doing compression, {added} times 1024 words can be added before
        the {inc} limit is ignored and compression is done when any extra
        amount of memory is needed.  A low number means there is a smaller
        chance of hitting the {inc} limit, less memory is used but it's
        slower.

        The languages for which these numbers are important are Italian and
        Hungarian.  The default works for when you have about 512 Mbyte.  If
        you have 1 Gbyte you could use:
                :set mkspellmem=900000,3000,800
        If you have less than 512 Mbyte |:mkspell| may fail for some
        languages, no matter what you set 'mkspellmem' to.

        This option cannot be set from a |modeline| or in the |sandbox|.



*'modelineexpr'* *'mle'* *'nomodelineexpr'* *'nomle'*
'modelineexpr' 'mle'    boolean (default: off)
                        global
        When on
            allow some options that are an expression to be set in the  modeline.
        Also see |modeline|.
        This option cannot be set from a |modeline| or in the |sandbox|, for security reasons.

*'modeline'* *'ml'* *'nomodeline'* *'noml'*
    See |modeline|.

    boolean (Vim default: on (off for root),

    local to buffer

    *'modelines'* *'mls'*
    number  (default 5)
    global
        If 'modeline' is on
            'modelines' gives the number of lines that is
            checked for set commands.
        If 'modeline' is off or
            'modelines' is zero
            no lines are checked.

*'modifiable'* *'ma'* *'nomodifiable'* *'noma'* *E21*
'modifiable' 'ma'       boolean (default on)
                        local to buffer
        When off the buffer contents cannot be changed.
            The 'fileformat' and  'fileencoding' options also can't be changed.
        Can be reset on startup with the |-M| command line argument.

*'modified'* *'mod'* *'nomodified'* *'nomod'*
'modified' 'mod'        boolean (default off)
                        local to buffer
        When on, the buffer is considered to be modified.  This option is set
        when:
        1. A change was made to the text since it was last written.  Using the
           |undo| command to go back to the original text will reset the
           option.  But undoing changes that were made before writing the
           buffer will set the option again, since the text is different from
           when it was written.
        2. 'fileformat' or 'fileencoding' is different from its original
           value.  The original value is set when the buffer is read or
           written.  A ":set nomodified" command also resets the original
           values to the current values and the 'modified' option will be
           reset.
           Similarly for 'eol' and 'bomb'.
        This option is not set when a change is made to the buffer as the
        result of a BufNewFile, BufRead/BufReadPost, BufWritePost,
        FileAppendPost or VimLeave autocommand event.  See |gzip-example| for
        an explanation.
        When 'buftype' is "nowrite" or "nofile" this option may be set, but
        will be ignored.
        the text may actually be the same, e.g. 'modified' is set
        when using "rA" on an "A".

*'more'* *'nomore'*
'more'                  boolean (Vim default: on, Vi default: off)
                        global
        When on, listings pause when the whole screen is filled.  You will get
        the |more-prompt|.  When this option is off there are no pauses, the
        listing continues until finished.

*'mouse'*
'mouse'                 string  (default "")
                        global

        Enables mouse support. For example, to enable the mouse in Normal mode
        and Visual mode:
                :set mouse=nv

        To temporarily disable mouse support, hold the shift key while using
        the mouse.

        Mouse support can be enabled for different modes:
                n       Normal mode
                v       Visual mode
                i       Insert mode
                c       Command-line mode
                h       all previous modes when editing a help file
                a       all previous modes
                r       for |hit-enter| and |more-prompt| prompt

        Left-click anywhere in a text buffer to place the cursor there.  This
        works with operators too, e.g. type |d| then left-click to delete text
        from the current cursor position to the position where you clicked.

        Drag the |status-line| or vertical separator of a window to resize it.

        If enabled for "v" (Visual mode) then double-click selects word-wise,
        triple-click makes it line-wise, and quadruple-click makes it
        rectangular block-wise.

        For scrolling with a mouse wheel see |scroll-mouse-wheel|.

        When enabling the mouse in a terminal, copy/paste will use the
        "* register if possible. See also 'clipboard'.

        Related options:
        'mousefocus'    window focus follows mouse pointer
        'mousemodel'    what mouse button does which action
        'mousehide'     hide mouse pointer while typing text
        'selectmode'    whether to start Select mode or Visual mode

        The :behave command provides some "profiles" for mouse behavior.
*:behave* *:be*
        :be[have] {model}       Set behavior for mouse and selection.  Valid
                                arguments are:
                                   mswin        MS-Windows behavior
                                   xterm        Xterm behavior

                                Using ":behave" changes these options:
                                option          mswin                   xterm
                                'selectmode'    "mouse,key"             ""
                                'mousemodel'    "popup"                 "extend"
                                'keymodel'      "startsel,stopsel"      ""
                                'selection'     "exclusive"             "inclusive"


*'mousefocus'* *'mousef'* *'nomousefocus'* *'nomousef'*
'mousefocus' 'mousef'   boolean (default off)
                        global
        The window that the mouse pointer is on is automatically activated.
        When changing the window layout or window focus in another way, the
        mouse pointer is moved to the window with keyboard focus.  Off is the
        default because it makes using the pull down menus a little goofy, as
        a pointer transit may activate a window unintentionally.

*'mousehide'* *'mh'* *'nomousehide'* *'nomh'*
'mousehide' 'mh'        boolean (default on)
                        global
                        {only works in the GUI}
        When on, the mouse pointer is hidden when characters are typed.
        The mouse pointer is restored when the mouse is moved.

*'mousemodel'* *'mousem'*
'mousemodel' 'mousem'   string  (default "extend")
                        global
        Sets the model to use for the mouse.  The name mostly specifies what
        the right mouse button is used for:
           extend       Right mouse button extends a selection.  This works
                        like in an xterm.
           popup        Right mouse button pops up a menu.  The shifted left
                        mouse button extends a selection.  This works like
                        with Microsoft Windows.
           popup_setpos Like "popup", but the cursor will be moved to the
                        position where the mouse was clicked, and thus the
                        selected operation will act upon the clicked object.
                        If clicking inside a selection, that selection will
                        be acted upon, i.e. no cursor move.  This implies of
                        course, that right clicking outside a selection will
                        end Visual mode.
        Overview of what button does what for each model:
        mouse               extend              popup(_setpos)
        left click          place cursor        place cursor
        left drag           start selection     start selection
        shift-left          search word         extend selection
        right click         extend selection    popup menu (place cursor)
        right drag          extend selection    -
        middle click        paste               paste

        In the "popup" model the right mouse button produces a pop-up menu.
        You need to define this first, see |popup-menu|.

        you can further refine the meaning of buttons with mappings.
        See |mouse-overview|.  But mappings are NOT used for modeless selection.

        Example:
           :map <S-LeftMouse>     <RightMouse>
           :map <S-LeftDrag>      <RightDrag>
           :map <S-LeftRelease>   <RightRelease>
           :map <2-S-LeftMouse>   <2-RightMouse>
           :map <2-S-LeftDrag>    <2-RightDrag>
           :map <2-S-LeftRelease> <2-RightRelease>
           :map <3-S-LeftMouse>   <3-RightMouse>
           :map <3-S-LeftDrag>    <3-RightDrag>
           :map <3-S-LeftRelease> <3-RightRelease>
           :map <4-S-LeftMouse>   <4-RightMouse>
           :map <4-S-LeftDrag>    <4-RightDrag>
           :map <4-S-LeftRelease> <4-RightRelease>

        Mouse commands requiring the CTRL modifier can be simulated by typing
        the "g" key before using the mouse:
            "g<LeftMouse>"  is "<C-LeftMouse>   (jump to tag under mouse click)
            "g<RightMouse>" is "<C-RightMouse>  ("CTRL-T")

        The 'mousemodel' option is set by the |:behave| command.

*'mouseshape'* *'mouses'* *E547*
'mouseshape' 'mouses'   string  (default "i:beam,r:beam,s:updown,sd:cross,
                                        m:no,ml:up-arrow,v:rightup-arrow")
                        global
        This option tells Vim what the mouse pointer should look like in
        different modes.  The option is a comma separated list of parts, much
        like used for 'guicursor'.  Each part consist of a mode/location-list
        and an argument-list:
                mode-list:shape,mode-list:shape,..
        The mode-list is a dash separated list of these modes/locations:
                        In a normal window:
                n       Normal mode
                v       Visual mode
                ve      Visual mode with 'selection' "exclusive" (same as 'v',
                        if not specified)
                o       Operator-pending mode
                i       Insert mode
                r       Replace mode

                        Others:
                c       appending to the command-line
                ci      inserting in the command-line
                cr      replacing in the command-line
                m       at the 'Hit ENTER' or 'More' prompts
                ml      idem, but cursor in the last line
                e       any mode, pointer below last window
                s       any mode, pointer on a status line
                sd      any mode, while dragging a status line
                vs      any mode, pointer on a vertical separator line
                vd      any mode, while dragging a vertical separator line
                a       everywhere

        The shape is one of the following:
        avail   name            looks like
        w x     arrow           Normal mouse pointer
        w x     blank           no pointer at all (use with care!)
        w x     beam            I-beam
        w x     updown          up-down sizing arrows
        w x     leftright       left-right sizing arrows
        w x     busy            The system's usual busy pointer
        w x     no              The system's usual 'no input' pointer
          x     udsizing        indicates up-down resizing
          x     lrsizing        indicates left-right resizing
          x     crosshair       like a big thin +
          x     hand1           black hand
          x     hand2           white hand
          x     pencil          what you write with
          x     question        big ?
          x     rightup-arrow   arrow pointing right-up
        w x     up-arrow        arrow pointing up
          x     <number>        any X11 pointer number (see X11/cursorfont.h)

        The "avail" column contains a 'w' if the shape is available for Win32,
        x for X11.
        Any modes not specified or shapes not available use the normal mouse
        pointer.

        Example:
                :set mouseshape=s:udsizing,m:no
        will make the mouse turn to a sizing arrow over the status lines and
        indicate no input when the hit-enter prompt is displayed (since
        clicking the mouse has no effect in this state.)

*'mousetime'* *'mouset'*
'mousetime' 'mouset'    number  (default 500)
                        global
        Defines the maximum time in msec between two mouse clicks for the
        second click to be recognized as a multi click.

*'nrformats'* *'nf'*
'nrformats' 'nf'        string  (default "bin,hex")
                        local to buffer
        This defines what bases Vim will consider for numbers when using the
        CTRL-A and CTRL-X commands for adding to and subtracting from a number
        respectively; see |CTRL-A| for more info on these commands.
        alpha   If included, single alphabetical characters will be
                incremented or decremented.  This is useful for a list with a
                letter index a), b), etc.               *octal-nrformats*
        octal   If included, numbers that start with a zero will be considered
                to be octal.  Example: Using CTRL-A on "007" results in "010".
        hex     If included, numbers starting with "0x" or "0X" will be
                considered to be hexadecimal.  Example: Using CTRL-X on
                "0x100" results in "0x0ff".
        bin     If included, numbers starting with "0b" or "0B" will be
                considered to be binary.  Example: Using CTRL-X on
                "0b1000" subtracts one, resulting in "0b0111".
        unsigned    If included, numbers are recognized as unsigned. Thus a
                leading dash or negative sign won't be considered as part of
                the number.  Examples:
                    Using CTRL-X on "2020" in "9-2020" results in "9-2019"
                    (without "unsigned" it would become "9-2021").
                    Using CTRL-A on "2020" in "9-2020" results in "9-2021"
                    (without "unsigned" it would become "9-2019").
                    Using CTRL-X on "0" or CTRL-A on "18446744073709551615"
                    (2^64 - 1) has no effect, overflow is prevented.
        Numbers which simply begin with a digit in the range 1-9 are always
        considered decimal.  This also happens for numbers that are not
        recognized as octal or hex.

*'number'* *'nu'* *'nonumber'* *'nonu'*
'number' 'nu'           boolean (default off)
                        local to window
        Print the line number in front of each line.  When the 'n' option is
        excluded from 'cpoptions' a wrapped line will not use the column of
        line numbers.
        Use the 'numberwidth' option to adjust the room for the line number.
        When a long, wrapped line doesn't start with the first character, '-'
        characters are put before the number.
        For highlighting see |hl-LineNr|, |hl-CursorLineNr|, and the
        |:sign-define| "numhl" argument.
*number_relativenumber*
        The 'relativenumber' option changes the displayed number to be
        relative to the cursor.  Together with 'number' there are these
        four combinations (cursor in line 3):

                'nonu'          'nu'            'nonu'          'nu'
                'nornu'         'nornu'         'rnu'           'rnu'

            |apple          |  1 apple      |  2 apple      |  2 apple
            |pear           |  2 pear       |  1 pear       |  1 pear
            |nobody         |  3 nobody     |  0 nobody     |3   nobody
            |there          |  4 there      |  1 there      |  1 there

*'numberwidth'* *'nuw'*
'numberwidth' 'nuw'     number  (Vim default: 4  Vi default: 8)
                        local to window
        Minimal number of columns to use for the line number.  Only relevant
        when the 'number' or 'relativenumber' option is set or printing lines
        with a line number. Since one space is always between the number and
        the text, there is one less character for the number itself.
        The value is the minimum width.  A bigger width is used when needed to
        fit the highest line number in the buffer respectively the number of
        rows in the window, depending on whether 'number' or 'relativenumber'
        is set. Thus with the Vim default of 4 there is room for a line number
        up to 999. When the buffer has 1000 lines five columns will be used.
        The minimum value is 1, the maximum value is 20.

*'omnifunc'* *'ofu'*
'omnifunc' 'ofu'        string  (default: empty)
                        local to buffer

    This option specifies a function to be used for Insert mode omni completion with CTRL-X CTRL-O.
    |i_CTRL-X_CTRL-O| See |complete-functions| for an explanation of how the function is invoked and
    what it should return.
    This option is usually set by a filetype plugin:
    |:filetype-plugin-on|
    This option cannot be set from a |modeline| or in the |sandbox|,  for security reasons.


*'opendevice'* *'odev'* *'noopendevice'* *'noodev'*
'opendevice' 'odev'     boolean (default off)
                        global
                        {only for Windows}
        Enable reading and writing from devices.  This may get Vim stuck on a
        device that can be opened but doesn't actually do the I/O.  Therefore
        it is off by default.
        on Windows editing "aux.h", "lpt1.txt" and the like also
        result in editing a device.


*'operatorfunc'* *'opfunc'*
'operatorfunc' 'opfunc' string  (default: empty)
                        global
        This option specifies a function to be called by the |g@| operator.
        See |:map-operator| for more info and an example.

        This option cannot be set from a |modeline| or in the |sandbox|, for  security reasons.

*'packpath'* *'pp'*
    string  (default: see 'runtimepath')
    Directories used to find packages.  See |packages| and |rtp-packages|.


*'paragraphs'* *'para'*
'paragraphs' 'para'     string  (default "IPLPPPQPP TPHPLIPpLpItpplpipbp")
                        global
        Specifies the nroff macros that separate paragraphs.  These are pairs  of two letters (see |object-motions|).

*'paste'* *'nopaste'*
'paste'                 boolean (default off)
                        global
        This option is obsolete废弃
        |bracketed-paste-mode| is built-in.
        好像现在不完全是?
        多个选项提到'paste'

        Put Vim in Paste mode.
        This is useful if you want to cut or copy
        some text from one window and paste it in Vim.
        This will avoid  unexpected effects.
        Setting this option is useful when using Vim in a terminal, where Vim
        cannot distinguish between typed text and pasted text.  In the GUI, Vim
        knows about pasting and will mostly do the right thing without 'paste'
        being set.  The same is true for a terminal where Vim handles the
        mouse clicks itself.
        This option is reset when starting the GUI.  Thus if you set it in
        your vimrc it will work in a terminal, but not in the GUI.  Setting
        'paste' in the GUI has side effects: e.g., the Paste toolbar button
        will no longer work in Insert mode, because it uses a mapping.

        When the 'paste' option is switched on (also when it was already on):
                - mapping in Insert mode and Command-line mode is disabled
                - abbreviations are disabled
                - 'autoindent' is reset
                - 'expandtab' is reset
                - 'hkmap' is reset
                - 'revins' is reset
                - 'ruler' is reset
                - 'showmatch' is reset
                - 'smarttab' is reset
                - 'softtabstop' is set to 0
                - 'textwidth' is set to 0
                - 'wrapmargin' is set to 0
                - 'varsofttabstop' is made empty

        These options keep their value, but their effect is disabled:
                - 'cindent'
                - 'formatoptions' is used like it is empty
                - 'indentexpr'
                - 'lisp'
                - 'smartindent'

        NOTE: When you start editing another file while the 'paste' option is  on,
        settings from the modelines or autocommands may change the  settings again,
        causing trouble when pasting text.
        You might want to  set the 'paste' option again.
        When the 'paste' option is reset
            the mentioned options are restored to
            the value before the moment 'paste' was switched from off to on.
        Resetting 'paste' before ever setting it
            does not have any effect.
        Since mapping(in insert mode吧) doesn't work while 'paste' is active, you need to use
        the 'pastetoggle' option to toggle the 'paste' option with some key.

*'pastetoggle'* *'pt'*
'pastetoggle' 'pt'      string  (default "")
                        global
        When non-empty, specifies the key sequence that toggles the 'paste'  option.
        This is like specifying a mapping:
            :map {keys} :set invpaste<CR>
            Where {keys} is the value of 'pastetoggle'.
        The difference is that it will work even when 'paste' is set.
        'pastetoggle' works in Insert mode and  Normal mode,
        but not in  Command-line mode.
        Mappings are checked first,  thus overrule 'pastetoggle'.
        However,
        when 'paste' is on
            mappings are ignored in Insert mode, thus you can do  this:
            :map <F10> :set paste<CR>
            :map <F11> :set nopaste<CR>
            :imap <F10> <C-O>:set paste<CR>
            :imap <F11> <nop>
            :set pastetoggle=<F11>
        This will make <F10> start paste mode and <F11> stop paste mode.
        typing <F10> in paste mode inserts "<F10>",
        since in paste  mode everything is inserted literally,
        except the 'pastetoggle' key  sequence.
        No timeout is used, this means that a multi-key 'pastetoggle' can not  be triggered manually.

*'pex'* *'patchexpr'*
'patchexpr' 'pex'       string  (default "")
                        global
        Expression which is evaluated to apply a patch to a file and generate
        the resulting new version of the file.  See |diff-patchexpr|.

*'patchmode'* *'pm'* *E205* *E206*
'patchmode' 'pm'        string  (default "")
                        global
        When non-empty the oldest version of a file is kept.  This can be used
        to keep the original version of a file if you are changing files in a
        source distribution.  Only the first time that a file is written a
        copy of the original file will be kept.  The name of the copy is the
        name of the original file with the string in the 'patchmode' option
        appended.  This option should start with a dot.  Use a string like
        ".orig" or ".org".  'backupdir' must not be empty for this to work
        (Detail: The backup file is renamed to the patchmode file after the
        new file has been successfully written, that's why it must be possible
        to write a backup file).  If there was no file to be backed up, an
        empty file is created.
        When the 'backupskip' pattern matches, a patchmode file is not made.
        Using 'patchmode' for compressed files appends the extension at the
        end (e.g., "file.gz.orig"), thus the resulting name isn't always
        recognized as a compressed file.
        Only normal file name characters can be used, "/\*?[|<>" are illegal.

*'path'* *'pa'* *E343* *E345* *E347* *E854*
    string  default on Unix: 💦.,/usr/include,,💦
              other systems: ".,,"
                                                          点号:To search relative to the directory of the current file
                                                                :set path=,,
                                                                 search in the current directory use an empty string between two commas:

    global or local to buffer |global-local|
    有时会变得和runtimepath一样

    This is a list of directories which will be searched when using the
                |gf|,
                [f,
                ]f,
                ^Wf,
                |:find|,
                |:sfind|,
                |:tabfind| and other commands,
    provided that the file being searched for has a relative path (not starting with "/",
    "./" or "../").
    The directories in the 'path' option may be relative or  absolute.
        - Use commas to separate directory names:
                :set path=.,/usr/local/include,/usr/include

        - Spaces can also be used to separate directory names (for backwards compatibility with version 3.0).
        To have a space in a directory name,
        precede it with an extra backslash,
        and escape the space:
                        :set path=.,/dir/with\\\ space
        - To include a comma in a directory name precede it with an extra backslash:
                :set path=.,/dir/with\\,comma
        - A directory name may end in a ':' or '/'.
        - Environment variables are expanded |:set_env|.
        - When using |netrw.vim| URLs can be used.  For example, adding
          "http://www.vim.org" will make ":find index.html" work.
        - Search upwards and downwards in a directory tree using "*", "**" and
          ";".  See |file-searching| for info and syntax.
        - Careful with '\' characters, type two to get one in the option:
                :set path=.,c:\\include
          Or just use '/' instead:
                :set path=.,c:/include

        Don't forget "." or files won't even be found in the same directory as  the file!
        The maximum length is limited.  How much depends on the system, mostly
        it is something like 256 or 1024 characters.

        You can check whether all the include files are found, using the value of
        'path', see |:checkpath|.

        The use of |:set+=| and |:set-=| is preferred when adding or removing
        directories from the list.  This avoids problems when a future version
        uses another default.  To remove the current directory use:
                :set path-=
        To add the current directory use:
                :set path+=

    To use an environment variable,
                you probably need to replace the separator.
                Here is an example
                to append $INCL,
                in which directory names are separated with a semi-colon:
                                        :let &path = &path . "," . substitute($INCL, ';', ',', 'g')
                Replace the ';' with a ':' or whatever separator is used.
                this doesn't work when $INCL contains a comma or
                white space.

*'preserveindent'* *'pi'* *'nopreserveindent'* *'nopi'*
'preserveindent' 'pi'   boolean (default off)
                        local to buffer
        When changing the indent of the current line, preserve as much of the
        indent structure as possible.  Normally the indent is replaced by a
        series of tabs followed by spaces as required (unless |'expandtab'| is
        enabled, in which case only spaces are used).  Enabling this option
        means the indent will preserve as many existing characters as possible
        for indenting, and only add additional tabs or spaces as required.
        'expandtab' does not apply to the preserved white space, a Tab remains
        a Tab.
        NOTE: When using ">>" multiple times the resulting indent is a mix of
        tabs and spaces.  You might not like this.
        Also see 'copyindent'.
        Use |:retab| to clean up white space.

*'previewheight'* *'pvh'*
'previewheight' 'pvh'   number (default 12)
                        global
        Default height for a preview window.  Used for |:ptag| and associated
        commands.  Used for |CTRL-W_}| when no count is given.

*'previewwindow'* *'nopreviewwindow'*
*'pvw'* *'nopvw'* *E590*
'previewwindow' 'pvw'   boolean (default off)
                        local to window
        Identifies the preview window.
        Only one window per tabpage can have this option  set.
        It's normally not set directly, but by using one of the commands
        |:ptag|, |:pedit|, etc.

*'printdevice'* *'pdev'*
'printdevice' 'pdev'    string  (default empty)
                        global
        The name of the printer to be used for |:hardcopy|.
        See |pdev-option|.
        This option cannot be set from a |modeline| or in the |sandbox|, for  security reasons.

*'printencoding'* *'penc'*
'printencoding' 'penc'  string  (default empty, except for some systems)
                        global
        Sets the character encoding used when printing.
        See |penc-option|.

*'printexpr'* *'pexpr'*
'printexpr' 'pexpr'     string  (default: see below)
                        global
        Expression used to print the PostScript produced with |:hardcopy|.
        See |pexpr-option|.
        This option cannot be set from a |modeline| or in the |sandbox|, for  security reasons.

*'printfont'* *'pfn'*
'printfont' 'pfn'       string  (default "courier")
                        global
        The name of the font that will be used for |:hardcopy|.
        See |pfn-option|.

*'printheader'* *'pheader'*
'printheader' 'pheader'  string  (default "%<%f%h%m%=Page %N")
                        global
        The format of the header produced in |:hardcopy| output.
        See |pheader-option|.

*'printmbcharset'* *'pmbcs'*
'printmbcharset' 'pmbcs'  string (default "")
                        global
        The CJK character set to be used for CJK output from |:hardcopy|.
        See |pmbcs-option|.

*'printmbfont'* *'pmbfn'*
'printmbfont' 'pmbfn'   string (default "")
                        global
        List of font names to be used for CJK output from |:hardcopy|.
        See |pmbfn-option|.

*'printoptions'* *'popt'*
'printoptions' 'popt' string (default "")
                        global
        List of items that control the format of the output of |:hardcopy|.
        See |popt-option|.

*'pumblend'* *'pb'*
'pumblend' 'pb'         number  (default 0)
                        global
        Enables pseudo-transparency for the |popup-menu|. Valid values are in
        the range of 0 for fully opaque popupmenu (disabled) to 100 for fully
        transparent background. Values between 0-30 are typically most useful.

        It is possible to override the level for individual highlights within
        the popupmenu using |highlight-blend|. For instance, to enable
        transparency but force the current selected element to be fully opaque:

                :set pumblend=15
                :hi PmenuSel blend=0

        UI-dependent. Works best with RGB colors. 'termguicolors'

*'pumheight'* *'ph'*
'pumheight' 'ph'        number  (default 0)
                        global
        Maximum number of items to show in the popup menu
        (|ins-completion-menu|). Zero means "use available screen space".

*'pumwidth'* *'pw'*
'pumwidth' 'pw'         number  (default 15)
                        global
        Minimum width for the popup menu (|ins-completion-menu|).  If the
        cursor column + 'pumwidth' exceeds screen width, the popup menu is
        nudged to fit on the screen.

*'pyxversion'* *'pyx'*
'pyxversion' 'pyx'      number  (default depends on the build)
                        global
        Specifies the python version used for pyx* functions and commands
        |python_x|.  The default value is as follows:

                |provider| installed        Default
                |+python| and |+python3|        0
                only |+python|                  2
                only |+python3|                 3

        Available values are 0, 2 and 3.
        If 'pyxversion' is 0, it is set to 2 or 3 after the first execution of
        any python2/3 commands or functions.  E.g. `:py` sets to 2, and `:py3`
        sets to 3. `:pyx` sets it to 3 if Python 3 is available, otherwise sets
        to 2 if Python 2 is available.
        See also: |has-pythonx|

        If only |+python| or |+python3| are available,
        'pyxversion' has no effect. The pyx* functions and commands are
        always the same as the installed version.

        This option cannot be set from a |modeline| or in the |sandbox|, for  security reasons.

*'quickfixtextfunc'* *'qftf'*
'quickfixtextfunc' 'qftf'       string (default "")
                        global
        This option specifies a function to be used to get the text to display
        in the quickfix and location list windows.  This can be used to
        customize the information displayed in the quickfix or location window
        for each entry in the corresponding quickfix or location list.  See
        |quickfix-window-function| for an explanation of how to write the
        function and an example. The value can be the name of a function or a
        lambda.

        This option cannot be set from a |modeline| or in the |sandbox|, for  security reasons.

*'quoteescape'* *'qe'*
'quoteescape' 'qe'      string  (default "\")
                        local to buffer
        The characters that are used to escape quotes in a string.  Used for
        objects like a', a" and a` |a'|.
        When one of the characters in this option is found inside a string,
        the following character will be skipped.  The default value makes the
        text "foo\"bar\\" considered to be one string.

*'readonly'* *'ro'* *'noreadonly'* *'noro'*
'readonly' 'ro'         boolean (default off)
                        local to buffer

    See 'modifiable' for disallowing changes to the buffer.

    If on,
        能改不能存
        writes fail unless you use a '!'.
        Protects you from accidentally overwriting a file.
        Default on when Vim is started in read-only mode ("vim -R") or when the executable is called "view".
    When using ":w!" the 'readonly' option is reset for the current buffer,
    When using the ":view" command
        the 'readonly' option is set for the newly edited buffer.

*'redrawdebug'* *'rdb'*
'redrawdebug' 'rdb'     string  (default '')
                        global
        Flags to change the way redrawing works, for debugging purposes.
        Most useful with 'writedelay' set to some reasonable value.
        Supports the following flags:
            compositor  Indicate what redraws come from the compositor
                        by briefly flashing the redrawn regions in colors
                        indicating the redraw type. These are the highlight
                        groups used (and their default colors):
                RedrawDebugNormal   gui=reverse   normal redraw passed through
                RedrawDebugClear    guibg=Yellow  clear event passed through
                RedrawDebugComposed guibg=Green   redraw event modified by the
                                                  compositor (due to
                                                  overlapping grids, etc)
                RedrawDebugRecompose guibg=Red    redraw generated by the
                                                  compositor itself, due to a
                                                  grid being moved or deleted.
            nothrottle  Turn off throttling of the message grid. This is an
                        optimization that joins many small scrolls to one
                        larger scroll when drawing the message area (with
                        'display' msgsep flag active).
            invalid     Enable stricter checking (abort) of inconsistencies
                        of the internal screen state. This is mostly
                        useful when running nvim inside a debugger (and
                        the test suite).
            nodelta     Send all internally redrawn cells to the UI, even if
                        they are unchanged from the already displayed state.

*'redrawtime'* *'rdt'*
'redrawtime' 'rdt'      number  (default 2000)
                        global
        Time in milliseconds for redrawing the display.  Applies to
        'hlsearch', 'inccommand', |:match| highlighting and syntax
        highlighting.
        When redrawing takes more than this many milliseconds no further
        matches will be highlighted.
        For syntax highlighting the time applies per window.  When over the
        limit syntax highlighting is disabled until |CTRL-L| is used.
        This is used to avoid that Vim hangs when using a very complicated
        pattern.

*'regexpengine'* *'re'*
'regexpengine' 're'     number  (default 0)
                        global
        This selects the default regexp engine. |two-engines|
        The possible values are:
                0       automatic selection
                1       old engine
                2       NFA engine
        when using the NFA engine and the pattern contains something
        that is not supported the pattern will not match.  This is only useful
        for debugging the regexp engine.
        Using automatic selection enables Vim to switch the engine, if the
        default engine becomes too costly.  E.g., when the NFA engine uses too
        many states.  This should prevent Vim from hanging on a combination of
        a complex pattern with long text.

*'relativenumber'* *'rnu'* *'norelativenumber'* *'nornu'*
'relativenumber' 'rnu'  boolean (default off)
                        local to window
        Show the line number relative to the line with the cursor in front of
        each line. Relative line numbers help you use the |count| you can
        precede some vertical motion commands (e.g. j k + -) with, without
        having to calculate it yourself. Especially useful in combination with
        other commands (e.g. y d c < > gq gw =).
        When the 'n' option is excluded from 'cpoptions' a wrapped
        line will not use the column of line numbers.
        The 'numberwidth' option can be used to set the room used for the line
        number.
        When a long, wrapped line doesn't start with the first character, '-'
        characters are put before the number.
        See |hl-LineNr|  and |hl-CursorLineNr| for the highlighting used for
        the number.

        The number in front of the cursor line also depends on the value of
        'number', see |number_relativenumber| for all combinations of the two
        options.

*'remap'* *'noremap'*
'remap'                 boolean (default on)
                        global
        Allows for mappings to work recursively.  If you do not want this for
        a single entry, use the :noremap[!] command.
        NOTE: To avoid portability problems with Vim scripts, always keep
        this option at the default "on".  Only switch it off when working with
        old Vi scripts.

*'report'*
'report'                number  (default 2)
                        global
        Threshold for reporting number of lines changed.  When the number of
        changed lines is more than 'report' a message will be given for most
        ":" commands.  If you want it always, set 'report' to 0.
        For the ":substitute" command the number of substitutions is used
        instead of the number of lines.

*'revins'* *'ri'* *'norevins'* *'nori'*
'revins' 'ri'           boolean (default off)
                        global
        Inserting characters in Insert mode will work backwards.  See "typing
        backwards" |ins-reverse|.  This option can be toggled with the CTRL-_
        command in Insert mode, when 'allowrevins' is set.

*'rightleft'* *'rl'* *'norightleft'* *'norl'*
'rightleft' 'rl'        boolean (default off)
                        local to window
        When on, display orientation becomes right-to-left, i.e., characters
        that are stored in the file appear from the right to the left.
        Using this option, it is possible to edit files for languages that
        are written from the right to the left such as Hebrew and Arabic.
        This option is per window, so it is possible to edit mixed files
        simultaneously, or to view the same file in both ways (this is
        useful whenever you have a mixed text file with both right-to-left
        and left-to-right strings so that both sets are displayed properly
        in different windows).  Also see |rileft.txt|.

*'rightleftcmd'* *'rlc'*
'rightleftcmd' 'rlc'    string  (default "search")
                        local to window
        Each word in this option enables the command line editing to work in
        right-to-left mode for a group of commands:

                search          "/" and "?" commands

        This is useful for languages such as Hebrew and Arabic.
        The 'rightleft' option must be set for 'rightleftcmd' to take effect.

*'ruler'* *'ru'* *'noruler'* *'noru'*
'ruler' 'ru'            boolean (default on)
                        global
        Show the line and column number of the cursor position, separated by a
        comma.  When there is room, the relative position of the displayed
        text in the file is shown on the far right:
                Top     first line is visible
                Bot     last line is visible
                All     first and last line are visible
                45%     relative position in the file
        If 'rulerformat' is set, it will determine the contents of the ruler.
        Each window has its own ruler.  If a window has a status line, the
        ruler is shown there.  Otherwise it is shown in the last line of the
        screen.  If the statusline is given by 'statusline' (i.e. not empty),
        this option takes precedence over 'ruler' and 'rulerformat'
        If the number of characters displayed is different from the number of
        bytes in the text (e.g., for a TAB or a multibyte character), both
        the text column (byte number) and the screen column are shown,
        separated with a dash.
        For an empty line "0-1" is shown.
        For an empty buffer the line number will also be zero: "0,0-1".
        If you don't want to see the ruler all the time but want to know where
        you are, use "g CTRL-G" |g_CTRL-G|.

*'rulerformat'* *'ruf'*
'rulerformat' 'ruf'     string  (default empty)
                        global
        When this option is not empty, it determines the content of the ruler
        string, as displayed for the 'ruler' option.
        The format of this option is like that of 'statusline'.
        This option cannot be set in a modeline when 'modelineexpr' is off.

        The default ruler width is 17 characters.  To make the ruler 15
        characters wide, put "%15(" at the start and "%)" at the end.
        Example:
                :set rulerformat=%15(%c%V\ %p%%%)


*'runtimepath'* *'rtp'* *vimfiles*
    global
    string

    目前 我的是:
        /home/wf/dotF/cfg/nvim   (附近2000行都没搜到lua, 但我这个目录下 有个lua/)
        /home/wf/.local/share/nvim/plugged/vim-plug
        /home/wf/.local/share/nvim/plugged/w3m.vim
        /home/wf/.local/share/nvim/plugged/translate-shell.vim
        /home/wf/.local/share/nvim/plugged/vim-matchup
        /home/wf/.local/share/nvim/plugged/vim-polyglot
        /home/wf/.local/share/nvim/plugged/vim-markdown
        /home/wf/.local/share/nvim/plugged/blamer.nvim
        /home/wf/.local/share/nvim/plugged/nerdtree
        /home/wf/.local/share/nvim/plugged/vim-lucius
        /home/wf/.local/share/nvim/plugged/AbbrevMan.nvim
        /home/wf/.local/share/nvim/plugged/vim-fugitive
        /home/wf/.local/share/nvim/plugged/copilot.vim
        /home/wf/.local/share/nvim/plugged/coc.nvim
        /home/wf/.local/share/nvim/plugged/vim-snippets
        /home/wf/.local/share/nvim/plugged/vim-anzu
        /home/wf/.local/share/nvim/plugged/vim-easy-align
        /home/wf/.local/share/nvim/plugged/vim-easymotion
        /home/wf/.local/share/nvim/plugged/vim-pairs
        /home/wf/.local/share/nvim/plugged/auto-pairs
        /home/wf/.local/share/nvim/plugged/vim-sandwich
        /home/wf/.local/share/nvim/plugged/nerdcommenter
        /home/wf/.local/share/nvim/plugged/vim-jsonc
        /home/wf/.local/share/nvim/plugged/fzf
        /home/wf/.local/share/nvim/plugged/fzf.vim
        /home/wf/.local/share/nvim/plugged/LeaderF
        /home/wf/.local/share/nvim/plugged/toggle-bool
        /home/wf/.local/share/nvim/plugged/undotree
        /home/wf/.local/share/nvim/plugged/far.vim
        /home/wf/.local/share/nvim/plugged/linediff.vim
        /home/wf/.local/share/nvim/plugged/diffchar.vim
        /home/wf/.local/share/nvim/plugged/vim-terminal-help
        /home/wf/.local/share/nvim/plugged/vim-scriptease
        /home/wf/.local/share/nvim/plugged/vim-argwrap
        /home/wf/.local/share/nvim/plugged/vim_current_word
        /home/wf/.local/share/nvim/plugged/plenary.nvim
        /home/wf/.local/share/nvim/plugged/todo-comments.nvim
        /home/wf/.local/share/nvim/plugged/nvim-web-devicons
        /home/wf/.local/share/nvim/plugged/vim-devicons
        /home/wf/.local/share/nvim/plugged/denite.nvim
        /home/wf/.local/share/nvim/plugged/vim-quickui
        /home/wf/.local/share/nvim/plugged/vim-vimscript_lasterror

        /etc/xdg/nvim

        /home/wf/.local/share/nvim/site
        /usr/local/share/nvim/site
        /usr/share/nvim/site

        /home/linuxbrew/.linuxbrew/Cellar/neovim/0.6.1/share/nvim/runtime
        /home/linuxbrew/.linuxbrew/Cellar/neovim/0.6.1/lib/nvim

        /usr/share/nvim/site/after
        /usr/local/share/nvim/site/after
        /home/wf/.local/share/nvim/site/after
        /etc/xdg/nvim/after

        /home/wf/coc/extensions/node_modules/coc-snippets

        /home/wf/.local/share/nvim/plugged/translate-shell.vim/after
        /home/wf/.local/share/nvim/plugged/vim-matchup/after
        /home/wf/.local/share/nvim/plugged/vim-polyglot/after
        /home/wf/.local/share/nvim/plugged/vim-markdown/after
        /home/wf/.local/share/nvim/plugged/vim-sandwich/after
        /home/wf/dotF/cfg/nvim/after  # 不存在

    是个List, of directories to be searched for these 🔑runtime files🔑:

          filetype.vim  filetypes by file name |new-filetype|
          scripts.vim   filetypes by file contents |new-filetype-scripts|
          autoload/     automatically loaded scripts |autoload-functions|
          colors/       color scheme files |:colorscheme|
          compiler/     compiler files |:compiler|
          doc/          documentation |write-local-help|
          ftplugin/     filetype plugins |write-filetype-plugin|
          indent/       indent scripts |indent-expression|
          keymap/       key mapping files |mbyte-keymap|
          lang/         menu translations |:menutrans|
          menu.vim      GUI menus |menu.vim|
          pack/         packages |:packadd|  :packadd命令 用于将某些package加到'runtimepath'里
          plugin/       plugin scripts |write-plugin|
          print/        files for printing |postscript-print-encoding|
          rplugin/      |remote-plugin| scripts
          spell/        spell checking files |spell|
          syntax/       syntax files |mysyntaxfile|
          tutor/        tutorial files |:Tutor|
                  And any other file searched for with the |:runtime| command.
                                                                                                 |:runtime|命令其实是:
                                                  加了某些条件的:source
                                                                                                  或者          :lua require('文件名_不带lua后缀')


    default:  "$XDG_CONFIG_HOME/nvim,
                   $XDG_CONFIG_DIRS[1]/nvim,
                   $XDG_CONFIG_DIRS[2]/nvim,
                   …

                   $XDG_DATA_HOME/nvim[-data]/site,
                   $XDG_DATA_DIRS[1]/nvim/site,
                   $XDG_DATA_DIRS[2]/nvim/site,
                   …

                   $VIMRUNTIME,
                   …
                   $XDG_DATA_DIRS[2]/nvim/site/after,
                   $XDG_DATA_DIRS[1]/nvim/site/after,
                   $XDG_DATA_HOME/nvim[-data]/site/after,
                   …
                   $XDG_CONFIG_DIRS[2]/nvim/after,
                   $XDG_CONFIG_DIRS[1]/nvim/after,
                   $XDG_CONFIG_HOME/nvim/after")



    Defaults (runtimepath的默认值?)are setup to search these locations:
                1.  Given by `stdpath("config")`.
                    |$XDG_CONFIG_HOME|
                    又称Your home directory(不是$HOME), for personal preferences.
                2. Directories which must contain configuration files according to
                    |xdg| ($XDG_CONFIG_DIRS,  defaults to /etc/xdg).
                    This  contains preferences from system administrator.
                3. Data home directory,
                    for plugins installed by user.
                    Given by `stdpath("data")/site`.
                    |$XDG_DATA_HOME|

                4. 🔑nvim/site🔑 subdirectories for each directory in $XDG_DATA_DIRS (我的是空白
                    This is for 💛plugins💛 which were installed by system administrator ,
                    but are not part of the Nvim distribution.
                    XDG_DATA_DIRS defaults to /usr/local/share/:/usr/share/,
                    so system administrators are expected to install 🔑site plugins🔑 to /usr/share/nvim/site.

                5. $VIMRUNTIME,  for files distributed with Neovim.

                6, 7, 8, 9:
                官方目录下没有after/  *after-directory*
                    In 📁after/📁 subdirectories of 1, 2, 3 and 4, with reverse  ordering.
                    This is for preferences to 💛overrule💛 or add to the
                    distributed defaults or system-wide settings (rarely needed).

                        *rtp-packages*
                        rtp: runtimepath

                                "start" packages will additionally be used to
                                        search for 🔑runtime files🔑 after these (上述'runtimepath'下的文件),
                                        but package entries are not visible in 💦:set runtimepath💦
                                        要进去搜, 但又不把人家视作'runtimepath'的一员 有名无分
                                        See |runtime-search-path| for more information.

                                "opt" packages will be explicitly added to &rtp when |:packadd| is used.(有名有份)
                                        Note  unlike 'path',  no wildcards like "**" are allowed.
                                                Normal wildcards are allowed,  but can significantly slow down searching for
                                                runtime files.
                                                For speed, use as few items as possible and avoid  wildcards.

                                Example:
                                                :set runtimepath=~/vimruntime,/mygroup/vim,$VIMRUNTIME

                                        This will use the directory "~/vimruntime" first (containing your personal Vim runtime files),
                                        then "/mygroup/vim" (shared between a group of people) and finally "$VIMRUNTIME" (the distributed runtime
                                        files).
                                        You probably should always include $VIMRUNTIME somewhere, to use the distributed runtime files.
                                                💦:runtime💦 would source the first file only.
                                                💦:runtime!💦 所有找到的files
                                                这里对应💦:runtime💦, 所以
                                                        You can put a directory before $VIMRUNTIME to find files  replace a distributed runtime files.
                                                        You can put a directory after $VIMRUNTIME to find files which add to distributed  runtime files.

                                        When Vim is started with |--clean| the home directory entries are not included.

                                        This option cannot be set from a |modeline| or in the |sandbox|,  for security reasons.

*'scroll'* *'scr'*
'scroll' 'scr'          number  (default: half the window height)
                        local to window
        Number of lines to scroll with CTRL-U and CTRL-D commands.  Will be
        set to half the number of lines in the window when the window size
        changes.  This may happen when enabling the |status-line| or
        'tabline' option after setting the 'scroll' option.
        If you give a count to the CTRL-U or CTRL-D command it will
        be used as the new value for 'scroll'.  Reset to half the window
        height with ":set scroll=0".

*'scrollback'* *'scbk'*
'scrollback' 'scbk'     number  (default: 10000)
                        local to buffer
        Maximum number of lines kept beyond the visible screen. Lines at the
        top are deleted if new lines exceed this limit.
        Minimum is 1, maximum is 100000.
        Only in |terminal| buffers.

*'scrollbind'* *'scb'* *'noscrollbind'* *'noscb'*
'scrollbind' 'scb'      boolean  (default off)
                        local to window
        See also |scroll-binding|.  When this option is set, the current
        window scrolls as other scrollbind windows (windows that also have
        this option set) scroll.  This option is useful for viewing the
        differences between two versions of a file, see 'diff'.
        See |'scrollopt'| for options that determine how this option should be
        interpreted.
        This option is mostly reset when splitting a window to edit another
        file.  This means that ":split | edit file" results in two windows
        with scroll-binding, but ":split file" does not.

*'scrolljump'* *'sj'*
'scrolljump' 'sj'       number  (default 1)
                        global
        Minimal number of lines to scroll when the cursor gets off the
        screen (e.g., with "j").  Not used for scroll commands (e.g., CTRL-E,
        CTRL-D).  Useful if your terminal scrolls very slowly.
        When set to a negative number from -1 to -100 this is used as the
        percentage of the window height.  Thus -50 scrolls half the window
        height.

*'scrolloff'* *'so'*
'scrolloff' 'so'        number  (default 0)
                        global or local to window |global-local|
        Minimal number of screen lines to keep above and below the cursor.
        This will make some context visible around where you are working.  If
        you set it to a very large value (999) the cursor line will always be
        in the middle of the window (except at the start or end of the file or
        when long lines wrap).
        After using the local value, go back the global value with one of
        these two:
                setlocal scrolloff<
                setlocal scrolloff=-1
        For scrolling horizontally see 'sidescrolloff'.

*'scrollopt'* *'sbo'*
'scrollopt' 'sbo'       string  (default "ver,jump")
                        global
        This is a comma-separated list of words that specifies how
        'scrollbind' windows should behave.  'sbo' stands for ScrollBind
        Options.
        The following words are available:
            ver         Bind vertical scrolling for 'scrollbind' windows
            hor         Bind horizontal scrolling for 'scrollbind' windows
            jump        Applies to the offset between two windows for vertical
                        scrolling.  This offset is the difference in the first
                        displayed line of the bound windows.  When moving
                        around in a window, another 'scrollbind' window may
                        reach a position before the start or after the end of
                        the buffer.  The offset is not changed though, when
                        moving back the 'scrollbind' window will try to scroll
                        to the desired position when possible.
                        When now making that window the current one, two
                        things can be done with the relative offset:
                        1. When "jump" is not included, the relative offset is
                           adjusted for the scroll position in the new current
                           window.  When going back to the other window, the
                           new relative offset will be used.
                        2. When "jump" is included, the other windows are
                           scrolled to keep the same relative offset.  When
                           going back to the other window, it still uses the
                           same relative offset.
        Also see |scroll-binding|.
        When 'diff' mode is active there always is vertical scroll binding,
        even when "ver" isn't there.

*'sections'* *'sect'*
'sections' 'sect'       string  (default "SHNHH HUnhsh")
                        global
        Specifies the nroff macros that separate sections.  These are pairs of
        two letters (See |object-motions|).  The default makes a section start
        at the nroff macros ".SH", ".NH", ".H", ".HU", ".nh" and ".sh".

*'secure'* *'nosecure'* *E523*
'secure'                boolean (default off)
                        global
        不用改, 用默认的就行
        When on, ":autocmd", shell and write commands are not allowed in
        ".nvimrc" and ".exrc" in the current directory and map commands are
        displayed.  Switch it off only if you know that you will not run into
        problems, or when the 'exrc' option is off(默认就是off的).
        On Unix this option is only used if the ".nvimrc" or ".exrc" is not
        owned by  you.  This can be  dangerous if the systems allows users
        to do a "chown",
        那种情况下. you better set  'secure' at the end of your |init.vim|

        This option cannot be set from a |modeline| or in the |sandbox|, for  security reasons.

*'selection'* *'sel'*
'selection' 'sel'       string  (default "inclusive")
                        global
        This option defines the behavior of the selection.  It is only used
        in Visual and Select mode.
        Possible values:
           value        past line     inclusive
           old             no           yes
           inclusive       yes          yes
           exclusive       yes          no
        "past line" means that the cursor is allowed to be positioned one
        character past the line.
        "inclusive" means that the last character of the selection is included
        in an operation.  For example, when "x" is used to delete the
        selection.
        When "old" is used and 'virtualedit' allows the cursor to move past
        the end of line the line break still isn't included.
        when "exclusive" is used and selecting from the end
        backwards, you cannot include the last character of a line, when
        starting in Normal mode and 'virtualedit' empty.

        The 'selection' option is set by the |:behave| command.

*'selectmode'* *'slm'*
'selectmode' 'slm'      string  (default "")
                        global
        This is a comma separated list of words, which specifies when to start
        Select mode instead of Visual mode, when a selection is started.
        Possible values:
           mouse        when using the mouse
           key          when using shifted special keys
           cmd          when using "v", "V" or CTRL-V
        See |Select-mode|.
        The 'selectmode' option is set by the |:behave| command.

*'sessionoptions'* *'ssop'*
'sessionoptions' 'ssop' string

    global
    默认:
        blank,
        buffers,
        curdir,
        folds,
        help,
        tabpages,
        winsize,


        buffers,
        curdir,
        folds,
        help,
        tabpages,
        winsize,



    Changes the effect of the |:mksession| command.
    It is a comma  separated list of words.
    Each word enables saving and restoring  something:

           word         save and restore
          -------------------------------
           blank        empty windows
           buffers      hidden and unloaded buffers, not just those in windows
           folds        manually created folds, opened/closed folds and local  fold options
           globals      global variables that start with an uppercase letter
                        and contain at least one lowercase letter.
                        Only  String and Number types are stored.
                        保持插件的状态?

           help         the help window


           localoptions options and mappings local to a window or buffer
                                                 (not  global values for local options)

           options      all options and mappings (also global values for local options)
                        option都在init.vim里, 没必要存
           skiprtp      exclude 'runtimepath' and 'packpath' from the options

           resize       size of the Vim window: 'lines' and 'columns'

           curdir       the current directory
           sesdir       the directory in which the session file is located
                        will become the current directory (useful with  projects accessed over a network from different  systems)

                        Don't include both "curdir" and "sesdir".

                        When neither is included
                            filenames are stored as absolute paths.

           tabpages     all tab pages;
                        without this only the current tab page  is restored,
                                   so that you can make a session for each tab page separately
           terminal     include terminal windows where the command can be  restored
           winpos       position of the whole Vim window
           winsize      window sizes

           slash        |deprecated| Always enabled. Uses "/" in filenames.
           unix         |deprecated| Always enabled. Uses "\n" line endings.


*'shada'* *'sd'* *E526* *E527* *E528*
'shada' 'sd'            string  (Vim default for
                                   Win32:  !,'100,<50,s10,h,rA:,rB:
                                   others: !,'100,<50,s10,h
                        global

    When non-empty,
        the shada file is read upon startup and
        written when exiting Vim (see |shada-file|).
    The string should be a comma separated list of parameters,
    each consisting of a single character identifying the particular parameter,
        followed by a number or  string,
        which specifies the value of that parameter.
    If a particular character is left out,
        then the default value is used for that parameter.
    各选项:
            CHAR    VALUE
    *shada-!*
            !       When included, save and restore global variables that
                    start  with an uppercase letter,
                    and don't contain a lowercase  letter.

                        Thus
                        "KEEPTHIS and "K_L_M" are stored,
                        but "KeepThis"  and "_K_L_M" are not.

                        Nested List and Dict items may not be read back correctly,
                        you end up with an empty item.
    *shada-quote*
            "       Old name of  the '<' item

    *shada-%*
            %       When included, save and restore the buffer list.
                    If Vim is  started with a file name argument,
                        the buffer list is not  restored.
                    If Vim is started without a file name argument,
                    the  buffer list is restored from the shada file.

                    not saved:
                        Quickfix  ('buftype'),
                        unlisted ('buflisted'),
                        unnamed
                        buffers on  removable media (|shada-r|)

                    When followed by a number, the number specifies the maximum
                    number of buffers that are stored.
                    Without a number all  buffers are stored.
    *shada-'*
            '       Maximum number of previously edited files for which the marks
                    are remembered.  This parameter must always be included when
                    'shada' is non-empty.
                    Including this item also means that the |jumplist| and the
                    |changelist| are stored in the shada file.
    *shada-/*
            /       Maximum number of items in the search pattern history to be
                    saved.  If non-zero, then the previous search and substitute
                    patterns are also saved.  When not included, the value of
                    'history' is used.
    *shada-:*
            :       Maximum number of items in the command-line history to be
                    saved.  When not included, the value of 'history' is used.
    *shada-<*
            <       Maximum number of lines saved for each register.  If zero then
                    registers are not saved.  When not included, all lines are
                    saved.  '"' is the old name for this item.
                    Also see the 's' item below: limit specified in KiB.
    *shada-@*
            @       Maximum number of items in the input-line history to be
                    saved.  When not included, the value of 'history' is used.
    *shada-c*
            c       Dummy option, kept for compatibility reasons.  Has no actual
                    effect: ShaDa always uses UTF-8 and 'encoding' value is fixed

                    to UTF-8 as well.
    *shada-f*
                    If zero
                        file marks ('0  to '9, 'A to 'Z) are not stored.
                                    '0 is used for the current cursor position (when exiting or when doing |:wshada|).
                    When not present or when  non-zero, they are all stored.
    *shada-h*
            h       Disable the effect of 'hlsearch' when loading the shada
                    file.  When not included, it depends on whether ":nohlsearch"
                    has been used since the last search command.
    *shada-n*
            n       Name of the shada file.  The name must immediately follow
                    the 'n'.  Must be at the end of the option!  If the
                    'shadafile' option is set, that file name overrides the one
                    given here with 'shada'.
                    Environment variables are  expanded when opening the file, not when setting the option.
    *shada-r*
            r       Removable media.
                    The argument is a string (up to the next
                    ',').
                    This parameter can be given several times.
                    Each  specifies the start of a path for which no marks will be
                    stored.
                    This is to avoid removable media.
                    For Windows you  could use "ra:,rb:".
                    You can also use it for temp files,
                    e.g., for Unix: "r/tmp".  Case is ignored.
    *shada-s*
            s       Maximum size of an item contents in KiB.
                    If zero then nothing  is saved.
                    Unlike Vim this applies to all items,
                    except for  the buffer list and header.

                    Full item size is off by three unsigned integers:
                    with `s10
                    maximum item size may be:

                        1024x10 bytes (requested maximum item  contents size)
                        + 9 bytes (timestamp: up to 64-bit integer)
                        + 3 bytes (item size: up to 16-bit integer because 2^8 < 10240 < 2^16)
                        + 1 byte  (type: 7-bit integer)

                        = 10253 bytes.

            Example:
                :set shada='50,<1000,s100,:0,n~/nvim/shada

            '50             Marks will be remembered for the last 50 files you
                            edited.
            <1000           Contents of registers (up to 1000 lines each) will be  remembered.
            s100            Items with contents occupying more then 100 KiB are  skipped.
            :0              Command-line history will not be saved.
            n~/nvim/shada   The name of the file to use is "~/nvim/shada".
            no /            Since '/' is not specified, the default will be used,
                            that is, save all of the search history, and also the
                            previous search and substitute patterns.
            no %            The buffer list will not be saved nor read back.
            no h            'hlsearch' highlighting will be restored.

            When setting 'shada' from an empty value you can use |:rshada| to
            load the contents of the file, this is not done automatically.

            This option cannot be set from a |modeline| or in the |sandbox|, for  security reasons.

*'shadafile'* *'sdf'*
'shadafile' 'sdf'       string  (default: "")
                        global
        When non-empty, overrides the file name used for |shada| (viminfo).
        When equal to "NONE" no shada file will be read or written.
        This option can be set with the |-i| command line flag.  The |--clean|
        command line flag sets it to "NONE".
        This option cannot be set from a |modeline| or in the |sandbox|, for  security reasons.

*'shell'* *'sh'* *E91*
'shell' 'sh'            string  (default $SHELL or "sh", Win32: "cmd.exe")
                        global
        Name of the shell to use for ! and :! commands.  When changing the
        value also check these options: 'shellpipe', 'shellslash'
        'shellredir', 'shellquote', 'shellxquote' and 'shellcmdflag'.
        It is allowed to give an argument to the command, e.g.  "csh -f".
        See |option-backslash| about including spaces and backslashes.
        Environment variables are expanded |:set_env|.

        If the name of the shell contains a space, you need to enclose it in
        quotes.  Example with quotes:
                :set shell=\"c:\program\ files\unix\sh.exe\"\ -f
        Note the backslash before each quote (to avoid starting a comment) and
        each space (to avoid ending the option value), so better use |:let-&|
        like this:
                :let &shell='"C:\Program Files\unix\sh.exe" -f'
        Also the "-f" is not inside the quotes, because it is not
        part of the command name.
*shell-unquoting*
        Rules regarding quotes:
        1. Option is split on space and tab characters that are not inside
           quotes: "abc def" runs shell named "abc" with additional argument
           "def", '"abc def"' runs shell named "abc def" with no additional
           arguments (here and below: additional means “additional to
           'shellcmdflag'”).
        2. Quotes in option may be present in any position and any number:
           '"abc"', '"a"bc', 'a"b"c', 'ab"c"' and '"a"b"c"' are all equivalent
           to just "abc".
        3. Inside quotes backslash preceding backslash means one backslash.
           Backslash preceding quote means one quote. Backslash preceding
           anything else means backslash and next character literally:
           '"a\\b"' is the same as "a\b", '"a\\"b"' runs shell named literally
           'a"b', '"a\b"' is the same as "a\b" again.
        4. Outside of quotes backslash always means itself, it cannot be used
           to escape quote: 'a\"b"' is the same as "a\b".
        such processing is done after |:set| did its own round of
        unescaping, so to keep yourself sane use |:let-&| like shown above.
*shell-powershell*
        To use PowerShell:
                let &shell = has('win32') ? 'powershell' : 'pwsh'
                let &shellcmdflag = '-NoLogo -NoProfile -ExecutionPolicy RemoteSigned -Command [Console]::InputEncoding=[Console]::OutputEncoding=[System.Text.Encoding]::UTF8;'
                let &shellredir = '2>&1 | Out-File -Encoding UTF8 %s; exit $LastExitCode'
                let &shellpipe = '2>&1 | Out-File -Encoding UTF8 %s; exit $LastExitCode'
                set shellquote= shellxquote=

        This option cannot be set from a |modeline| or in the |sandbox|, for  security reasons.

*'shellcmdflag'* *'shcf'*
'shellcmdflag' 'shcf'   string  (default: "-c"; Windows: "/s /c")
                        global
        Flag passed to the shell to execute "!" and ":!" commands; e.g.,
        `bash.exe -c ls` or `cmd.exe /s /c "dir"`.  For MS-Windows, the
        default is set according to the value of 'shell', to reduce the need
        to set this option by the user.
        On Unix it can have more than one flag.  Each white space separated
        part is passed as an argument to the shell command.
        See |option-backslash| about including spaces and backslashes.
        See |shell-unquoting| which talks about separating this option into
        multiple arguments.
        This option cannot be set from a |modeline| or in the |sandbox|, for  security reasons.

*'shellpipe'* *'sp'*
'shellpipe' 'sp'        string  (default ">", ">%s 2>&1", "| tee", "|& tee" or
                                 "2>&1| tee")
                        global
        String to be used to put the output of the ":make" command in the
        error file.  See also |:make_makeprg|.  See |option-backslash| about
        including spaces and backslashes.
        The name of the temporary file can be represented by "%s" if necessary
        (the file name is appended automatically if no %s appears in the value
        of this option).
        For MS-Windows the default is ">%s 2>&1".  The output is directly
        saved in a file and not echoed to the screen.
        For Unix the default is "| tee".  The stdout of the compiler is saved
        in a file and echoed to the screen.  If the 'shell' option is "csh" or
        "tcsh" after initializations, the default becomes "|& tee".  If the
        'shell' option is "sh", "ksh", "mksh", "pdksh", "zsh", "zsh-beta",
        "bash", "fish", "ash" or "dash" the default becomes "2>&1| tee".  This
        means that stderr is also included.  Before using the 'shell' option a
        path is removed, thus "/bin/sh" uses "sh".
        The initialization of this option is done after reading the vimrc
        and the other initializations, so that when the 'shell' option is set
        there, the 'shellpipe' option changes automatically, unless it was
        explicitly set before.
        When 'shellpipe' is set to an empty string, no redirection of the
        ":make" output will be done.  This is useful if you use a 'makeprg'
        that writes to 'makeef' by itself.  If you want no piping, but do
        want to include the 'makeef', set 'shellpipe' to a single space.
        Don't forget to precede the space with a backslash: ":set sp=\ ".
        In the future pipes may be used for filtering and this option will
        become obsolete (at least for Unix).
        This option cannot be set from a |modeline| or in the |sandbox|, for  security reasons.

*'shellquote'* *'shq'*
'shellquote' 'shq'      string  (default: ""; Windows, when 'shell'
                                        contains "sh" somewhere: "\"")
                        global
        Quoting character(s), put around the command passed to the shell, for
        the "!" and ":!" commands.  The redirection is kept outside of the
        quoting.  See 'shellxquote' to include the redirection.  It's
        probably not useful to set both options.
        This is an empty string by default.  Only known to be useful for
        third-party shells on Windows systems, such as the MKS Korn Shell
        or bash, where it should be "\"".  The default is adjusted according
        the value of 'shell', to reduce the need to set this option by the
        user.
        This option cannot be set from a |modeline| or in the |sandbox|, for  security reasons.
*'shellredir'* *'srr'*
'shellredir' 'srr'      string  (default ">", ">&" or ">%s 2>&1")
                        global
        String to be used to put the output of a filter command in a temporary
        file.  See also |:!|.  See |option-backslash| about including spaces
        and backslashes.
        The name of the temporary file can be represented by "%s" if necessary
        (the file name is appended automatically if no %s appears in the value
        of this option).
        The default is ">".  For Unix, if the 'shell' option is "csh" or
        "tcsh" during initializations, the default becomes ">&".  If the
        'shell' option is "sh", "ksh", "mksh", "pdksh", "zsh", "zsh-beta",
        "bash" or "fish", the default becomes ">%s 2>&1".  This means that
        stderr is also included.  For Win32, the Unix checks are done and
        additionally "cmd" is checked for, which makes the default ">%s 2>&1".
        Also, the same names with ".exe" appended are checked for.
        The initialization of this option is done after reading the vimrc
        and the other initializations, so that when the 'shell' option is set
        there, the 'shellredir' option changes automatically unless it was
        explicitly set before.
        In the future pipes may be used for filtering and this option will
        become obsolete (at least for Unix).
        This option cannot be set from a |modeline| or in the |sandbox|, for  security reasons.

*'shellslash'* *'ssl'* *'noshellslash'* *'nossl'*
'shellslash' 'ssl'      boolean (default off)
                        global
                        {only for MS-Windows}
        When set, a forward slash is used when expanding file names.  This is
        useful when a Unix-like shell is used instead of cmd.exe.  Backward
        slashes can still be typed, but they are changed to forward slashes by
        Vim.
        setting or resetting this option has no effect for some
        existing file names, thus this option needs to be set before opening
        any file for best results.  This might change in the future.
        'shellslash' only works when a backslash can be used as a path
        separator.  To test if this is so use:
                if exists('+shellslash')
        Also see 'completeslash'.

*'shelltemp'* *'stmp'* *'noshelltemp'* *'nostmp'*
'shelltemp' 'stmp'      boolean (Vim default on, Vi default off)
                        global
        When on, use temp files for shell commands.  When off use a pipe.
        When using a pipe is not possible temp files are used anyway.
        The advantage of using a pipe is that nobody can read the temp file
        and the 'shell' command does not need to support redirection.
        The advantage of using a temp file is that the file type and encoding
        can be detected.
        The |FilterReadPre|, |FilterReadPost| and |FilterWritePre|,
        |FilterWritePost| autocommands event are not triggered when
        'shelltemp' is off.
        |system()| does not respect this option, it always uses pipes.

*'shellxescape'* *'sxe'*
'shellxescape' 'sxe'    string  (default: "")
                        global
        When 'shellxquote' is set to "(" then the characters listed in this
        option will be escaped with a '^' character.  This makes it possible
        to execute most external commands with cmd.exe.

*'shellxquote'* *'sxq'*
'shellxquote' 'sxq'     string  (default: "", Windows: "\"")
                        global
        Quoting character(s), put around the command passed to the shell, for
        the "!" and ":!" commands.  Includes the redirection.  See
        'shellquote' to exclude the redirection.  It's probably not useful
        to set both options.
        When the value is '(' then ')' is appended. When the value is '"('
        then ')"' is appended.
        When the value is '(' then also see 'shellxescape'.
        This option cannot be set from a |modeline| or in the |sandbox|, for  security reasons.

*'shiftround'* *'sr'* *'noshiftround'* *'nosr'*
'shiftround' 'sr'       boolean (default off)
                        global
        Round indent to multiple of 'shiftwidth'.  Applies to > and <
        commands.  CTRL-T and CTRL-D in Insert mode always round the indent to
        a multiple of 'shiftwidth' (this is Vi compatible).

*'shiftwidth'* *'sw'*
'shiftwidth' 'sw'       number  (default 8)
                        local to buffer
        Number of spaces to use for each step of (auto)indent.  Used for
        |'cindent'|, |>>|, |<<|, etc.
        When zero the 'ts' value will be used.  Use the |shiftwidth()|
        function to get the effective shiftwidth value.

*'shortmess'* *'shm'*
'shortmess' 'shm'       string  (Vim default "filnxtToOF", Vi default: "S")
                        global
        This option helps to avoid all the |hit-enter| prompts caused by file
        messages, for example  with CTRL-G, and to avoid some other messages.
        It is a list of flags:
         flag   meaning when present
          f     use "(3 of 5)" instead of "(file 3 of 5)"
          i     use "[noeol]" instead of "[Incomplete last line]"
          l     use "999L, 888C" instead of "999 lines, 888 characters"
          m     use "[+]" instead of "[Modified]"
          n     use "[New]" instead of "[New File]"
          r     use "[RO]" instead of "[readonly]"
          w     use "[w]" instead of "written" for file write message
                and "[a]" instead of "appended" for ':w >> file' command
          x     use "[dos]" instead of "[dos format]", "[unix]" instead of
                "[unix format]" and "[mac]" instead of "[mac format]".
          a     all of the above abbreviations

          o     overwrite message for writing a file with subsequent message
                for reading a file (useful for ":wn" or when 'autowrite' on)
          O     message for reading a file overwrites any previous message.
                Also for quickfix message (e.g., ":cn").
          s     don't give "search hit BOTTOM, continuing at TOP" or "search
                hit TOP, continuing at BOTTOM" messages; when using the search
                count do not show "W" after the count message (see S below)
          t     truncate file message at the start if it is too long to fit
                on the command-line, "<" will appear in the left most column.
                Ignored in Ex mode.
          T     truncate other messages in the middle if they are too long to
                fit on the command line.  "..." will appear in the middle.
                Ignored in Ex mode.
          W     don't give "written" or "[w]" when writing a file
          A     don't give the "ATTENTION" message when an existing swap file
                is found.
          I     don't give the intro message when starting Vim |:intro|.
          c     don't give |ins-completion-menu| messages.  For example,
                "-- XXX completion (YYY)", "match 1 of 2", "The only match",
                "Pattern not found", "Back at original", etc.
          q     use "recording" instead of "recording @a"
          F     don't give the file info when editing a file, like `:silent`
                was used for the command; this also affects messages
                from autocommands
          S     do not show search count message when searching, e.g.
                "[1/5]"

        This gives you the opportunity to avoid that a change between buffers
        requires you to hit <Enter>, but still gives as useful a message as
        possible for the space available.  To get the whole message that you
        would have got with 'shm' empty, use ":file!"
        Useful values:
            shm=        No abbreviation of message.
            shm=a       Abbreviation, but no loss of information.
            shm=at      Abbreviation, and truncate message when necessary.

*'showbreak'* *'sbr'* *E595*
'showbreak' 'sbr'       string  (default "")
                        global or local to window |global-local|
        String to put at the start of lines that have been wrapped.  Useful
        values are "> " or "+++ ":
                :set showbreak=>\
        Note the backslash to escape the trailing space.  It's easier like
        this:
                :let &showbreak = '+++ '
        Only printable single-cell characters are allowed, excluding <Tab> and
        comma (in a future version the comma might be used to separate the
        part that is shown at the end and at the start of a line).
        The |hl-NonText| highlight group determines the highlighting.
        tabs after the showbreak will be displayed differently.
        If you want the 'showbreak' to appear in between line numbers, add the
        "n" flag to 'cpoptions'.
        A window-local value overrules a global value.  If the global value is
        set and you want no value in the current window use NONE:
                :setlocal showbreak=NONE

*'showcmd'* *'sc'* *'noshowcmd'* *'nosc'*
'showcmd' 'sc'          boolean (Vim default: on, Vi default: off)
                        global
        Show (partial) command in the last line of the screen.  Set this
        option off if your terminal is slow.
        In Visual mode the size of the selected area is shown:
        - When selecting characters within a line, the number of characters.
          If the number of bytes is different it is also displayed: "2-6"
          means two characters and six bytes.
        - When selecting more than one line, the number of lines.
        - When selecting a block, the size in screen characters:
          {lines}x{columns}.

*'showfulltag'* *'sft'* *'noshowfulltag'* *'nosft'*
'showfulltag' 'sft'     boolean (default off)
                        global
        When completing a word in insert mode (see |ins-completion|) from the
        tags file, show both the tag name and a tidied-up form of the search
        pattern (if there is one) as possible matches.  Thus, if you have
        matched a C function, you can see a template for what arguments are
        required (coding style permitting).
        this doesn't work well together with having "longest" in
        'completeopt', because the completion from the search pattern may not
        match the typed text.

*'showmatch'* *'sm'* *'noshowmatch'* *'nosm'*
'showmatch' 'sm'        boolean (default off)
                        global
        When a bracket is inserted, briefly jump to the matching one.  The
        jump is only done if the match can be seen on the screen.  The time to
        show the match can be set with 'matchtime'.
        A Beep is given if there is no match (no matter if the match can be
        seen or not).

        When the 'm' flag is not included in 'cpoptions', typing a character
        will immediately move the cursor back to where it belongs.
        See the "sm" field in 'guicursor' for setting the cursor shape and
        blinking when showing the match.
        The 'matchpairs' option can be used to specify the characters to show
        matches for.  'rightleft' and 'revins' are used to look for opposite
        matches.
        Also see the matchparen plugin for highlighting the match when moving
        around |pi_paren.txt|.
        Use of the short form is rated PG.

*'showmode'* *'smd'* *'noshowmode'* *'nosmd'*
'showmode' 'smd'        boolean (Vim default: on, Vi default: off)
                        global
        If in Insert, Replace or Visual mode put a message on the last line.
        The |hl-ModeMsg| highlight group determines the highlighting.

*'showtabline'* *'stal'*
'showtabline' 'stal'    number  (default 1)
                        global
        The value of this option specifies when the line with tab page labels
        will be displayed:
                0: never
                1: only if there are at least two tab pages
                2: always
        This is both for the GUI and non-GUI implementation of the tab pages
        line.
        See |tab-page| for more information about tab pages.

*'sidescroll'* *'ss'*
'sidescroll' 'ss'       number  (default 1)
                        global
        The minimal number of columns to scroll horizontally.  Used only when
        the 'wrap' option is off and the cursor is moved off of the screen.
        When it is zero the cursor will be put in the middle of the screen.
        When using a slow terminal set it to a large number or 0.  Not used
        for "zh" and "zl" commands.

*'sidescrolloff'* *'siso'*
'sidescrolloff' 'siso'  number (default 0)
                        global or local to window |global-local|
        The minimal number of screen columns to keep to the left and to the
        right of the cursor if 'nowrap' is set.  Setting this option to a
        value greater than 0 while having |'sidescroll'| also at a non-zero
        value makes some context visible in the line you are scrolling in
        horizontally (except at beginning of the line).  Setting this option
        to a large value (like 999) has the effect of keeping the cursor
        horizontally centered in the window, as long as one does not come too
        close to the beginning of the line.
        After using the local value, go back the global value with one of
        these two:
                setlocal sidescrolloff<
                setlocal sidescrolloff=-1

        Example: Try this together with 'sidescroll' and 'listchars' as
                 in the following example to never allow the cursor to move
                 onto the "extends" character:

                 :set nowrap sidescroll=1 listchars=extends:>,precedes:<
                 :set sidescrolloff=1

*'signcolumn'* *'scl'*
'signcolumn' 'scl'      string  (default "auto")
                        local to window
When and how to draw the signcolumn. Valid values are:
   "auto"       only when there is a sign to display
   "auto:[1-9]" resize to accommodate multiple signs up to the
                given number (maximum 9), e.g. "auto:4"
   "auto:[1-8]-[2-9]"
                resize to accommodate multiple signs up to the
                given maximum number (maximum 9) while keeping
                at least the given minimum (maximum 8) fixed
                space. The minimum number should always be less
                than the maximum number, e.g. "auto:2-5"
   "no"         never
   "yes"        always
   "yes:[1-9]"  always, with fixed space for signs up to the given
                number (maximum 9), e.g. "yes:3"
   "number"     display signs in the 'number' column. If the number
                column is not present, then behaves like 'auto'.

Note
regarding 'orphaned signs': with signcolumn numbers higher  than 1,
deleting lines will also remove the associated signs automatically,
This is done in order for the signcolumn appearence not appear weird during line deletion.

*'smartcase'* *'scs'* *'nosmartcase'* *'noscs'*
'smartcase' 'scs'       boolean (default off)
                        global
        Override the 'ignorecase' option if the search pattern contains upper
        case characters.  Only used when the search pattern is typed and
        'ignorecase' option is on.  Used for the commands "/", "?", "n", "N",
        ":g" and ":s".  Not used for "*", "#", "gd", tag search, etc.  After
        "*" and "#" you can make 'smartcase' used by doing a "/" command,
        recalling the search pattern from history and hitting <Enter>.

*'smartindent'* *'si'* *'nosmartindent'* *'nosi'*
'smartindent' 'si'      boolean (default off)
                        local to buffer
        Do smart autoindenting when starting a new line.  Works for C-like
        programs, but can also be used for other languages.  'cindent' does
        something like this, works better in most cases, but is more strict,
        see |C-indenting|.  When 'cindent' is on or 'indentexpr' is set,
        setting 'si' has no effect.  'indentexpr' is a more advanced
        alternative.
        Normally 'autoindent' should also be on when using 'smartindent'.
        An indent is automatically inserted:
        - After a line ending in '{'.
        - After a line starting with a keyword from 'cinwords'.
        - Before a line starting with '}' (only with the "O" command).
        When typing '}' as the first character in a new line, that line is
        given the same indent as the matching '{'.
        When typing '#' as the first character in a new line, the indent for
        that line is removed, the '#' is put in the first column.  The indent
        is restored for the next line.  If you don't want this, use this
        mapping: ":inoremap # X^H#", where ^H is entered with CTRL-V CTRL-H.
        When using the ">>" command, lines starting with '#' are not shifted
        right.

*'smarttab'* *'sta'* *'nosmarttab'* *'nosta'*
'smarttab' 'sta'        boolean (default on)
                        global
        When on, a <Tab> in front of a line inserts blanks according to
        'shiftwidth'.  'tabstop' or 'softtabstop' is used in other places.  A
        <BS> will delete a 'shiftwidth' worth of space at the start of the
        line.
        When off, a <Tab> always inserts blanks according to 'tabstop' or
        'softtabstop'.  'shiftwidth' is only used for shifting text left or
        right |shift-left-right|.
        What gets inserted (a <Tab> or spaces) depends on the 'expandtab'
        option.  Also see |ins-expandtab|.  When 'expandtab' is not set, the
        number of spaces is minimized by using <Tab>s.

*'softtabstop'* *'sts'*
'softtabstop' 'sts'     number  (default 0)
                        local to buffer
    if |'varsofttabstop'| is set  to anything other than an empty string.
        The value of 'softtabstop' will be ignored

    Number of spaces that a <Tab> counts for  while performing editing operations,
        like inserting a <Tab> or using <BS>.

    It "feels" like <Tab>s are being inserted,
        while in fact a mix of spaces and <Tab>s is used.

    This is useful to keep the 'ts' setting at its standard value of 8,
        while being able to edit like it is set to 'sts'.

    However,  commands like "x" still work on the actual characters.

    if 'sts' is zero,
            this feature is off.

    if 'sts' < 0
            the value of 'shiftwidth' is used.


    See also |ins-expandtab|.

    The 'L' flag in 'cpoptions' changes how tabs are used when 'list' is set.


*'spell'* *'nospell'*
'spell'                 boolean (default off)
                        local to window
        When on spell checking will be done.  See |spell|.
        The languages are specified with 'spelllang'.

*'spellcapcheck'* *'spc'*
'spellcapcheck' 'spc'   string  (default "[.?!]\_[\])'" \t]\+")
                        local to buffer
        Pattern to locate the end of a sentence.  The following word will be
        checked to start with a capital letter.  If not then it is highlighted
        with SpellCap |hl-SpellCap| (unless the word is also badly spelled).
        When this check is not wanted make this option empty.
        Only used when 'spell' is set.
        Be careful with special characters, see |option-backslash| about
        including spaces and backslashes.
        To set this option automatically depending on the language, see
        |set-spc-auto|.

*'spellfile'* *'spf'*
'spellfile' 'spf'       string  (default empty)
                        local to buffer
        Name of the word list file where words are added for the |zg| and |zw|
        commands.  It must end in ".{encoding}.add".  You need to include the
        path, otherwise the file is placed in the current directory.
*E765*
        It may also be a comma separated list of names.  A count before the
        |zg| and |zw| commands can be used to access each.  This allows using
        a personal word list file and a project word list file.
        When a word is added while this option is empty Vim will set it for
        you: Using the first directory in 'runtimepath' that is writable.  If
        there is no "spell" directory yet it will be created.  For the file
        name the first language name that appears in 'spelllang' is used,
        ignoring the region.
        The resulting ".spl" file will be used for spell checking, it does not
        have to appear in 'spelllang'.
        Normally one file is used for all regions, but you can add the region
        name if you want to.  However, it will then only be used when
        'spellfile' is set to it, for entries in 'spelllang' only files
        without region name will be found.
        This option cannot be set from a |modeline| or in the |sandbox|, for  security reasons.

*'spelllang'* *'spl'*
'spelllang' 'spl'       string  (default "en")
                        local to buffer
        A comma separated list of word list names.  When the 'spell' option is
        on spellchecking will be done for these languages.  Example:
                set spelllang=en_us,nl,medical
        This means US English, Dutch and medical words are recognized.  Words
        that are not recognized will be highlighted.
        The word list name must consist of alphanumeric characters, a dash or
        an underscore.  It should not include a comma or dot.  Using a dash is
        recommended to separate the two letter language name from a
        specification.  Thus "en-rare" is used for rare English words.
        A region name must come last and have the form "_xx", where "xx" is
        the two-letter, lower case region name.  You can use more than one
        region by listing them: "en_us,en_ca" supports both US and Canadian
        English, but not words specific for Australia, New Zealand or Great
        Britain. (currently en_au and en_nz dictionaries are older than
        en_ca, en_gb and en_us).
        If the name "cjk" is included East Asian characters are excluded from
        spell checking.  This is useful when editing text that also has Asian
        words.
        the "medical" dictionary does not exist, it is just an
        example of a longer name.
*E757*
        As a special case the name of a .spl file can be given as-is.  The
        first "_xx" in the name is removed and used as the region name
        (_xx is an underscore, two letters and followed by a non-letter).
        This is mainly for testing purposes.  You must make sure the correct
        encoding is used, Vim doesn't check it.
        How the related spell files are found is explained here: |spell-load|.

        If the |spellfile.vim| plugin is active and you use a language name
        for which Vim cannot find the .spl file in 'runtimepath' the plugin
        will ask you if you want to download the file.

        After this option has been set successfully, Vim will source the files
        "spell/LANG.vim" in 'runtimepath'.  "LANG" is the value of 'spelllang'
        up to the first character that is not an ASCII letter or number and
        not a dash.  Also see |set-spc-auto|.

*'spelloptions'* *'spo'*
'spelloptions' 'spo'    string  (default "")
                        local to buffer
        A comma separated list of options for spell checking:
           camel        When a word is CamelCased, assume "Cased" is a
                        separate word: every upper-case character in a word
                        that comes after a lower case character indicates the
                        start of a new word.

*'spellsuggest'* *'sps'*
'spellsuggest' 'sps'    string  (default "best")
                        global
        Methods used for spelling suggestions.  Both for the |z=| command and
        the |spellsuggest()| function.  This is a comma-separated list of
        items:

        best            Internal method that works best for English.  Finds
                        changes like "fast" and uses a bit of sound-a-like
                        scoring to improve the ordering.

        double          Internal method that uses two methods and mixes the
                        results.  The first method is "fast", the other method
                        computes how much the suggestion sounds like the bad
                        word.  That only works when the language specifies
                        sound folding.  Can be slow and doesn't always give
                        better results.

        fast            Internal method that only checks for simple changes:
                        character inserts/deletes/swaps.  Works well for
                        simple typing mistakes.

        {number}        The maximum number of suggestions listed for |z=|.
                        Not used for |spellsuggest()|.  The number of
                        suggestions is never more than the value of 'lines'
                        minus two.

        file:{filename} Read file {filename}, which must have two columns,
                        separated by a slash.  The first column contains the
                        bad word, the second column the suggested good word.
                        Example:
                                theribal/terrible
                        Use this for common mistakes that do not appear at the
                        top of the suggestion list with the internal methods.
                        Lines without a slash are ignored, use this for
                        comments.
                        The word in the second column must be correct,
                        otherwise it will not be used.  Add the word to an
                        ".add" file if it is currently flagged as a spelling
                        mistake.
                        The file is used for all languages.

        expr:{expr}     Evaluate expression {expr}.  Use a function to avoid
                        trouble with spaces.  |v:val| holds the badly spelled
                        word.  The expression must evaluate to a List of
                        Lists, each with a suggestion and a score.
                        Example:
                                [['the', 33], ['that', 44]]
                        Set 'verbose' and use |z=| to see the scores that the
                        internal methods use.  A lower score is better.
                        This may invoke |spellsuggest()| if you temporarily
                        set 'spellsuggest' to exclude the "expr:" part.
                        Errors are silently ignored, unless you set the
                        'verbose' option to a non-zero value.

        Only one of "best", "double" or "fast" may be used.  The others may
        appear several times in any order.  Example:
                :set sps=file:~/.config/nvim/sugg,best,expr:MySuggest()

        This option cannot be set from a |modeline| or in the |sandbox|, for
        security reasons.


*'splitbelow'* *'sb'* *'nosplitbelow'* *'nosb'*
'splitbelow' 'sb'       boolean (default off)
                        global
        When on, splitting a window will put the new window below the current
        one. |:split|

*'splitright'* *'spr'* *'nosplitright'* *'nospr'*
'splitright' 'spr'      boolean (default off)
                        global
        When on, splitting a window will put the new window right of the
        current one. |:vsplit|

*'startofline'* *'sol'* *'nostartofline'* *'nosol'*
'startofline' 'sol'     boolean (default off)
                        global
        When "on" the commands listed below move the cursor to the first
        non-blank of the line.  When off the cursor is kept in the same column
        (if possible).  This applies to the commands: CTRL-D, CTRL-U, CTRL-B,
        CTRL-F, "G", "H", "M", "L", gg, and to the commands "d", "<<" and ">>"
        with a linewise operator, with "%" with a count and to buffer changing
        commands (CTRL-^, :bnext, :bNext, etc.).  Also for an Ex command that
        only has a line number, e.g., ":25" or ":+".
        In case of buffer changing commands the cursor is placed at the column
        where it was the last time the buffer was edited.

*'statusline'* *'stl'* *E540* *E542*
'statusline' 'stl'      string  (default empty)
                        global or local to window |global-local|
        When nonempty, this option determines the content of the status line.
        Also see |status-line|.

        The option consists of 🔑printf style '%' items🔑 interspersed with  normal text.
        Each status line item is of the form:
              %-0{minwid}.{maxwid}{item}
                All fields except the {item} are optional.
                A single percent sign can  be given as "%%".

        When the option starts with "%!" then it is used as an expression,
            the result is used as the option value.  Example:
                :set statusline=%!My某函数()

            The result can also contain %{} items that will be evaluated
            The *g:statusline_winid* variable will be set to the |window-ID| of the  window that the status line belongs to.

            evaluatd in what  context:
                 %! expression            current window and buffer,
                 %{} item                 window that the statusline belongs to.

        When there is error while evaluating the option
            then it will be made empty to avoid further errors.
            (Otherwise screen updating would loop.)

        effect of 'ruler' when this option is set (and  'laststatus' is 2) is controlling the output of |CTRL-G|.

        field       meaning
        -           Left justify the item.  The default is right justified
                    when minwid is larger than the length of the item.
        0           Leading zeroes in numeric items.  Overridden by '-'.

        minwid      Minimum width of the item, padding as set by '-' & '0'.
                    Value must be 50 or less.

        maxwid      Maximum width of the item.  Truncation occurs with a '<'
                    on the left for text items.  Numeric items will be
                    shifted down to maxwid-2 digits followed by '>'number
                    where number is the amount of missing digits, much like
                    an exponential notation.

        item        A one letter code as described below.

    Following is a description of the possible statusline items.
    The second character in "item" is the type:
          N :   number
          S :   string
          F :   flags as described below
          - :   applicable

        item  meaning
        f S   Path to the file in the buffer, as typed or relative to current
              directory.
        F S   Full path to the file in the buffer.
        t S   File name (tail) of file in the buffer.
        m F   Modified flag, text is "[+]"; "[-]" if 'modifiable' is off.
        M F   Modified flag, text is ",+" or ",-".
        r F   Readonly flag, text is "[RO]".
        R F   Readonly flag, text is ",RO".
        h F   Help buffer flag, text is "[help]".
        H F   Help buffer flag, text is ",HLP".
        w F   Preview window flag, text is "[Preview]".
        W F   Preview window flag, text is ",PRV".
        y F   Type of file in the buffer, e.g., "[vim]".  See 'filetype'.
        Y F   Type of file in the buffer, e.g., ",VIM".  See 'filetype'.
        q S   "[Quickfix List]", "[Location List]" or empty.
        k S   Value of "b:keymap_name" or 'keymap' when |:lmap| mappings are
              being used: "<keymap>"
        n N   Buffer number.
        b N   Value of character under cursor.
        B N   As above, in hexadecimal.
        o N   Byte number in file of byte under cursor, first byte is 1.
              Mnemonic: Offset from start of file (with one added)
        O N   As above, in hexadecimal.
        N N   Printer page number.  (Only works in the 'printheader' option.)
        l N   Line number.
        L N   Number of lines in buffer.
        c N   Column number (byte index).
        v N   Virtual column number (screen column).
        V N   Virtual column number as -{num}.  Not displayed if equal to 'c'.
        p N   Percentage through file in lines as in |CTRL-G|.
        P S   Percentage through file of displayed window.  This is like the
              percentage described for 'ruler'.  Always 3 in length, unless
              translated.
        a S   Argument list status as in default title.  ({current} of {max})
              Empty if the argument file count is zero or one.
        { NF  Evaluate expression between '%{' and '}' and substitute result.
              there is no '%' before the closing '}'.  The
              expression cannot contain a '}' character, call a function to
              work around that.  See |stl-%{| below.
        {% -  This is almost same as { except the result of the expression is
              re-evaluated as a statusline format string.  Thus if the
              return value of expr contains % items they will get expanded.
              The expression can contain the } character, the end of
              expression is denoted by %}.
              For example:
                func! Stl_filename() abort
                    return "%t"
                endfunc
                `stl=%{Stl_filename()}`   results in `"%t"`
                `stl=%{%Stl_filename()%}` results in `"Name of current file"`
        %} -  End of `{%` expression
        ( -   Start of item group.  Can be used for setting the width and
              alignment of a section.  Must be followed by %) somewhere.
        ) -   End of item group.  No width fields allowed.
        T N   For 'tabline': start of tab page N label.  Use %T or %X to end
              the label.  Clicking this label with left mouse button switches
              to the specified tab page.
        X N   For 'tabline': start of close tab N label.  Use %X or %T to end
              the label, e.g.: %3Xclose%X.  Use %999X for a "close current
              tab" label.    Clicking this label with left mouse button closes
              specified tab page.
        @ N   For 'tabline': start of execute function label. Use %X or %T to
              end the label, e.g.: %10@SwitchBuffer@foo.c%X.  Clicking this
              label runs specified function: in the example when clicking once
              using left mouse button on "foo.c" "SwitchBuffer(10, 1, 'l',
              '    ')" expression will be run.  Function receives the
              following arguments in order:
              1. minwid field value or zero if no N was specified
              2. number of mouse clicks to detect multiple clicks
              3. mouse button used: "l", "r" or "m" for left, right or middle
                 button respectively; one should not rely on third argument
                 being only "l", "r" or "m": any other non-empty string value
                 that contains only ASCII lower case letters may be expected
                 for other mouse buttons
              4. modifiers pressed: string which contains "s" if shift
                 modifier was pressed, "c" for control, "a" for alt and "m"
                 for meta; currently if modifier is not pressed string
                 contains space instead, but one should not rely on presence
                 of spaces or specific order of modifiers: use |stridx()| to
                 test whether some modifier is present; string is guaranteed
                 to contain only ASCII letters and spaces, one letter per
                 modifier; "?" modifier may also be present, but its presence
                 is a bug that denotes that new mouse button recognition was
                 added without modifying code that reacts on mouse clicks on
                 this label.
              to test whether your version of Neovim contains this
                    feature use `has('tablineat')`.
        < -   Where to truncate line if too long.  Default is at the start.
              No width fields allowed.
        = -   Separation point between alignment sections. Each section will
              be separated by an equal number of spaces.
              No width fields allowed.
        # -   Set highlight group.  The name must follow and then a # again.
              Thus use %#HLname# for highlight group HLname.  The same
              highlighting is used, also for the statusline of non-current
              windows.
        * -   Set highlight group to User{N}, where {N} is taken from the
              minwid field, e.g. %1*.  Restore normal highlight with %* or %0*.
              The difference between User{N} and StatusLine  will be applied
              to StatusLineNC for the statusline of non-current windows.
              The number N must be between 1 and 9.  See |hl-User1..9|

        When displaying a flag, Vim removes the leading comma, if any, when
        that flag comes right after plaintext.  This will make a nice display
        when flags are used like in the examples below.

        When all items in a group becomes an empty string (i.e. flags that are
        not set) and a minwid is not set for the group, the whole group will
        become empty.  This will make a group like the following disappear
        completely from the statusline when none of the flags are set.
                :set statusline=...%(\ [%M%R%H]%)...
        Beware that an expression is evaluated each and every time the status
        line is displayed.
*stl-%{* *g:actual_curbuf* *g:actual_curwin*
        While evaluating %{} the current buffer and current window will be set
        temporarily to that of the window (and buffer) whose statusline is
        currently being drawn.  The expression will evaluate in this context.
        The variable "g:actual_curbuf" is set to the `bufnr()` number of the
        real current buffer and "g:actual_curwin" to the |window-ID| of the
        real current window.  These values are strings.

        The 'statusline' option will be evaluated in the |sandbox| if set from
        a modeline, see |sandbox-option|.
        This option cannot be set in a modeline when 'modelineexpr' is off.

        It is not allowed to change text or jump to another window while
        evaluating 'statusline' |textlock|.

        If the statusline is not updated when you want it (e.g., after setting
        a variable that's used in an expression), you can force an update by
        setting an option without changing its value.  Example:
                :let &ro = &ro

        A result of all digits is regarded a number for display purposes.
        Otherwise the result is taken as flag text and applied to the rules
        described above.

        Watch out for errors in expressions.  They may render Vim unusable!
        If you are stuck, hold down ':' or 'Q' to get a prompt, then quit and
        edit your vimrc or whatever with "vim --clean" to get it right.

        Examples:
        Emulate standard status line with 'ruler' set
          :set statusline=%<%f\ %h%m%r%=%-14.(%l,%c%V%)\ %P
        Similar, but add ASCII value of char under the cursor (like "ga")
          :set statusline=%<%f%h%m%r%=%b\ 0x%B\ \ %l,%c%V\ %P
        Display byte count and byte value, modified flag in red.
          :set statusline=%<%f%=\ [%1*%M%*%n%R%H]\ %-19(%3l,%02c%03V%)%O'%02b'
          :hi User1 term=inverse,bold cterm=inverse,bold ctermfg=red
        Display a ,GZ flag if a compressed file is loaded
          :set statusline=...%r%{VarExists('b:gzflag','\ [GZ]')}%h...
        In the |:autocmd|'s:
          :let b:gzflag = 1
        And:
          :unlet b:gzflag
        And define this function:
          :function VarExists(var, val)
          :    if exists(a:var) | return a:val | else | return '' | endif
          :endfunction

*'suffixes'* *'su'*
'suffixes' 'su'         string  (default ".bak,~,.o,.h,.info,.swp,.obj")
                        global
        Files with these suffixes get a lower priority when multiple files
        match a wildcard.  See |suffixes|.  Commas can be used to separate the
        suffixes.  Spaces after the comma are ignored.  A dot is also seen as
        the start of a suffix.  To avoid a dot or comma being recognized as a
        separator, precede it with a backslash (see |option-backslash| about
        including spaces and backslashes).
        See 'wildignore' for completely ignoring files.
        The use of |:set+=| and |:set-=| is preferred when adding or removing
        suffixes from the list.  This avoids problems when a future version
        uses another default.

*'suffixesadd'* *'sua'*
'suffixesadd' 'sua'     string  (default "")
                        local to buffer
        Comma separated list of suffixes, which are used when searching for a
        file for the "gf", "[I", etc. commands.  Example:
                :set suffixesadd=.java

*'swapfile'* *'swf'* *'noswapfile'* *'noswf'*
'swapfile' 'swf'        boolean (default on)
                        local to buffer
        Use a swapfile for the buffer.  This option can be reset when a
        swapfile is not wanted for a specific buffer.  For example, with
        confidential information that even root must not be able to access.
        Careful: All text will be in memory:
                - Don't use this for big files.
                - Recovery will be impossible!
        A swapfile will only be present when |'updatecount'| is non-zero and
        'swapfile' is set.
        When 'swapfile' is reset, the swap file for the current buffer is
        immediately deleted.  When 'swapfile' is set, and 'updatecount' is
        non-zero, a swap file is immediately created.
        Also see |swap-file|.
        If you want to open a new buffer without creating a swap file for it,
        use the |:noswapfile| modifier.
        See 'directory' for where the swap file is created.

        This option is used together with 'bufhidden' and 'buftype' to
        specify special kinds of buffers.   See |special-buffers|.

*'switchbuf'* *'swb'*
'switchbuf' 'swb'       string  (default "uselast")
                        global
        This option controls the behavior when switching between buffers.
        Mostly for |quickfix| commands some values are also used for other
        commands, as mentioned below.
        Possible values (comma separated list):
           useopen      If included, jump to the first open window that
                        contains the specified buffer (if there is one).
                        Otherwise: Do not examine other windows.
                        This setting is checked with |quickfix| commands, when
                        jumping to errors (":cc", ":cn", "cp", etc.).  It is
                        also used in all buffer related split commands, for
                        example ":sbuffer", ":sbnext", or ":sbrewind".
           usetab       Like "useopen", but also consider windows in other tab
                        pages.
           split        If included, split the current window before loading
                        a buffer for a |quickfix| command that display errors.
                        Otherwise: do not split, use current window (when used
                        in the quickfix window: the previously used window or
                        split if there is no other window).
           vsplit       Just like "split" but split vertically.
           newtab       Like "split", but open a new tab page.  Overrules
                        "split" when both are present.
           uselast      If included, jump to the previously used window when
                        jumping to errors with |quickfix| commands.

*'synmaxcol'* *'smc'*
'synmaxcol' 'smc'       number  (default 3000)
                        local to buffer
        Maximum column in which to search for syntax items.  In long lines the
        text after this column is not highlighted and following lines may not
        be highlighted correctly, because the syntax state is cleared.
        This helps to avoid very slow redrawing for an XML file that is one
        long line.
        Set to zero to remove the limit.

*'syntax'* *'syn'*
'syntax' 'syn'          string  (default empty)
                        local to buffer
        When this option is set, the syntax with this name is loaded, unless
        syntax highlighting has been switched off with ":syntax off".
        Otherwise this option does not always reflect the current syntax (the
        b:current_syntax variable does).
        This option is most useful in a modeline, for a file which syntax is
        not automatically recognized.  Example, in an IDL file:
                /* vim: set syntax=idl : */
        When a dot appears in the value then this separates two filetype
        names.  Example:
                /* vim: set syntax=c.doxygen : */
        This will use the "c" syntax first, then the "doxygen" syntax.
        the second one must be prepared to be loaded as an addition,
        otherwise it will be skipped.  More than one dot may appear.
        To switch off syntax highlighting for the current file, use:
                :set syntax=OFF
        To switch syntax highlighting on according to the current value of the
        'filetype' option:
                :set syntax=ON
        What actually happens when setting the 'syntax' option is that the
        Syntax autocommand event is triggered with the value as argument.
        This option is not copied to another buffer, independent of the 's' or
        'S' flag in 'cpoptions'.
        Only normal file name characters can be used, "/\*?[|<>" are illegal.

*'tabline'* *'tal'*
'tabline' 'tal'         string  (default empty)
                        global
        When nonempty, this option determines the content of the tab pages
        line at the top of the Vim window.  When empty Vim will use a default
        tab pages line.  See |setting-tabline| for more info.

        The tab pages line only appears as specified with the 'showtabline'
        option and only when there is no GUI tab line.  When 'e' is in
        'guioptions' and the GUI supports a tab line 'guitablabel' is used
        instead.  the two tab pages lines are very different.

        The value is evaluated like with 'statusline'.  You can use
        |tabpagenr()|, |tabpagewinnr()| and |tabpagebuflist()| to figure out
        the text to be displayed.  Use "%1T" for the first label, "%2T" for
        the second one, etc.  Use "%X" items for closing labels.

        When changing something that is used in 'tabline' that does not
        trigger it to be updated, use |:redrawtabline|.
        This option cannot be set in a modeline when 'modelineexpr' is off.

        Keep in mind that only one of the tab pages is the current one, others
        are invisible and you can't jump to their windows.


*'tabpagemax'* *'tpm'*
'tabpagemax' 'tpm'      number  (default 50)
                        global
        Maximum number of tab pages to be opened by the |-p| command line
        argument or the ":tab all" command. |tabpage|


*'tabstop'* *'ts'*
'tabstop' 'ts'          number  (default 8)
                        local to buffer

if  |'vartabstop'| is not an empty string.
    'tabstop' will be ignored

insert时, 输入space, 而softtabstop插入的还是tab
Number of spaces that a <Tab> in the file counts for.
Also see |:retab| command,
and 'softtabstop' option.

There are four main ways to use tabs in Vim:

1.  此方法不适用于python:
        Spaces are the preferred indentation method.
        Tabs should be used solely to remain consistent with code that is already indented with tabs.
        🔑Python disallows mixing tabs and spaces for indentation.🔑
    方法:
        Always keep 'tabstop' at 8,
        set 'softtabstop' and 'shiftwidth' to 4 (or 3 or whatever you prefer) and use 'noexpandtab'.
        Then Vim will use a mix of tabs and spaces,
        but typing <Tab> and <BS> will behave like a tab appears every 4 (or 3) characters.

2.  python用户首选?
    Set 'tabstop' and 'shiftwidth' to whatever you prefer and use 'expandtab'.
    This way you will always insert <Space>  没有<Tab>
    The formatting will never be messed up when 'tabstop' is changed.

3.  Set 'tabstop' and 'shiftwidth' to whatever you prefer
    (set noexpandtab?)
    敲TAB键时, 插入真的<Tab>, 而非<Space>?
    and use a |modeline| to set these values when
    editing the file again.
    Only works when using Vim to edit the file.

4.  Always set 'tabstop' and 'shiftwidth' to the same value,
    and 'noexpandtab'.
    This should then work (for initial indents only, 行中间的空格 可能会乱?)  for any tabstop setting that people use.
    after the first non-blank
         inserted <Space>s instead of <tab>会更好
         Otherwise
             aligned comments (行末的?) will be wrong when 'tabstop' is  changed.



*'tagbsearch'* *'tbs'* *'notagbsearch'* *'notbs'*
'tagbsearch' 'tbs'      boolean (default on)
                        global
        When searching for a tag (e.g., for the |:ta| command), Vim can either
        use a binary search or a linear search in a tags file.  Binary
        searching makes searching for a tag a LOT faster, but a linear search
        will find more tags if the tags file wasn't properly sorted.
        Vim normally assumes that your tags files are sorted, or indicate that
        they are not sorted.  Only when this is not the case does the
        'tagbsearch' option need to be switched off.

        When 'tagbsearch' is on, binary searching is first used in the tags
        files.  In certain situations, Vim will do a linear search instead for
        certain files, or retry all files with a linear search.  When
        'tagbsearch' is off, only a linear search is done.

        Linear searching is done anyway, for one file, when Vim finds a line
        at the start of the file indicating that it's not sorted:
   !_TAG_FILE_SORTED    0       /some comment/
        [The whitespace before and after the '0' must be a single <Tab>]

        When a binary search was done and no match was found in any of the
        files listed in 'tags', and case is ignored or a pattern is used
        instead of a normal tag name, a retry is done with a linear search.
        Tags in unsorted tags files, and matches with different case will only
        be found in the retry.

        If a tag file indicates that it is case-fold sorted, the second,
        linear search can be avoided when case is ignored.  Use a value of '2'
        in the "!_TAG_FILE_SORTED" line for this.  A tag file can be case-fold
        sorted with the -f switch to "sort" in most unices, as in the command:
        "sort -f -o tags tags".  For "Exuberant ctags" version 5.x or higher
        (at least 5.5) the --sort=foldcase switch can be used for this as
        well.  case must be folded to uppercase for this to work.

        By default, tag searches are case-sensitive.  Case is ignored when
        'ignorecase' is set and 'tagcase' is "followic", or when 'tagcase' is
        "ignore".
        Also when 'tagcase' is "followscs" and 'smartcase' is set, or
        'tagcase' is "smart", and the pattern contains only lowercase
        characters.

        When 'tagbsearch' is off, tags searching is slower when a full match
        exists, but faster when no full match exists.  Tags in unsorted tags
        files may only be found with 'tagbsearch' off.
        When the tags file is not sorted, or sorted in a wrong way (not on
        ASCII byte value), 'tagbsearch' should be off, or the line given above
        must be included in the tags file.
        This option doesn't affect commands that find all matching tags (e.g.,
        command-line completion and ":help").

*'tagcase'* *'tc'*
'tagcase' 'tc'          string  (default "followic")
                        global or local to buffer |global-local|
        This option specifies how case is handled when searching the tags
        file:
           followic     Follow the 'ignorecase' option
           followscs    Follow the 'smartcase' and 'ignorecase' options
           ignore       Ignore case
           match        Match case
           smart        Ignore case unless an upper case letter is used

*'tagfunc'* *'tfu'*
'tagfunc' 'tfu'         string  (default: empty)
                        local to buffer
        This option specifies a function to be used to perform tag searches.
        The function gets the tag pattern and should return a List of matching
        tags.  See |tag-function| for an explanation of how to write the
        function and an example.

*'taglength'* *'tl'*
'taglength' 'tl'        number  (default 0)
                        global
        If non-zero, tags are significant up to this number of characters.

*'tagrelative'* *'tr'* *'notagrelative'* *'notr'*
'tagrelative' 'tr'      boolean (Vim default: on, Vi default: off)
                        global
        If on and using a tags file in another directory, file names in that
        tags file are relative to the directory where the tags file is.

*'tags'* *'tag'* *E433*
'tags' 'tag'            string  (default "./tags;,tags")
                        global or local to buffer |global-local|
        Filenames for the tag command, separated by spaces or commas.  To
        include a space or comma in a file name, precede it with a backslash
        (see |option-backslash| about including spaces and backslashes).
        When a file name starts with "./", the '.' is replaced with the path
        of the current file.  But only when the 'd' flag is not included in
        'cpoptions'.  Environment variables are expanded |:set_env|.  Also see
        |tags-option|.
        "*", "**" and other wildcards can be used to search for tags files in
        a directory tree.  See |file-searching|.  E.g., "/lib/**/tags" will
        find all files named "tags" below "/lib".  The filename itself cannot
        contain wildcards, it is used as-is.  E.g., "/lib/**/tags?" will find
        files called "tags?".
        The |tagfiles()| function can be used to get a list of the file names
        actually used.
        The use of |:set+=| and |:set-=| is preferred when adding or removing
        file names from the list.  This avoids problems when a future version
        uses another default.

*'tagstack'* *'tgst'* *'notagstack'* *'notgst'*
'tagstack' 'tgst'       boolean (default on)
                        global
        When on, the |tagstack| is used normally.  When off, a ":tag" or
        ":tselect" command with an argument will not push the tag onto the
        tagstack.  A following ":tag" without an argument, a ":pop" command or
        any other command that uses the tagstack will use the unmodified
        tagstack, but does change the pointer to the active entry.
        Resetting this option is useful when using a ":tag" command in a
        mapping which should not change the tagstack.

*'termbidi'* *'tbidi'*
*'notermbidi'* *'notbidi'*
'termbidi' 'tbidi'      boolean (default off)
                        global
        The terminal is in charge of Bi-directionality of text (as specified
        by Unicode).  The terminal is also expected to do the required shaping
        that some languages (such as Arabic) require.
        Setting this option implies that 'rightleft' will not be set when
        'arabic' is set and the value of 'arabicshape' will be ignored.
        setting 'termbidi' has the immediate effect that
        'arabicshape' is ignored, but 'rightleft' isn't changed automatically.
        For further details see |arabic.txt|.

*'termguicolors'* *'tgc'*
'termguicolors' 'tgc'   boolean (default off)
                        global
        Enables 24-bit RGB color in the |TUI|.  Uses "gui" |:highlight|
        attributes instead of "cterm" attributes. |highlight-guifg|
        Requires an ISO-8613-3 compatible terminal.

*'termpastefilter'* *'tpf'*
'termpastefilter' 'tpf' string  (default: "BS,HT,ESC,DEL")
                        global
        A comma separated list of options for specifying control characters
        to be removed from the text pasted into the terminal window. The
        supported values are:

           BS       Backspace

           HT       TAB

           FF       Form feed

           ESC      Escape

           DEL      DEL

           C0       Other control characters, excluding Line feed and
                    Carriage return < ' '

           C1       Control characters 0x80...0x9F


*'terse'* *'noterse'*
'terse'                 boolean (default off)
                        global
        When set: Add 's' flag to 'shortmess' option (this makes the message
        for a search that hits the start or end of the file not being
        displayed).  When reset: Remove 's' flag from 'shortmess' option.


*'textwidth'* *'tw'*
'textwidth' 'tw'        number  (default 0)
                        local to buffer

        When 'formatexpr' is set:
            A longer line will be broken after white space to get this width.
            See also  |ins-textwidth|.

            When 'textwidth' is zero,
                A zero value disables this.
                'wrapmargin' may be used.
找同义词, 丰富词汇?
    *'thesaurusfunc'* *'tsrfu'*
    'thesaurusfunc' 'tsrfu' string  (default: empty)
                            global or local to buffer |global-local|
            This option specifies a function to be used for thesaurus completion
            with CTRL-X CTRL-T. |i_CTRL-X_CTRL-T| See |compl-thesaurusfunc|.

            This option cannot be set from a |modeline| or in the |sandbox|, for  security reasons.

    *'thesaurus'* *'tsr'*
    'thesaurus' 'tsr'       string  (default "")
                            global or local to buffer |global-local|
            List of file names,  separated by commas,
            that are used to lookup words  for thesaurus completion commands |i_CTRL-X_CTRL-T|.  See  |compl-thesaurus|.

            This option is not used if 'thesaurusfunc' is set,
            either for the  buffer or globally.

            To include a comma in a file name precede it with a backslash.  Spaces
            after a comma are ignored, otherwise spaces are included in the file
            name.  See |option-backslash| about using backslashes.  The use of
            |:set+=| and |:set-=| is preferred when adding or removing directories
            from the list.  This avoids problems when a future version uses
            another default.  Backticks cannot be used in this option for security
            reasons.


*'tildeop'* *'top'* *'notildeop'* *'notop'*
'tildeop' 'top'         boolean (default off)
                        global
        When on: The tilde command "~" behaves like an operator.

*'timeout'* *'to'* *'notimeout'* *'noto'*
'timeout' 'to'          boolean (default on)
                        global
        This option and 'timeoutlen' determine the behavior when part of a
        mapped key sequence has been received. For example, if <c-f> is
        pressed and 'timeout' is set, Nvim will wait 'timeoutlen' milliseconds
        for any key that can follow <c-f> in a mapping.

*'ttimeout'* *'nottimeout'*
'ttimeout'              boolean (default on)
                        global
        This option and 'ttimeoutlen' determine the behavior when part of a
        key code sequence has been received by the |TUI|.

        For example if <Esc> (the \x1b byte) is received and 'ttimeout' is
        set, Nvim waits 'ttimeoutlen' milliseconds for the terminal to
        complete a key code sequence. If no input arrives before the timeout,
        a single <Esc> is assumed. Many TUI cursor key codes start with <Esc>.

        On very slow systems this may fail, causing cursor keys not to work
        sometimes.  If you discover this problem you can ":set ttimeoutlen=9999".
        Nvim will wait for the next character to arrive after an <Esc>.

*'timeoutlen'* *'tm'*
'timeoutlen' 'tm'       number  (default 1000)
                        global
        Time in milliseconds to wait for a mapped sequence to complete.

*'ttimeoutlen'* *'ttm'*
'ttimeoutlen' 'ttm'     number  (default 50)
                        global
        Time in milliseconds to wait for a key code sequence to complete. Also
        used for CTRL-\ CTRL-N and CTRL-\ CTRL-G when part of a command has
        been typed.

*'title'* *'notitle'*
'title'                 boolean (default off)
                        global
        When on, the title of the window will be set to the value of
        'titlestring' (if it is not empty), or to:
                filename [+=-] (path) - NVIM
        Where:
                filename        the name of the file being edited
                -               indicates the file cannot be modified, 'ma' off
                +               indicates the file was modified
                =               indicates the file is read-only
                =+              indicates the file is read-only and modified
                (path)          is the path of the file being edited
                - NVIM          the server name |v:servername| or "NVIM"

*'titlelen'*
'titlelen'              number  (default 85)
                        global
        Gives the percentage of 'columns' to use for the length of the window
        title.  When the title is longer, only the end of the path name is
        shown.  A '<' character before the path name is used to indicate this.
        Using a percentage makes this adapt to the width of the window.  But
        it won't work perfectly, because the actual number of characters
        available also depends on the font used and other things in the title
        bar.  When 'titlelen' is zero the full path is used.  Otherwise,
        values from 1 to 30000 percent can be used.
        'titlelen' is also used for the 'titlestring' option.

*'titleold'*
'titleold'              string  (default "")
                        global
        If not empty, this option will be used to set the window title when
        exiting.  Only if 'title' is enabled.
        This option cannot be set from a |modeline| or in the |sandbox|, for
        security reasons.
*'titlestring'*
'titlestring'           string  (default "")
                        global
        When this option is not empty, it will be used for the title of the
        window.  This happens only when the 'title' option is on.

        When this option contains printf-style '%' items, they will be
        expanded according to the rules used for 'statusline'.
        This option cannot be set in a modeline when 'modelineexpr' is off.

        Example:
            :auto BufEnter * let &titlestring = hostname() . "/" . expand("%:p")
            :set title titlestring=%<%F%=%l/%L-%P titlelen=70
        The value of 'titlelen' is used to align items in the middle or right
        of the available space.
        Some people prefer to have the file name first:
            :set titlestring=%t%(\ %M%)%(\ (%{expand(\"%:~:.:h\")})%)%(\ %a%)
        Note the use of "%{ }" and an expression to get the path of the file,
        without the file name.  The "%( %)" constructs are used to add a
        separating space only when needed.
        NOTE: Use of special characters in 'titlestring' may cause the display
        to be garbled (e.g., when it contains a CR or NL character).

*'ttyfast'* *'tf'* *'nottyfast'* *'notf'*
'ttyfast' 'tf'          Removed. |vim-differences|

*'undodir'* *'udir'* *E5003*
'undodir' 'udir'        string  (default "$XDG_DATA_HOME/nvim/undo//")
                        global
        List of directory names for undo files, separated with commas.
        See 'backupdir' for details of the format.
        "." means using the directory of the file.  The undo file name for
        "file.txt" is ".file.txt.un~".
        For other directories the file name is the full path of the edited
        file, with path separators replaced with "%".
        When writing: The first directory that exists is used.  "." always
        works, no directories after "." will be used for writing.  If none of
        the directories exist Nvim will attempt to create the last directory in
        the list.
        When reading all entries are tried to find an undo file.  The first
        undo file that exists is used.  When it cannot be read an error is
        given, no further entry is used.
        See |undo-persistence|.
        This option cannot be set from a |modeline| or in the |sandbox|, for  security reasons.

        unlike 'directory' and 'backupdir', 'undodir' always acts as
        though the trailing slashes are present (see 'backupdir' for what this
        means).

*'undofile'* *'noundofile'* *'udf'* *'noudf'*
'undofile' 'udf'        boolean (default off)
                        local to buffer
        When on, Vim automatically saves undo history to an undo file when
        writing a buffer to a file, and restores undo history from the same
        file on buffer read.
        The directory where the undo file is stored is specified by 'undodir'.
        For more information about this feature see |undo-persistence|.
        The undo file is not read when 'undoreload' causes the buffer from
        before a reload to be saved for undo.
        When 'undofile' is turned off the undo file is NOT deleted.

*'undolevels'* *'ul'*
'undolevels' 'ul'       number  (default 1000)
                        global or local to buffer |global-local|
        Maximum number of changes that can be undone.  Since undo information
        is kept in memory, higher numbers will cause more memory to be used.
        Nevertheless, a single change can already use a large amount of memory.
        Set to 0 for Vi compatibility: One level of undo and "u" undoes
        itself:
                set ul=0
        But you can also get Vi compatibility by including the 'u' flag in
        'cpoptions', and still be able to use CTRL-R to repeat undo.
        Also see |undo-two-ways|.
        Set to -1 for no undo at all.  You might want to do this only for the
        current buffer:
                setlocal ul=-1
        This helps when you run out of memory for a single change.

        The local value is set to -123456 when the global value is to be used.

        Also see |clear-undo|.

*'undoreload'* *'ur'*
'undoreload' 'ur'       number  (default 10000)
                        global
        Save the whole buffer for undo when reloading it.  This applies to the
        ":e!" command and reloading for when the buffer changed outside of
        Vim. |FileChangedShell|
        The save only happens when this option is negative or when the number
        of lines is smaller than the value of this option.
        Set this option to zero to disable undo for a reload.

        When saving undo for a reload, any undo file is not read.

        this causes the whole buffer to be stored in memory.  Set
        this option to a lower value if you run out of memory.

*'updatecount'* *'uc'*
'updatecount' 'uc'      number  (default: 200)
                        global
        After typing this many characters the swap file will be written to
        disk.  When zero, no swap file will be created at all (see chapter on
        recovery |crash-recovery|).  'updatecount' is set to zero by starting
        Vim with the "-n" option, see |startup|.  When editing in readonly
        When 'updatecount' is set from zero to non-zero, swap files are
        created for all buffers that have 'swapfile' set.  When 'updatecount'
        is set to zero, existing swap files are not deleted.
        This option has no meaning in buffers where |'buftype'| is "nofile"
        or "nowrite".

*'updatetime'* *'ut'*
'updatetime' 'ut'       number  (default 4000)
                        global
        If this many milliseconds nothing is typed the swap file will be
        written to disk (see |crash-recovery|).  Also used for the
        |CursorHold| autocommand event.


*'varsofttabstop'* *'vsts'*
'varsofttabstop' 'vsts' string  (default "")
                        local to buffer

    A list of the number of spaces that a <Tab> counts for  while editing,
    such as inserting a <Tab> or  using <BS>.
     It "feels" like variable- width <Tab>s are being inserted,
    while 🔑in fact a mixture of spaces and  <Tab>s is used.🔑
     Tab widths are separated with commas,
    with the final value applying to all subsequent tabs.

        少遇到的要用这个feature的情况:
    when editing assembly language files where statements start in the 8th column and
    comments in the 40th,
    it may be useful to use the following:
                :set varsofttabstop=8,32,8

        This will set 🔑soft tabstops🔑 at the 8th and 40th columns, and at every
        8th column thereafter.

        the value of |'softtabstop'| will be ignored while
        'varsofttabstop' is set.

*'vartabstop'* *'vts'*
'vartabstop' 'vts'      string  (default "")
                        local to buffer

        the value of |'tabstop'| will be ignored while 'vartabstop'
        is set.

        For example:
                :set vartabstop=4,20,10,8

        This will make the first tab 4 💛spaces wide💛,
        the second 20 spaces,
        the third 10 spaces,
        and all following tabs 8 spaces.

        A list of the number of spaces that a <Tab> in the file counts for,
        separated by commas.
        Each value corresponds to one tab,
        with the final value applying to all subsequent tabs.


*'verbose'* *'vbs'*
'verbose' 'vbs'         number  (default 0)
                        global

        When the 'verbosefile' option is set then the verbose messages are not  displayed.

        When bigger than zero, Vim will give messages about what it is doing.
        Currently, these messages are given:
        >= 1    When the shada file is read or written.
        >= 2    When a file is ":source"'ed.
        >= 3    UI info, terminal capabilities
        >= 4    Shell commands.
        >= 5    Every searched tags file and include file.
        >= 8    Files for which a group of autocommands is executed.
        >= 9    Every executed autocommand.

        >= 11   Finding items in a path
        >= 12   Every executed function.
        >= 13   When an exception is thrown, caught, finished, or discarded.
        >= 14   Anything pending in a ":finally" clause.
        >= 15   Every executed Ex command from a script (truncated at 200
                characters).
        >= 16   Every executed Ex command.

        This option can also be set with the "-V" argument.  See |-V|.
        This option is also set by the |:verbose| command.


*'verbosefile'* *'vfile'*
'verbosefile' 'vfile'   string  (default empty)
                        global
        When not empty all messages are written in a file with this name.
        When the file exists messages are appended.

        Writing to the file ends when Vim exits or when 'verbosefile' is made
        empty.

        Writes are buffered, thus may not show up for some time.
        Setting 'verbosefile' to a new value is like making it empty first.
        The difference with |:redir| is that
            verbose messages are not  displayed when 'verbosefile' is set.

*'viewdir'* *'vdir'*
'viewdir' 'vdir'        string  (default: "$XDG_DATA_HOME/nvim/view//")
                        global
        Name of the directory where to store files for |:mkview|.
        This option cannot be set from a |modeline| or in the |sandbox|, for  security reasons.

*'viewoptions'* *'vop'*
'viewoptions' 'vop'     string  (default: "folds,cursor,curdir")
                        global
*'viewoptions'* *'vop'*
'viewoptions' 'vop'     string  (default: "folds,cursor,curdir")
                        global
        Changes the effect of the |:mkview| command.  It is a comma separated
        list of words.  Each word enables saving and restoring something:
           word         save and restore
           cursor       cursor position in file and in window
           curdir       local current directory, if set with |:lcd|
           folds        manually created folds, opened/closed folds and local
                        fold options
           options      options and mappings local to a window or buffer (not
                        global values for local options)
           localoptions same as "options"
           slash        |deprecated| Always enabled. Uses "/" in filenames.
           unix         |deprecated| Always enabled. Uses "\n" line endings.

*'virtualedit'* *'ve'*
'virtualedit' 've'      string  (default "")
                        global
    A comma separated list of these words:
        block       Allow virtual editing in Visual block mode.
        insert      Allow virtual editing in Insert mode.
        all         Allow virtual editing in all modes.
        onemore:    只影响normal mode
                    it will only allow moving the cursor just after the last character of the line.
                    This makes some commands more consistent.

        It doesn't make sense to combine "all" with "onemore",  but you will not get a warning for it.

    Virtual editing means that
        the cursor  can be positioned where there is no actual character.
        This can be
            halfway into a tab or
            beyond the end of the line.

    It may also break some plugins or  Vim scripts.
        For example,  because |l| can move the cursor after the last character.

    `$` command
        will move to the last character in the line,  not past it.
        如果cursor is beyond the last character in the line
            will move the cursor to the left

    To the end of the screen line:  `g$` command




*'visualbell'* *'vb'* *'novisualbell'* *'novb'* *beep*
'visualbell' 'vb'       boolean (default off)
                        global
        Use visual bell instead of beeping.  Also see 'errorbells'.

*'warn'* *'nowarn'*
'warn'                  boolean (default on)
                        global
        Give a warning message when a shell command is used while the buffer
        has been changed.

*'whichwrap'* *'ww'*
'whichwrap' 'ww'        string  (Vim default: "b,s", Vi default: "")
                        global
        Allow specified keys that move the cursor left/right to move to the
        previous/next line when the cursor is on the first/last character in
        the line.  Concatenate characters to allow this for these keys:
                char   key        mode
                 b    <BS>       Normal and Visual
                 s    <Space>    Normal and Visual
                 h    "h"        Normal and Visual (not recommended)
                 l    "l"        Normal and Visual (not recommended)
                 <    <Left>     Normal and Visual
                 >    <Right>    Normal and Visual
                 ~    "~"        Normal
                 [    <Left>     Insert and Replace
                 ]    <Right>    Insert and Replace
        For example:
                :set ww=<,>,[,]
        allows wrap only when cursor keys are used.
        When the movement keys are used in combination with a delete or change
        operator, the <EOL> also counts for a character.  This makes "3h"
        different from "3dh" when the cursor crosses the end of a line.  This
        is also true for "x" and "X", because they do the same as "dl" and
        "dh".  If you use this, you may also want to use the mapping
        ":map <BS> X" to make backspace delete the character in front of the
        cursor.
        When 'l' is included and it is used after an operator at the end of a
        line (not an empty line) then it will not move to the next line.  This
        makes "dl", "cl", "yl" etc. work normally.

*'wildchar'* *'wc'*
'wildchar' 'wc'         number  (Vim default: <Tab>, Vi default: CTRL-E)
                        global
        Character you have to type to start wildcard expansion in the
        command-line, as specified with 'wildmode'.
        More info here: |cmdline-completion|.
        The character is not recognized when used inside a macro.  See
        'wildcharm' for that.
        Some keys will not work, such as CTRL-C, <CR> and Enter.
        Although 'wc' is a number option, you can set it to a special key:
                :set wc=<Tab>


*'wildcharm'* *'wcm'*
'wildcharm' 'wcm'       number  (default: none (0))
                        global
        'wildcharm' works exactly like 'wildchar', except that it is
        recognized when used inside a macro.  You can find "spare" command-line
        keys suitable for this option by looking at |ex-edit-index|.  Normally
        you'll never actually type 'wildcharm', just use it in mappings that
        automatically invoke completion mode, e.g.:
                :set wcm=<C-Z>
                :cnoremap ss so $vim/sessions/*.vim<C-Z>
        Then after typing :ss you can use CTRL-P & CTRL-N.

*'wildignore'* *'wig'*
'wildignore' 'wig'      string  (default "")
                        global
        A list of file patterns.  A file that matches with one of these
        patterns is ignored when expanding |wildcards|, completing file or
        directory names, and influences the result of |expand()|, |glob()| and
        |globpath()| unless a flag is passed to disable this.
        The pattern is used like with |:autocmd|, see |autocmd-pattern|.
        Also see 'suffixes'.
        Example:
                :set wildignore=*.o,*.obj
        The use of |:set+=| and |:set-=| is preferred when adding or removing
        a pattern from the list.  This avoids problems when a future version
        uses another default.


*'wildignorecase'* *'wic'* *'nowildignorecase'* *'nowic'*
'wildignorecase' 'wic'  boolean (default off)
                        global
        When set case is ignored when completing file names and directories.
        Has no effect when 'fileignorecase' is set.
        Does not apply when the shell is used to expand wildcards, which
        happens when there are special characters.


*'wildmenu'* *'wmnu'* *'nowildmenu'* *'nowmnu'*
'wildmenu' 'wmnu'       boolean (default on)
                        global
        Enables "enhanced mode" of command-line completion. When user hits
        <Tab> (or 'wildchar') to invoke completion, the possible matches are
        shown in a menu just above the command-line (see 'wildoptions'), with
        the first match highlighted (overwriting the statusline).  Keys that
        show the previous/next match (<Tab>/CTRL-P/CTRL-N) highlight the
        match.
        'wildmode' must specify "full": "longest" and "list" do not start
        'wildmenu' mode. You can check the current mode with |wildmenumode()|.
        The menu is canceled when a key is hit that is not used for selecting
        a completion.

        While the menu is active these keys have special meanings:

        CTRL-Y          - accept the currently selected match and stop
                          completion.
        CTRL-E          - end completion, go back to what was there before
                          selecting a match.
        <Left> <Right>  - select previous/next match (like CTRL-P/CTRL-N)
        <Down>          - in filename/menu name completion: move into a
                          subdirectory or submenu.
        <CR>            - in menu completion, when the cursor is just after a
                          dot: move into a submenu.
        <Up>            - in filename/menu name completion: move up into
                          parent directory or parent menu.

        If you want <Left> and <Right> to move the cursor instead of selecting
        a different match, use this:
                :cnoremap <Left> <Space><BS><Left>
                :cnoremap <Right> <Space><BS><Right>

        |hl-WildMenu| highlights the current match.

*'wildmode'* *'wim'*
'wildmode' 'wim'        string  (default: "full")
                        global
        Completion mode that is used for the character specified with
        'wildchar'.  It is a comma separated list of up to four parts.  Each
        part specifies what to do for each consecutive use of 'wildchar'.  The
        first part specifies the behavior for the first use of 'wildchar',
        The second part for the second use, etc.

        Each part consists of a colon separated list consisting of the
        following possible values:
        ""              Complete only the first match.
        "full"          Complete the next full match.  After the last match,
                        the original string is used and then the first match
                        again.  Will also start 'wildmenu' if it is enabled.
        "longest"       Complete till longest common string.  If this doesn't
                        result in a longer string, use the next part.
        "list"          When more than one match, list all matches.
        "lastused"      When completing buffer names and more than one buffer
                        matches, sort buffers by time last used (other than
                        the current buffer).
        When there is only a single match, it is fully completed in all cases.

        Examples of useful colon-separated values:
        "longest:full"  Like "longest", but also start 'wildmenu' if it is
                        enabled.  Will not complete to the next full match.
        "list:full"     When more than one match, list all matches and
                        complete first match.
        "list:longest"  When more than one match, list all matches and
                        complete till longest common string.
        "list:lastused" When more than one buffer matches, list all matches
                        and sort buffers by time last used (other than the
                        current buffer).

        Examples:
                :set wildmode=full
        Complete first full match, next match, etc.  (the default)
                :set wildmode=longest,full
        Complete longest common string, then each full match
                :set wildmode=list:full
        List all matches and complete each full match
                :set wildmode=list,full
        List all matches without completing, then each full match
                :set wildmode=longest,list
        Complete longest common string, then list alternatives.
        More info here: |cmdline-completion|.

*'wildoptions'* *'wop'*
'wildoptions' 'wop'     string  (default "pum,tagfile")
                        global
        List of words that change how |cmdline-completion| is done.
          pum           Display the completion matches using the popupmenu
                        in the same style as the |ins-completion-menu|.
          tagfile       When using CTRL-D to list matching tags, the kind of
                        tag and the file of the tag is listed.  Only one match
                        is displayed per line.  Often used tag kinds are:
                                d       #define
                                f       function

*'winaltkeys'* *'wak'*
'winaltkeys' 'wak'      string  (default "menu")
                        global
                        {only used in Win32}
        Some GUI versions allow the access to menu entries by using the ALT
        key in combination with a character that appears underlined in the
        menu.  This conflicts with the use of the ALT key for mappings and
        entering special characters.  This option tells what to do:
          no    Don't use ALT keys for menus.  ALT key combinations can be
                mapped, but there is no automatic handling.
          yes   ALT key handling is done by the windowing system.  ALT key
                combinations cannot be mapped.
          menu  Using ALT in combination with a character that is a menu
                shortcut key, will be handled by the windowing system.  Other
                keys can be mapped.
        If the menu is disabled by excluding 'm' from 'guioptions', the ALT
        key is never used for the menu.
        This option is not used for <F10>; on Win32.

*'winblend'* *'winbl'*
'winblend' 'winbl'              number  (default 0)
                        local to window
        Enables pseudo-transparency for a floating window. Valid values are in
        the range of 0 for fully opaque window (disabled) to 100 for fully
        transparent background. Values between 0-30 are typically most useful.

        UI-dependent. Works best with RGB colors. 'termguicolors'

*'window'* *'wi'*
'window' 'wi'           number  (default screen height - 1)
                        global
        Window height used for |CTRL-F| and |CTRL-B| when there is only one
        window and the value is smaller than 'lines' minus one.  The screen
        will scroll 'window' minus two lines, with a minimum of one.
        When 'window' is equal to 'lines' minus one CTRL-F and CTRL-B scroll
        in a much smarter way, taking care of wrapping lines.
        When resizing the Vim window, the value is smaller than 1 or more than
        or equal to 'lines' it will be set to 'lines' minus 1.
        Do not confuse this with the height of the Vim window, use
        'lines' for that.

*'winheight'* *'wh'* *E591*
'winheight' 'wh'        number  (default 1)
                        global
        Minimal number of lines for the current window.  This is not a hard
        minimum, Vim will use fewer lines if there is not enough room.  If the
        focus goes to a window that is smaller, its size is increased, at the
        cost of the height of other windows.
        Set 'winheight' to a small number for normal editing.
        Set it to 999 to make the current window fill most of the screen.
        Other windows will be only 'winminheight' high.  This has the drawback
        that ":all" will create only two windows.  To avoid "vim -o 1 2 3 4"
        to create only two windows, set the option after startup is done,
        using the |VimEnter| event:
                au VimEnter * set winheight=999
        Minimum value is 1.
        The height is not adjusted after one of the commands that change the
        height of the current window.
        'winheight' applies to the current window.  Use 'winminheight' to set
        the minimal height for other windows.

*'winhighlight'* *'winhl'*
'winhighlight' 'winhl'  string (default empty)
                        local to window
        Window-local highlights.  Comma-delimited list of highlight
        |group-name| pairs "{hl-builtin}:{hl},..." where each {hl-builtin} is
        a built-in |highlight-groups| item to be overridden by {hl} group in
        the window.  Only built-in |highlight-groups| are supported, not
        syntax highlighting (use |:ownsyntax| for that).

        Highlights of vertical separators are determined by the window to the
        left of the separator.  The 'tabline' highlight of a tabpage is
        decided by the last-focused window of the tabpage.  Highlights of
        the popupmenu are determined by the current window.  Highlights in the
        message area cannot be overridden.

        Example: show a different color for non-current windows:
                set winhighlight=Normal:MyNormal,NormalNC:MyNormalNC

*'winfixheight'* *'wfh'* *'nowinfixheight'* *'nowfh'*
'winfixheight' 'wfh'    boolean (default off)
                        local to window
        Keep the window height when windows are opened or closed and
        'equalalways' is set.  Also for |CTRL-W_=|.  Set by default for the
        |preview-window| and |quickfix-window|.
        The height may be changed anyway when running out of room.

*'winfixwidth'* *'wfw'* *'nowinfixwidth'* *'nowfw'*
'winfixwidth' 'wfw'     boolean (default off)
                        local to window
        Keep the window width when windows are opened or closed and
        'equalalways' is set.  Also for |CTRL-W_=|.
        The width may be changed anyway when running out of room.

*'winminheight'* *'wmh'*
'winminheight' 'wmh'    number  (default 1)
                        global
        The minimal height of a window, when it's not the current window.
        This is a hard minimum, windows will never become smaller.
        When set to zero, windows may be "squashed" to zero lines (i.e. just a
        status bar) if necessary.  They will return to at least one line when
        they become active (since the cursor has to have somewhere to go.)
        Use 'winheight' to set the minimal height of the current window.
        This option is only checked when making a window smaller.  Don't use a
        large number, it will cause errors when opening more than a few
        windows.  A value of 0 to 3 is reasonable.

*'winminwidth'* *'wmw'*
'winminwidth' 'wmw'     number  (default 1)
                        global
        The minimal width of a window, when it's not the current window.
        This is a hard minimum, windows will never become smaller.
        When set to zero, windows may be "squashed" to zero columns (i.e. just
        a vertical separator) if necessary.  They will return to at least one
        line when they become active (since the cursor has to have somewhere
        to go.)
        Use 'winwidth' to set the minimal width of the current window.
        This option is only checked when making a window smaller.  Don't use a
        large number, it will cause errors when opening more than a few
        windows.  A value of 0 to 12 is reasonable.

*'winwidth'* *'wiw'* *E592*
'winwidth' 'wiw'        number  (default 20)
                        global
        Minimal number of columns for the current window.  This is not a hard
        minimum, Vim will use fewer columns if there is not enough room.  If
        the current window is smaller, its size is increased, at the cost of
        the width of other windows.  Set it to 999 to make the current window
        always fill the screen.  Set it to a small number for normal editing.
        The width is not adjusted after one of the commands to change the
        width of the current window.
        'winwidth' applies to the current window.  Use 'winminwidth' to set
        the minimal width for other windows.

*'wrap'* *'nowrap'*
'wrap'                  boolean (default on)
                        local to window

This option changes how text is displayed.
 It doesn't change the text in the buffer, see 'textwidth' for that.

When on,
        lines longer than the width of the window will wrap and
        displaying continues on the next line.

        See 'linebreak' to get the break at a word boundary.

When off,
        lines will not wrap  and
        only part of long lines will be displayed.
        When the cursor is  moved to a part that is not shown,
        the screen will scroll  horizontally.
        The line will be broken in the middle of a word if necessary.

        To make scrolling horizontally a bit more useful, try this:
                        :set sidescroll=5
                        :set listchars+=precedes:<,extends:>
                See 'sidescroll', 'listchars' and |wrap-off|.

        This option can't be set from a |modeline| when the 'diff' option is
        on.

*'wrapmargin'* *'wm'*
'wrapmargin' 'wm'       number  (default 0)
                                        local to buffer

This is Vi compatible.

When 'textwidth' is non-zero,
this option is not used.

/* 叫marginwitdh更好, 和textwidth对应 */

        Number of characters from the right window border where wrapping starts.
        When typing text beyond this limit,
        🔑an <EOL> will be inserted🔑  and
        inserting continues on the next line.

        Options that add a margin,
        such as 'number' and  'foldcolumn',
        cause the text width to be further reduced.
        See also 'formatoptions' and  |ins-textwidth|.


*'wrapscan'* *'ws'* *'nowrapscan'* *'nows'*
'wrapscan' 'ws'         boolean (default on)                    *E384* *E385*
                        global

Searches wrap around the end of the file.
 Also applies to |]s| and  |[s|,
searching for
spelling mistakes.

*'write'* *'nowrite'*
'write'                 boolean (default on)
                                global

        Allows writing files.  When not set, writing a file is not allowed.
        Can be used for a view-only mode, where modifications to the text are
        still allowed.  Can be reset with the |-m| or |-M| command line
        argument.  Filtering text is still possible, even though this requires
        writing a temporary file.

*'writeany'* *'wa'* *'nowriteany'* *'nowa'*
'writeany' 'wa'         boolean (default off)
                        global
        Allows writing to any file with no need for "!" override.

*'writebackup'* *'wb'* *'nowritebackup'* *'nowb'*
'writebackup' 'wb'      boolean (default on)
                        global
        Make a backup before overwriting a file.  The backup is removed after
        See |backup-table| for another explanation.
        When the 'backupskip' pattern matches, a backup is not made anyway.
        Depending on 'backupcopy' the backup is a new file or the original
        file renamed (and a new file is written).

*'writedelay'* *'wd'*
'writedelay' 'wd'       number  (default 0)
                        global
        The number of milliseconds to wait for each character sent to the
        screen.  When positive, characters are sent to the UI one by one.
        See 'redrawdebug' for more options.  For debugging purposes.

 vim:tw=78:ts=8:noet:ft=help:norl:
leo_DIY

