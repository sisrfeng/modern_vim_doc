ncsearch-forward)ncsearch-forward)*options.txt* Nvim


                  VIM REFERENCE MANUAL    by Bram Moolenaar


Options                                                 *options*

For an overview of options see quickref.txt |option-list|.

Vim has a number of internal variables and switches which can be set to
achieve special effects.  These options come in three forms:
        boolean         can only be on or off           *boolean* *toggle*
        number          has a numeric value
        string          has a string value

                                      Type |gO| to see the table of contents.

==============================================================================
1. Setting options                                      *set-option* *E764*

*:se* *:set*
:se[t]                  Show all options that differ from their default value.

:se[t] all              Show all options.

*E518* *E519*
:se[t] {option}?        Show value of {option}.

:se[t] {option}         Toggle option: set, switch it on.
                        Number option: show value.
                        String option: show value.

:se[t] no{option}       Toggle option: Reset, switch it off.

*:set-!* *:set-inv*
:se[t] {option}!   or
:se[t] inv{option}      Toggle option: Invert value.

*:set-default* *:set-&* *:set-&vi* *:set-&vim*
:se[t] {option}&        Reset option to its default value.
:se[t] {option}&vi      Reset option to its Vi default value.
:se[t] {option}&vim     Reset option to its Vim default value.

:se[t] all&             Set all options to their default value.  The values of
                        these options are not changed:
                          'columns'
                          'lines'
                        Warning: This may have a lot of side effects.

*:set-args* *E487* *E521*
:se[t] {option}={value}         or
:se[t] {option}:{value}
                        Set string or number option to {value}.
                        For numeric options the value can be given in decimal,
                        hex (preceded with 0x) or octal (preceded with '0').
                        The old value can be inserted by typing 'wildchar' (by
                        default this is a <Tab>).  See |cmdline-completion|.
                        White space between {option} and '=' is allowed and
                        will be ignored.  White space between '=' and {value}
                        is not allowed.
                        See |option-backslash| for using white space and
                        backslashes in {value}.

:se[t] {option}+={value}                                *:set+=*
                        Add the {value} to a number option, or append the
                        {value} to a string option.  When the option is a
                        comma separated list, a comma is added, unless the
                        value was empty.
                        If the option is a list of flags, superfluous flags
                        are removed.  When adding a flag that was already
                        present the option value doesn't change.
                        Also see |:set-args| above.

:se[t] {option}^={value}                                *:set^=*

    Multiply the {value} to a number option,
    or prepend  the {value} to a string option.
     When the option is a comma separated list,
    a comma is added,
    unless the value was empty.
    Also see |:set-args| above.

:se[t] {option}-={value}                                *:set-=*
                        Subtract the {value} from a number option, or remove
                        the {value} from a string option, if it is there.
                        If the {value} is not found in a string option, there
                        is no error or warning.  When the option is a comma
                        separated list, a comma is deleted, unless the option
                        becomes empty.
                        When the option is a list of flags, {value} must be
                        exactly as they appear in the option.  Remove flags
                        one by one to avoid problems.
                        Also see |:set-args| above.

The {option} arguments to ":set" may be repeated.  For example:
        :set ai nosi sw=3 ts=3
If you make an error in one of the arguments, an error message will be given
and the following arguments will be ignored.

*:set-verbose*
When 'verbose' is non-zero, displaying an option value will also tell where it
was last set.  Example:
        :verbose set shiftwidth cindent?
   shiftwidth=4
          Last set from modeline line 1
  cindent
          Last set from /usr/local/share/vim/vim60/ftplugin/c.vim line 30
This is only done when specific option values are requested, not for ":verbose
set all" or ":verbose set" without an argument.
When the option was set by hand there is no "Last set" message.
When the option was set while executing a function, user command or
autocommand, the script in which it was defined is reported.
A few special texts:
        Last set from modeline line 1
                Option was set in a |modeline|.
        Last set from --cmd argument
                Option was set with command line argument |--cmd| or +.
        Last set from -c argument
                Option was set with command line argument |-c|, +, |-S| or
                |-q|.
        Last set from environment variable
                Option was set from $VIMINIT.
        Last set from error handler
                Option was cleared when evaluating it resulted in an error.

*option-backslash*
To include white space in a string option value it has to be preceded with a
backslash.  To include a backslash you have to use two.  Effectively this
means that the number of backslashes in an option value is halved (rounded
down).
A few examples:
   :set tags=tags\ /usr/tags        results in "tags /usr/tags"
   :set tags=tags\\,file            results in "tags\,file"
   :set tags=tags\\\ file           results in "tags\ file"

The "|" character separates a ":set" command from a following command.  To
include the "|" in the option value, use "\|" instead.  This example sets the
'titlestring' option to "hi|there":
   :set titlestring=hi\|there
This sets the 'titlestring' option to "hi" and 'iconstring' to "there":
   :set titlestring=hi|set iconstring=there

Similarly, the double quote character starts a comment.  To include the '"' in
the option value, use '\"' instead.  This example sets the 'titlestring'
option to 'hi "there"':
   :set titlestring=hi\ \"there\"

For Win32 backslashes in file names are mostly not removed.  More precise: For
options that expect a file name (those where environment variables are
expanded) a backslash before a normal file name character is not removed.  But
a backslash before a special character (space, backslash, comma, etc.) is used
like explained above.
There is one special situation, when the value starts with "\\":
   :set dir=\\machine\path          results in "\\machine\path"
   :set dir=\\\\machine\\path       results in "\\machine\path"
   :set dir=\\path\\file            results in "\\path\file" (wrong!)
For the first one the start is kept, but for the second one the backslashes
are halved.  This makes sure it works both when you expect backslashes to be
halved and when you expect the backslashes to be kept.  The third gives a
result which is probably not what you want.  Avoid it.

*add-option-flags* *remove-option-flags*
*E539* *E550* *E551* *E552*
Some options are a list of flags.  When you want to add a flag to such an
option, without changing the existing ones, you can do it like this:
   :set guioptions+=a

Remove a flag from an option like this:
   :set guioptions-=a
This removes the 'a' flag from 'guioptions'.

you should add or remove one flag at a time.  If 'guioptions' has
the value "ab", using "set guioptions-=ba" won't work, because the string "ba"
doesn't appear.

*:set_env* *expand-env* *expand-environment-var*
Environment variables in specific string options will be expanded.  If the
environment variable exists the '$' and the following environment variable
name is replaced with its value.  If it does not exist the '$' and the name
are not modified.  Any non-id character (not a letter, digit or '_') may
follow the environment variable name.  That character and what follows is
appended to the value of the environment variable.  Examples:
   :set term=$TERM.new
   :set path=/usr/$INCLUDE,$HOME/include,.
When adding or removing a string from an option with ":set opt-=val" or ":set
opt+=val" the expansion is done before the adding or removing.


Handling of local options                       *local-options*

Some of the options only apply to a window or buffer.  Each window or buffer
has its own copy of this option, thus each can have its own value.  This
allows you to set 'list' in one window but not in another.  And set
'shiftwidth' to 3 in one buffer and 4 in another.

The following explains what happens to these local options in specific
situations.  You don't really need to know all of this, since Vim mostly uses
the option values you would expect.  Unfortunately, doing what the user
expects is a bit complicated...

When splitting a window, the local options are copied to the new window.  Thus
right after the split the contents of the two windows look the same.

When editing a new buffer, its local option values must be initialized.  Since
the local options of the current buffer might be specifically for that buffer,
these are not used.  Instead, for each buffer-local option there also is a
global value, which is used for new buffers.  With ":set" both the local and
global value is changed.  With "setlocal" only the local value is changed,
thus this value is not used when editing a new buffer.

When editing a buffer that has been edited before, the options from the window
that was last closed are used again.  If this buffer has been edited in this
window, the values from back then are used.  Otherwise the values from the
last closed window where the buffer was edited last are used.

It's possible to set a local window option specifically for a type of buffer.
When you edit another buffer in the same window, you don't want to keep
using these local window options.  Therefore Vim keeps a global value of the
local window options, which is used when editing another buffer.  Each window
has its own copy of these values.  Thus these are local to the window, but
global to all buffers in the window.  With this you can do:
        :e one
        :set list
        :e two
Now the 'list' option will also be set in "two", since with the ":set list"
command you have also set the global value.
        :set nolist
        :e one
        :setlocal list
        :e two
Now the 'list' option is not set, because ":set nolist" resets the global
value, ":setlocal list" only changes the local value and ":e two" gets the
global value.  if you do this next:
        :e one
You will get back the 'list' value as it was the last time you edited "one".
The options local to a window are remembered for each buffer.  This also
happens when the buffer is not loaded, but they are lost when the buffer is
wiped out |:bwipe|.

*:setl* *:setlocal*
:setl[ocal] ...         Like ":set" but set only the value local to the
                        current buffer or window.  Not all options have a
                        local value.  If the option does not have a local
                        value the global value is set.
                        With the "all" argument: display local values for all
                        local options.
                        Without argument: Display local values for all local
                        options which are different from the default.
                        When displaying a specific local option, show the
                        local value.  For a global/local boolean option, when
                        the global value is being used, "--" is displayed
                        before the option name.
                        For a global option the global value is
                        shown (but that might change in the future).

:setl[ocal] {option}<   Set the local value of {option} to its global value by
                        copying the value.

:se[t] {option}<        For |global-local| options: Remove the local value of
                        {option}, so that the global value will be used.

*:setg* *:setglobal*
:setg[lobal] ...        Like ":set" but set only the global value for a local
                        option without changing the local value.
                        When displaying an option, the global value is shown.
                        With the "all" argument: display global values for all
                        local options.
                        Without argument: display global values for all local
                        options which are different from the default.

For buffer-local and window-local options:
        Command          global value       local value
      :set option=value      set                set
 :setlocal option=value       -                 set
:setglobal option=value      set                 -
      :set option?            -                display
 :setlocal option?            -                display
:setglobal option?          display              -


Global options with a local value                       *global-local*

Options are global when you mostly use one value for all buffers and
windows.
For some global options it's useful to sometimes have a different local value.
You can set the local value with ":setlocal".
That buffer or
window will then use the local value,
while other buffers and
windows continue using the global value.

For example,
you have two windows,
both on C source code.
They use the global 'makeprg' option.
If you do this in one of the two windows:
        :set makeprg=gmake
then the other window will switch to the same value.
There is no need to set the 'makeprg' option in the other C source window too.
However,
if you start editing a Perl file in a new window,
you want to use another 'makeprg' for it,
without changing the value used for the C source files.
 You use this command:
        :setlocal makeprg=perlmake
You can switch back to using the global value by making the local value empty:
        :setlocal makeprg=
This only works for a string option.  For a number or boolean option you need
to use the "<" flag, like this:
        :setlocal autoread<
for non-boolean and non-number options using "<" copies the global
value to the local value, it doesn't switch back to using the global value
(that matters when the global value changes later).  You can also use:
        :set path<
This will make the local value of 'path' empty, so that the global value is
used.  Thus it does the same as:
        :setlocal path=
In the future more global options can be made global-local.  Using
":setlocal" on a global option might work differently then.


Setting the filetype

:setf[iletype] [FALLBACK] {filetype}                    *:setf* *:setfiletype*
        Set the 'filetype' option to {filetype}, but only if
        not done yet in a sequence of (nested) autocommands.
        This is short for:
                :if !did_filetype()
                :  setlocal filetype={filetype}
                :endif
        This command is used in a filetype.vim file to avoid
        setting the 'filetype' option twice, causing different
        settings and syntax files to be loaded.

        When the optional FALLBACK argument is present, a
        later :setfiletype command will override the
        'filetype'.  This is to be used for filetype
        detections that are just a guess.  |did_filetype()|
        will return false after this command.

*option-window* *optwin*
:bro[wse] se[t]                 *:set-browse* *:browse-set* *:opt* *:options*
:opt[ions]

    Open a window for viewing and  setting all options.
    Options are grouped by function.

    Offers short help for each option.
    For window and  buffer specific options,
        the last accessed window is used to set the option value in,
        unless this is a help window,
            in which case the window below help window is used (skipping the option-window).

*$HOME*
Using "~" is like using "$HOME", but it is only recognized at the start of an
option and after a space or comma.

On Unix systems "~user" can be used too.
 It is replaced by the home directory
of user "user".  Example:
    :set path=~mool/include,/usr/include,.

On Unix systems the form "${HOME}" can be used too.  The name between {} can
contain non-id characters then.  if you want to use this for the
"gf" command, you need to add the '{' and '}' characters to 'isfname'.

NOTE: expanding environment variables and "~/" is only done with the ":set"
command, not when assigning a value to an option with ":let".

*$HOME-windows*
On MS-Windows, if $HOME is not defined as an environment variable, then
at runtime Vim will set it to the expansion of $HOMEDRIVE$HOMEPATH.
If $HOMEDRIVE is not set then $USERPROFILE is used.

This expanded value is not exported to the environment, this matters when
running an external command:
        :echo system('set | findstr ^HOME=')
and
        :echo luaeval('os.getenv("HOME")')
should echo nothing (an empty string) despite exists('$HOME') being true.
When setting $HOME to a non-empty string it will be exported to the
subprocesses.


Note the maximum length of an expanded option is limited.  How much depends on
the system, mostly it is something like 256 or 1024 characters.

==============================================================================
2. Automatically setting options                        *auto-setting*

Besides changing options with the ":set" command,
there are three alternatives
to set options automatically for one or more files:

1. When starting Vim initializations are read from various places.
        See  |initialization|.
        Most of them are performed for all editing sessions,
   and some of them depend on the directory where Vim is started.
   You can create an initialization file with |:mkvimrc|, |:mkview| and  |:mksession|.

3. If you start editing a new file,
        and the 'modeline' option is on,
        a  number of lines at the beginning and  end of the file
        are checked for  modelines.

*modeline* *vim:* *vi:* *ex:* *E520*
There are two forms of modelines.
        The first form:
                        [text{white}]{vi:|vim:|ex:}[white]{options}

                [text{white}]           empty or any text followed by at least one blank
                                                                character (<Space> or <Tab>); "ex:" always requires at
                                                                least one blank character
                {vi:|vim:|ex:}          the string "vi:", "vim:" or "ex:"
                [white]                 optional white space
                {options}               a list of option settings, separated with white space
                                                                or ':', where each part between ':' is the argument
                                                                for a ":set" command (can be empty)

                Examples:
                   vi:noai:sw=3 ts=6
                   vim: tw=77

        The second form (this is compatible with some versions of Vi):

                                [text{white}]{vi:|vim:|Vim:|ex:}[white]se[t] {options}:[text]

                [text{white}]           empty or any text followed by at least one blank
                                                                character (<Space> or <Tab>); "ex:" always requires at
                                                                least one blank character
                {vi:|vim:|Vim:|ex:}     the string "vi:", "vim:", "Vim:" or "ex:"
                [white]                 optional white space
                se[t]                   the string "set " or "se " (note the space); When
                                                                "Vim" is used it must be "set".
                {options}               a list of options, separated with white space, which
                                                                is the argument for a ":set" command
                :                       a colon
                [text]                  any text or empty

                Examples:
                   /* vim: set ai tw=75: */
                   /* Vim: set ai tw=75: */

                        The white space before {vi:|vim:|Vim:|ex:} is required.
                        This minimizes the  chance that a normal word like "lex:" is caught.
                        There is one exception:
                        "vi:" and "vim:" can also be at the start of the line (for compatibility with
                                version 3.0).
                                Using "ex:" at the start of the line will be ignored (this  could be short for "example:").

        If the modeline is disabled within a modeline,
                subsequent modelines will be  ignored.
                This is to allow turning off modeline on a per-file basis.
                This is  useful when a line looks like a modeline but isn't.

                it would be  good to start a YAML file containing strings like "vim:" with
                                # vim: nomodeline
                so as to avoid modeline misdetection.
                        Following options on the same line  after 🔑modeline deactivation🔑,
                                 are still evaluated (but you would  normally not have any).

*modeline-local*
        The options are set like with ":setlocal":
        The new value only applies to the  buffer and  window that contain the file.
        Although it's possible to set global  options from a modeline,
        this is unusual.
        If you have two windows open and  the files in it set the same global option to a different value,
        the result  depends on which one was opened last.

        When editing a file that was already loaded,
                only the window-local options  from the modeline are used.
                Thus if you manually changed a buffer-local  option after opening the file,
                   it won't be changed if you edit the same buffer  in another window.
                        But window-local options will be set.

*modeline-version*
        If the modeline is only to be used for some versions of Vim,
        the version  number can be specified where "vim:" or "Vim:" is used:
                        vim{vers}:      version {vers} or later
                        vim<{vers}:     version before {vers}
                        vim={vers}:     version {vers}
                        vim>{vers}:     version after {vers}
        {vers} is 700 for Vim 7.0 (hundred times the major version plus minor).
        For example, to use a modeline only for Vim 7.0:
                        /* vim700: set foldmethod=marker */
        To use a modeline for Vim after version 7.2:
                        /* vim>702: set cole=2: */
        There can be no blanks between "vim" and the ":".
        The modeline is ignored if {vers} does not fit in an integer.


The number of lines that are checked can be set with the 'modelines' option.
        If 'modeline' is off or
        'modelines' is 0 no lines are checked.

for the first form all of the rest of the line is used,
thus a line  like:
   /* vi:ts=4: */
will give an error message for the trailing "*/".  This line is OK:
   /* vi:set ts=4: */

If an error is detected the rest of the line is skipped.

If you want to include a ':' in a set command precede it with a '\'.
The  backslash in front of the ':' will be removed.
Example:
   /* vi:set fillchars=stl\:^,vert\:\|: */
This sets the 'fillchars' option to "stl:^,vert:\|".
Only a single backslash  before the ':' is removed.
Thus to include "\:" you have to specify "\\:".

*E992*
        No other commands than "set" are supported,
        for security reasons (somebody  might create a Trojan horse text file with modelines).
        And not all options  can be set.
        For some options a flag is set,
        so that when the value is used
                the |sandbox| is effective.
        Some options can only be set from the modeline
                when 'modelineexpr' is set (the default is off).

Still, there is always a small risk that a modeline causes trouble.
        E.g.,
        when some joker sets 'textwidth' to 5 all your lines are wrapped unexpectedly.
        So disable modelines before editing untrusted text.
        The mail ftplugin does  this

Hint:
        If you would like to do something else than setting an option,
        you could  define an autocommand that checks the file for a specific string.
        For  example:
        au BufReadPost * if getline(1) =~ "VAR" | call SetVar() | endif
        And define a function SetVar() that does something with the line containing  "VAR".

==============================================================================
3. Options summary                                      *option-summary*

In the list below all the options are mentioned with their full name and with
an abbreviation if there is one.  Both forms may be used.

In this document when a boolean option is "set" that means that ":set option"
is entered.  When an option is "reset", ":set nooption" is used.

Most options are the same in all windows and buffers.  There are a few that
are specific to how the text is presented in a window.  These can be set to a
different value in each window.  For example the 'list' option can be set in
one window and reset in another for the same text, giving both types of view
at the same time.  There are a few options that are specific to a certain
file.  These can have a different value for each file or buffer.  For example
the 'textwidth' option can be 78 for a normal text file and 0 for a C
program.

        global                  one option for all buffers and windows
        local to window         each window has its own copy of this option
        local to buffer         each buffer has its own copy of this option

When creating a new window the option values from the currently active window
are used as a default value for the window-specific options.  For the
buffer-specific options this depends on the 's' and 'S' flags in the
'cpoptions' option.  If 's' is included (which is the default) the values for
buffer options are copied from the currently active buffer when a buffer is
first entered.  If 'S' is present the options are copied each time the buffer
is entered, this is almost like having global options.  If 's' and 'S' are not
present, the options are copied from the currently active buffer when the
buffer is created.

Hidden options                                          *hidden-options*

Not all options are supported in all versions.  This depends on the supported
features and sometimes on the system.  A remark about this is in curly braces
below.  When an option is not supported it may still be set without getting an
error, this is called a hidden option.  You can't get the value of a hidden
option though, it is not stored.

To test if option "foo" can be used with ":set" use something like this:
        if exists('&foo')
This also returns true for a hidden option.  To test if option "foo" is really
supported use something like this:
        if exists('+foo')

*E355*
A jump table for the options with a short description can be found at |Q_op|.

*'aleph'* *'al'* *aleph* *Aleph*
'aleph' 'al'            number  (default 224)
                        global
        The ASCII code for the first letter of the Hebrew alphabet.  The
        routine that maps the keyboard in Hebrew mode, both in Insert mode
        (when hkmap is set) and on the command-line (when hitting CTRL-_)
        outputs the Hebrew characters in the range [aleph..aleph+26].
        aleph=128 applies to PC code, and aleph=224 applies to ISO 8859-8.
        See |rileft.txt|.

*'allowrevins'* *'ari'* *'noallowrevins'* *'noari'*
'allowrevins' 'ari'     boolean (default off)
                        global
        Allow CTRL-_ in Insert and Command-line mode.  This is default off, to
        avoid that users that accidentally type CTRL-_ instead of SHIFT-_ get
        into reverse Insert mode, and don't know how to get out.  See
        'revins'.

*'ambiwidth'* *'ambw'*
'ambiwidth' 'ambw'      string (default: "single")
                        global
        Tells Vim what to do with characters with East Asian Width Class
        Ambiguous (such as Euro, Registered Sign, Copyright Sign, Greek
        letters, Cyrillic letters).

        There are currently two possible values:
        "single":       Use the same width as characters in US-ASCII.  This is
                        expected by most users.
        "double":       Use twice the width of ASCII characters.
*E834* *E835*
        The value "double" cannot be used if 'listchars' or 'fillchars'
        contains a character that would be double width.

        There are a number of CJK fonts for which the width of glyphs for
        those characters are solely based on how many octets they take in
        legacy/traditional CJK encodings.  In those encodings, Euro,
        Registered sign, Greek/Cyrillic letters are represented by two octets,
        therefore those fonts have "wide" glyphs for them.  This is also
        true of some line drawing characters used to make tables in text
        file.  Therefore, when a CJK font is used for GUI Vim or
        Vim is running inside a terminal (emulators) that uses a CJK font
        (or Vim is run inside an xterm invoked with "-cjkwidth" option.),
        this option should be set to "double" to match the width perceived
        by Vim with the width of glyphs in the font.  Perhaps it also has
        to be set to "double" under CJK MS-Windows when the system locale is
        set to one of CJK locales.  See Unicode Standard Annex #11
        (http://www.unicode.org/reports/tr11).

*'autochdir'* *'acd'* *'noautochdir'* *'noacd'*
'autochdir' 'acd'       boolean (default off)
                        global
        When on, Vim will change the current working directory whenever you
        open a file, switch buffers, delete a buffer or open/close a window.
        It will change to the directory containing the file which was opened
        or selected.
        When this option is on some plugins may not work.

*'arabic'* *'arab'* *'noarabic'* *'noarab'*
'arabic' 'arab'         boolean (default off)
                        local to window
        This option can be set to start editing Arabic text.
        Setting this option will:
        - Set the 'rightleft' option, unless 'termbidi' is set.
        - Set the 'arabicshape' option, unless 'termbidi' is set.
        - Set the 'keymap' option to "arabic"; in Insert mode CTRL-^ toggles
          between typing English and Arabic key mapping.
        - Set the 'delcombine' option

        Resetting this option will:
        - Reset the 'rightleft' option.
        - Disable the use of 'keymap' (without changing its value).
        'arabicshape' and 'delcombine' are not reset (it is a global
        option).
        Also see |arabic.txt|.

*'arabicshape'* *'arshape'*
*'noarabicshape'* *'noarshape'*
'arabicshape' 'arshape' boolean (default on)
                        global
        When on and 'termbidi' is off, the required visual character
        corrections that need to take place for displaying the Arabic language
        take effect.  Shaping, in essence, gets enabled; the term is a broad
        one which encompasses:
          a) the changing/morphing of characters based on their location
             within a word (initial, medial, final and stand-alone).
          b) the enabling of the ability to compose characters
          c) the enabling of the required combining of some characters
        When disabled the display shows each character's true stand-alone
        form.
        Arabic is a complex language which requires other settings, for
        further details see |arabic.txt|.

*'autoindent'* *'ai'* *'noautoindent'* *'noai'*
'autoindent' 'ai'       boolean (default on)
                        local to buffer
copy indent from current line when starting a new line (typing <cr> in insert mode or when using the "o" or "o" command).

if you do not type anything on the new line
        except <bs> or ctrl-d and then
        type <esc>,  ctrl-o or <cr>,

        the indent is deleted again.

moving the cursor to another line has the same effect,
unless the 'I' flag is included in 'cpoptions'.

When autoindent is on,
formatting (with the "gq" command or when you reach 'textwidth' in Insert mode) uses the `indentation of the first line`

When 'smartindent' or 'cindent' is on the indent is changed in a different way.

*'autoread'* *'ar'* *'noautoread'* *'noar'*
'autoread' 'ar'         boolean (default on)
                        global or local to buffer |global-local|
        When a file has been detected to have been changed outside of Vim and
        it has not been changed inside of Vim, automatically read it again.
        When the file has been deleted this is not done, so you have the text
        from before it was deleted.  When it appears again then it is read.
        |timestamp|
        If this option has a local value, use this command to switch back to
        using the global value:
                :set autoread<

*'autowrite'* *'aw'*
*'noautowrite'* *'noaw'*
    boolean (default off)
    global

    Write the contents of the file,
    if it has been modified  on each  of these commands:
         :next
	 :rewind
	 :last
	 :first
	 :previous
	 :stop
	 :suspend
	 :tag
	 :!
	  :make
	  CTRL-]
          CTRL-^

    and when one of these takes you to another file.
        :buffer
	 CTRL-O
	 CTRL-I
	 '{A-Z0-9}
	 `{A-Z0-9}

    for some commands
        the 'autowrite' option is not used, see  'autowriteall' for that.

    when 'buftype' is
            "nowrite",
            "nofile",
            "terminal"
            "prompt".
        buffers will not be written,

*'autowriteall'* *'awa'* *'noautowriteall'* *'noawa'*
'autowriteall' 'awa'    boolean (default off)
                        global
        Like 'autowrite', but also used for commands ":edit", ":enew", ":quit",
        ":qall", ":exit", ":xit", ":recover" and closing the Vim window.
        Setting this option also implies that Vim behaves like 'autowrite' has
        been set.

*'background'* *'bg'*
'background' 'bg'       string  (default "dark")
                        global
        When set to "dark" or "light",
        adjusts the default color groups for  that background type.
        The |TUI| or other UI sets this on startup
        (triggering |OptionSet|) if it can detect the background color.

        This option does NOT change the background color,
        it tells Nvim what the "inherited" (terminal/GUI) background looks like.
        See |:hi-normal| if you want to set the background color explicitly.
*g:colors_name*
        When a color scheme is loaded (the "g:colors_name" variable is set)
        setting 'background' will cause the color scheme to be reloaded.  If
        the color scheme adjusts to the value of 'background' this will work.
        However, if the color scheme sets 'background' itself the effect may
        be undone.  First delete the "g:colors_name" variable when needed.

        Normally this option would be set in the vimrc file.  Possibly
        depending on the terminal name.  Example:
                :if $TERM ==# "xterm"
                :  set background=dark
                :endif
        When this option is set, the default settings for the highlight groups
        will change.  To use other settings, place ":highlight" commands AFTER
        the setting of the 'background' option.
        This option is also used in the "$VIMRUNTIME/syntax/syntax.vim" file
        to select the colors for syntax highlighting.  After changing this
        option, you must load syntax.vim again to see the result.  This can be
        done with ":syntax on".

*'backspace'* *'bs'*
'backspace' 'bs'        string  (default "indent,eol,start")
                        global
        Influences the working of <BS>, <Del>, CTRL-W and CTRL-U in Insert
        mode.  This is a list of items, separated by commas.  Each item allows
        a way to backspace over something:
        value   effect
        indent  allow backspacing over autoindent
        eol     allow backspacing over line breaks (join lines)
        start   allow backspacing over the start of insert; CTRL-W and CTRL-U
                stop once at the start of insert.
        nostop  like start, except CTRL-W and CTRL-U do not stop at the start of
                insert.

        When the value is empty, Vi compatible backspacing is used.

        For backwards compatibility with version 5.4 and earlier:
        value   effect
          0     same as ":set backspace=" (Vi compatible)
          1     same as ":set backspace=indent,eol"
          2     same as ":set backspace=indent,eol,start"
          3     same as ":set backspace=indent,eol,nostop"

*'backup'* *'bk'* *'nobackup'* *'nobk'*
'backup' 'bk'           boolean (default off)
                        global
        Make a backup before overwriting a file.  Leave it around after the
        file has been successfully written.  If you do not want to keep the
        backup file, but you do want a backup while the file is being
        written, reset this option and set the 'writebackup' option (this is
        the default).  If you do not want a backup file at all reset both
        options (use this if your file system is almost full).  See the
        |backup-table| for more explanations.
        When the 'backupskip' pattern matches, a backup is not made anyway.
        When 'patchmode' is set, the backup may be renamed to become the
        oldest version of a file.

*'backupcopy'* *'bkc'*
'backupcopy' 'bkc'      string  (Vi default for Unix: "yes", otherwise: "auto")
                        global or local to buffer |global-local|
        When writing a file and a backup is made, this option tells how it's
        done.  This is a comma separated list of words.

        The main values are:
        "yes"   make a copy of the file and overwrite the original one
        "no"    rename the file and write a new one
        "auto"  one of the previous, what works best

        Extra values that can be combined with the ones above are:
        "breaksymlink"  always break symlinks when writing
        "breakhardlink" always break hardlinks when writing

        Making a copy and overwriting the original file:
        - Takes extra time to copy the file.
        + When the file has special attributes, is a (hard/symbolic) link or
          has a resource fork, all this is preserved.
        - When the file is a link the backup will have the name of the link,
          not of the real file.

        Renaming the file and writing a new one:
        + It's fast.
        - Sometimes not all attributes of the file can be copied to the new
          file.
        - When the file is a link the new file will not be a link.

        The "auto" value is the middle way: When Vim sees that renaming file
        is possible without side effects (the attributes can be passed on and
        the file is not a link) that is used.  When problems are expected, a
        copy will be made.

        The "breaksymlink" and "breakhardlink" values can be used in
        combination with any of "yes", "no" and "auto".  When included, they
        force Vim to always break either symbolic or hard links by doing
        exactly what the "no" option does, renaming the original file to
        become the backup and writing a new file in its place.  This can be
        useful for example in source trees where all the files are symbolic or
        hard links and any changes should stay in the local source tree, not
        be propagated back to the original source.
*crontab*
        One situation where "no" and "auto" will cause problems: A program
        that opens a file, invokes Vim to edit that file, and then tests if
        the open file was changed (through the file descriptor) will check the
        backup file instead of the newly created file.  "crontab -e" is an
        example.

        When a copy is made, the original file is truncated and then filled
        with the new text.  This means that protection bits, owner and
        symbolic links of the original file are unmodified.  The backup file
        however, is a new file, owned by the user who edited the file.  The
        group of the backup is set to the group of the original file.  If this
        fails, the protection bits for the group are made the same as for
        others.

        When the file is renamed this is the other way around: The backup has
        the same attributes of the original file, and the newly written file
        is owned by the current user.  When the file was a (hard/symbolic)
        link, the new file will not!  That's why the "auto" value doesn't
        rename when the file is a link.  The owner and group of the newly
        written file will be set to the same ones as the original file, but
        the system may refuse to do this.  In that case the "auto" value will
        again not rename the file.

*'backupdir'* *'bdir'*
'backupdir' 'bdir'      string  (default ".,$XDG_DATA_HOME/nvim/backup//")
                        global
        List of directories for the backup file, separated with commas.
        - The backup file will be created in the first directory in the list
          where this is possible.  If none of the directories exist Nvim will
          attempt to create the last directory in the list.
        - Empty means that no backup file will be created ('patchmode' is
          impossible!).  Writing may fail because of this.
        - A directory "." means to put the backup file in the same directory
          as the edited file.
        - A directory starting with "./" (or ".\" for MS-Windows) means to put
          the backup file relative to where the edited file is.  The leading
          "." is replaced with the path name of the edited file.
          ("." inside a directory name has no special meaning).
        - Spaces after the comma are ignored, other spaces are considered part
          of the directory name.  To have a space at the start of a directory
          name, precede it with a backslash.
        - To include a comma in a directory name precede it with a backslash.
        - A directory name may end in an '/'.
        - For Unix and Win32, if a directory ends in two path separators "//",
          the swap file name will be built from the complete path to the file
          with all path separators changed to percent '%' signs. This will
          ensure file name uniqueness in the backup directory.
          On Win32, it is also possible to end with "\\".  However, When a
          separating comma is following, you must use "//", since "\\" will
          include the comma in the file name. Therefore it is recommended to
          use '//', instead of '\\'.
        - Environment variables are expanded |:set_env|.
        - Careful with '\' characters, type one before a space, type two to
          get one in the option (see |option-backslash|), for example:
            :set bdir=c:\\tmp,\ dir\\,with\\,commas,\\\ dir\ with\ spaces
        - For backwards compatibility with Vim version 3.0 a '>' at the start
          of the option is removed.
        See also 'backup' and 'writebackup' options.
        If you want to hide your backup files on Unix, consider this value:
                :set backupdir=./.backup,~/.backup,.,/tmp
        You must create a ".backup" directory in each directory and in your
        home directory for this to work properly.
        The use of |:set+=| and |:set-=| is preferred when adding or removing
        directories from the list.  This avoids problems when a future version
        uses another default.
        This option cannot be set from a |modeline| or in the |sandbox|, for  security reasons.

*'backupext'* *'bex'* *E589*
'backupext' 'bex'       string  (default "~")
                        global
        String which is appended to a file name to make the name of the
        backup file.  The default is quite unusual, because this avoids
        accidentally overwriting existing files with a backup file.  You might
        prefer using ".bak", but make sure that you don't have files with
        ".bak" that you want to keep.
        Only normal file name characters can be used, "/\*?[|<>" are illegal.

        If you like to keep a lot of backups, you could use a BufWritePre
        autocommand to change 'backupext' just before writing the file to
        include a timestamp.
                :au BufWritePre * let &bex = '-' . strftime("%Y%b%d%X") . '~'
        Use 'backupdir' to put the backup in a different directory.

*'backupskip'* *'bsk'*
'backupskip' 'bsk'      string  (default: "$TMPDIR/*,$TMP/*,$TEMP/*"
                                 Unix: "/tmp/*,$TMPDIR/*,$TMP/*,$TEMP/*"
                                 Mac: "/private/tmp/*,$TMPDIR/*,$TMP/*,$TEMP/*")
                        global
        A list of file patterns.  When one of the patterns matches with the
        name of the file which is written, no backup file is created.  Both
        the specified file name and the full path name of the file are used.
        The pattern is used like with |:autocmd|, see |autocmd-pattern|.
        Watch out for special characters, see |option-backslash|.
        When $TMPDIR, $TMP or $TEMP is not defined, it is not used for the
        default value.  "/tmp/*" is only used for Unix.

        WARNING: Not having a backup file means that when Vim fails to write
        your buffer correctly and then, for whatever reason, Vim exits, you
        lose both the original file and what you were writing.  Only disable
        backups if you don't care about losing the file.

        environment variables are not expanded.  If you want to use
        $HOME you must expand it explicitly, e.g.:
                :let backupskip = escape(expand('$HOME'), '\') . '/tmp/*'

        the default also makes sure that "crontab -e" works (when a
        backup would be made by renaming the original file crontab won't see
        the newly created file).  Also see 'backupcopy' and |crontab|.

原本用于debug, 涉及GUI, 现在被popup window代替了?:
都是 Removed了的
    *'balloondelay'* *'bdlay'*

    *'ballooneval'* *'beval'* *'noballooneval'* *'nobeval'*

    *'balloonexpr'* *'bexpr'*
    'balloonexpr' 'bexpr'   Removed.

*'belloff'* *'bo'*
'belloff' 'bo'          string  (default "all")
                        global
        Specifies for which events the bell will not be rung. It is a comma
        separated list of items. For each item that is present, the bell
        will be silenced. This is most useful to specify specific events in
        insert mode to be silenced.

        item        meaning when present
        all         All events.
        backspace   When hitting <BS> or <Del> and deleting results in an
                    error.
        cursor      Fail to move around using the cursor keys or
                    <PageUp>/<PageDown> in |Insert-mode|.
        complete    Error occurred when using |i_CTRL-X_CTRL-K| or
                    |i_CTRL-X_CTRL-T|.
        copy        Cannot copy char from insert mode using |i_CTRL-Y| or
                    |i_CTRL-E|.
        ctrlg       Unknown Char after <C-G> in Insert mode.
        error       Other Error occurred (e.g. try to join last line)
                    (mostly used in |Normal-mode| or |Cmdline-mode|).
        esc         hitting <Esc> in |Normal-mode|.
        ex          In |Visual-mode|, hitting |Q| results in an error.
        hangul      Ignored.
        insertmode  Pressing <Esc> in 'insertmode'.
        lang        Calling the beep module for Lua/Mzscheme/TCL.
        mess        No output available for |g<|.
        showmatch   Error occurred for 'showmatch' function.
        operator    Empty region error |cpo-E|.
        register    Unknown register after <C-R> in |Insert-mode|.
        shell       Bell from shell output |:!|.
        spell       Error happened on spell suggest.
        wildmode    More matches in |cmdline-completion| available
                    (depends on the 'wildmode' setting).

        This is most useful to fine tune when in Insert mode the bell should
        be rung. For Normal mode and Ex commands, the bell is often rung to
        indicate that an error occurred. It can be silenced by adding the
        "error" keyword.

*'binary'* *'bin'* *'nobinary'* *'nobin'*
'binary' 'bin'          boolean (default off)
                        local to buffer
        This option should be set before editing a binary file.
        You can also  use the |-b| Vim argument.
        When this option is switched on
        a few options will be changed (also when it already was on):
            'textwidth'  will be set to 0
            'wrapmargin' will be set to 0
            'modeline'   will be off
            'expandtab'  will be off
            'fileformat' and 'fileformats' options will not be used,
                   the  file is read and  written like 'fileformat' was "unix" (a single <NL> separates lines).
            'fileencoding' and 'fileencodings' options will not be used,
                   the  file is read without conversion.

        When you start editing a(nother) file while the 'bin' option is  on,
            settings from autocommands may change the settings again (e.g.,  'textwidth'),
            causing trouble when editing.

        You might want to set  'bin' again when the file has been loaded.
        The previous values of these options are remembered and
        restored when  'bin' is switched from on to off.
        Each buffer has its own set of  saved option values.

        To edit a file with 'binary' on
            you can use the |++bin| argument.
            This avoids you have to do ":set bin", which would have effect for all  files you edit.

        When writing a file, 关于<EOL>
            if there is none <EOL> in last line
                if not 'binary':
                     Vim will appends an <EOL>
                if  'binary':
                     if  there was one <EOL> in the original file
                         Vim will appends an <EOL>
        'endofline'

*'bomb'* *'nobomb'*
'bomb'                  boolean (default off)
                        local to buffer
        When writing a file and the following conditions are met, a BOM (Byte
        Order Mark) is prepended to the file:
        - this option is on
        - the 'binary' option is off
        - 'fileencoding' is "utf-8", "ucs-2", "ucs-4" or one of the little/big
          endian variants.
        Some applications use the BOM to recognize the encoding of the file.
        Often used for UCS-2 files on MS-Windows.  For other applications it
        causes trouble, for example: "cat file1 file2" makes the BOM of file2
        appear halfway through the resulting file.  Gcc doesn't accept a BOM.
        When Vim reads a file and 'fileencodings' starts with "ucs-bom", a
        check for the presence of the BOM is done and 'bomb' set accordingly.
        Unless 'binary' is set, it is removed from the first line, so that you
        don't see it when editing.  When you don't change the options, the BOM
        will be restored when writing the file.

*'breakat'* *'brk'*
'breakat' 'brk'         string  (default " ^I!@*-+;:,./?")
                        global

This option lets you choose which characters might cause a line break if 'linebreak' is on.
 Only works for ASCII characters.

*'breakindent'* *'bri'*
'breakindent' 'bri'     boolean (default off)
                        local to window

Every wrapped line will continue visually indented (same amount of space as the beginning of that line),
thus preserving horizontal blocks of text.

*'breakindentopt'* *'briopt'*
'breakindentopt' 'briopt' string (default empty)
                        local to window

Settings for  'breakindent'.
It can consist of the following optional  items and must be separated by a comma:

        min:{n}
                Minimum text width that will be kept after applying 'breakindent',
                even if the resulting text should normally be narrower.
                This prevents text indented almost to the right window border
                occupying lot of vertical space when broken.

        shift:{n}
                After applying 'breakindent',
                the wrapped line's beginning will be shifted by the given number of characters
                Help emphasizing the line continuation (positive).

        sbr
                Display the 'showbreak' value before applying the additional indent.

        list:{n}    Adds an additional indent for lines that match a
                    numbered or bulleted list (using the
                    'formatlistpat' setting).
        list:-1     Uses the length of a match with 'formatlistpat'
                    for indentation.

        The default value for min is 20, shift and list is 0.

*'browsedir'* *'bsdir'*
'browsedir' 'bsdir'     string  (default: "last")
                        global
        Which directory to use for the file browser:
           last         Use same directory as with last file browser, where a
                        file was opened or saved.
           buffer       Use the directory of the related buffer.
           current      Use the current directory.
           {path}       Use the specified directory

*'bufhidden'* *'bh'*
'bufhidden' 'bh'        string (default: "")
                        local to buffer
        This option specifies what happens when a buffer is no longer
        displayed in a window:
          <empty>       follow the global 'hidden' option
          hide          hide the buffer (don't unload it), also when 'hidden'
                        is not set
          unload        unload the buffer, also when 'hidden' is set or using
                        |:hide|
          delete        delete the buffer from the buffer list, also when
                        'hidden' is set or using |:hide|, like using
                        |:bdelete|
          wipe          wipe out the buffer from the buffer list, also when
                        'hidden' is set or using |:hide|, like using
                        |:bwipeout|

        CAREFUL: when "unload", "delete" or "wipe" is used changes in a buffer
        are lost without a warning.  Also, these values may break autocommands
        that switch between buffers temporarily.
        This option is used together with 'buftype' and 'swapfile' to specify
        special kinds of buffers.   See |special-buffers|.

*'buflisted'* *'bl'* *'nobuflisted'* *'nobl'* *E85*

    default: on
    local to buffer

    'hidden'是global的

    if 'buflisted':
        the buffer shows up in the buffer list

    If 'nobuflisted'
        the buffer is not used for ":bnext", "ls",  the Buffers menu,  etc.
        Set by Vim for buffers that are only used to `remember a file name or  marks.` (options呢?)
        see |unlisted-buffer|

    Vim sets 'buflisted' when starting to edit a buffer.
        But not when using "|:buffer|".

*'buftype'* *'bt'* *E382*
'buftype' 'bt'          string (default: "")
    local to buffer
    The value of this option specifies the type of a buffer:
          <empty>       normal buffer
          acwrite       buffer will always be written with |BufWriteCmd|s
          help          help buffer (do not set this manually)
          nofile        buffer is not related to a file, will not be written
          nowrite       buffer will not be written
          quickfix      list of errors |:cwindow| or locations |:lwindow|
          terminal      |terminal-emulator| buffer
          prompt        buffer where only the last line can be edited, meant
                        to be used by a plugin, see |prompt-buffer|

        This option is used together with 'bufhidden' and 'swapfile' to specify special kinds of buffers.
            See |special-buffers|.
            Also see |win_gettype()|,
            which returns the type of the window.

            Be careful with changing this option,
            it can have many side effects!

            One such effect is that Vim will not check the timestamp of the file,
            if the file is changed by another program this will not be noticed.

        1. A "quickfix" buffer is only used for the error list and
            the location  list.

            This value is set by the |:cwindow| and |:lwindow| commands and
            you are not supposed to change it.

        2. "nofile" and "nowrite" buffers are similar:
            both:           The buffer is not to be written to disk, ":w" doesn't  work (":w filename" does work though).
            both:           The buffer is never considered to be |'modified'|.
                            There is no warning when the changes will be lost, for
                            example when you quit Vim.
            both:           A swap file is only created when using too much memory
                            (when 'swapfile' has been reset there is never a swap
                            file).
            nofile only:    The buffer name is fixed, it is not handled like a  file name.
                            It is not modified in response to a |:cd|  command.
            both:           When using ":e bufname" and already editing "bufname"
                            the buffer is made empty and autocommands are  triggered as usual for |:edit|.
    *E676*
         3. "acwrite" implies that the buffer name is not related to a file, like
            "nofile", but it will be written.  Thus, in contrast to "nofile" and
            "nowrite", ":w" does work and a modified buffer can't be abandoned
            without saving.  For writing there must be matching |BufWriteCmd|,
            |FileWriteCmd| or |FileAppendCmd| autocommands.

*'casemap'* *'cmp'*
'casemap' 'cmp'         string  (default: "internal,keepascii")
                        global
        Specifies details about changing the case of letters.  It may contain
        these words, separated by a comma:
        internal        Use internal case mapping functions, the current
                        locale does not change the case mapping. When
                        "internal" is omitted, the towupper() and towlower()
                        system library functions are used when available.
        keepascii       For the ASCII characters (0x00 to 0x7f) use the US
                        case mapping, the current locale is not effective.
                        This probably only matters for Turkish.

*'cdpath'* *'cd'* *E344* *E346*
'cdpath' 'cd'           string  (default: equivalent to $CDPATH or ",,")
                        global
        This is a list of directories which will be searched when using the
        |:cd|, |:tcd| and |:lcd| commands, provided that the directory being
        searched for has a relative path, not an absolute part starting with
        "/", "./" or "../", the 'cdpath' option is not used then.
        The 'cdpath' option's value has the same form and semantics as
        |'path'|.  Also see |file-searching|.
        The default value is taken from $CDPATH, with a "," prepended to look
        in the current directory first.
        If the default value taken from $CDPATH is not what you want, include
        a modified version of the following command in your vimrc file to
        override it:
          :let &cdpath = ',' . substitute(substitute($CDPATH, '[, ]', '\\\0', 'g'), ':', ',', 'g')
        This option cannot be set from a |modeline| or in the |sandbox|, for  security reasons.
        (parts of 'cdpath' can be passed to the shell to expand file names).

*'cedit'*
'cedit'                 string  (Vim default: CTRL-F, Vi default: "")
                        global
        The key used in Command-line Mode to open the command-line window.
        Only non-printable keys are allowed.
        The key can be specified as a single character, but it is difficult to
        type.  The preferred way is to use the <> notation.  Examples:
                :exe "set cedit=\<C-Y>"
                :exe "set cedit=\<Esc>"
        |Nvi| also has this option, but it only uses the first character.
        See |cmdwin|.

*'channel'*
'channel'               number (default: 0)
                        local to buffer
        |channel| connected to the buffer, or 0 if no channel is connected.
        In a |:terminal| buffer this is the terminal channel.
        Read-only.

*'charconvert'* *'ccv'* *E202* *E214* *E513*
'charconvert' 'ccv'     string (default "")
                        global
        An expression that is used for character encoding conversion.  It is
        evaluated when a file that is to be read or has been written has a
        different encoding from what is desired.
        'charconvert' is not used when the internal iconv() function is
        supported and is able to do the conversion.  Using iconv() is
        preferred, because it is much faster.
        'charconvert' is not used when reading stdin |--|, because there is no
        file to convert from.  You will have to save the text in a file first.
        The expression must return zero or an empty string for success,
        non-zero for failure.
        See |encoding-names| for possible encoding names.
        Additionally, names given in 'fileencodings' and 'fileencoding' are
        used.
        Conversion between "latin1", "unicode", "ucs-2", "ucs-4" and "utf-8"
        is done internally by Vim, 'charconvert' is not used for this.
        Also used for Unicode conversion.
        Example:
                set charconvert=CharConvert()
                fun CharConvert()
                  system("recode "
                        \ . v:charconvert_from . ".." . v:charconvert_to
                        \ . " <" . v:fname_in . " >" v:fname_out)
                  return v:shell_error
                endfun
        The related Vim variables are:
                v:charconvert_from      name of the current encoding
                v:charconvert_to        name of the desired encoding
                v:fname_in              name of the input file
                v:fname_out             name of the output file
        v:fname_in and v:fname_out will never be the same.
        This option cannot be set from a |modeline| or in the |sandbox|, for  security reasons.

*'cindent'* *'cin'* *'nocindent'* *'nocin'*
'cindent' 'cin'         boolean (default off)
                        local to buffer
        Enables automatic C program indenting.  See 'cinkeys' to set the keys
        that trigger reindenting in insert mode and 'cinoptions' to set your
        preferred indent style.
        If 'indentexpr' is not empty, it overrules 'cindent'.
        If 'lisp' is not on and both 'indentexpr' and 'equalprg' are empty,
        the "=" operator indents using this algorithm rather than calling an
        external program.
        See |C-indenting|.
        When you don't like the way 'cindent' works, try the 'smartindent'
        option or 'indentexpr'.

*'cinkeys'* *'cink'*
'cinkeys' 'cink'        string  (default "0{,0},0),0],:,0#,!^F,o,O,e")
                        local to buffer
        A list of keys that, when typed in Insert mode, cause reindenting of
        the current line.  Only used if 'cindent' is on and 'indentexpr' is
        empty.
        For the format of this option see |cinkeys-format|.
        See |C-indenting|.

*'cinoptions'* *'cino'*
'cinoptions' 'cino'     string  (default "")
                        local to buffer
        The 'cinoptions' affect the way 'cindent' reindents lines in a C
        program.  See |cinoptions-values| for the values of this option, and
        |C-indenting| for info on C indenting in general.


*'cinwords'* *'cinw'*
'cinwords' 'cinw'       string  (default "if,else,while,do,for,switch")
                        local to buffer
        These keywords start an extra indent in the next line when
        'smartindent' or 'cindent' is set.  For 'cindent' this is only done at
        an appropriate place (inside {}).
        'ignorecase' isn't used for 'cinwords'.  If case doesn't
        matter, include the keyword both the uppercase and lowercase:
        "if,If,IF".

*'clipboard'* *'cb'*
'clipboard' 'cb'        string  (default "")
                        global
        This option is a list of comma separated names.
        These names are recognized:

*clipboard-unnamed*
        unnamed         When included, Vim will use the clipboard register '*'
                        for all yank, delete, change and put operations which
                        would normally go to the unnamed register.  When a
                        register is explicitly specified, it will always be
                        used regardless of whether "unnamed" is in 'clipboard'
                        or not.  The clipboard register can always be
                        explicitly accessed using the "* notation.  Also see
                        |clipboard|.

*clipboard-unnamedplus*
        unnamedplus     A variant of the "unnamed" flag which uses the
                        clipboard register '+' (|quoteplus|) instead of
                        register '*' for all yank, delete, change and put
                        operations which would normally go to the unnamed
                        register.  When "unnamed" is also included to the
                        option, yank and delete operations (but not put)
                        will additionally copy the text into register
                        '*'. See |clipboard|.

*'cmdheight'* *'ch'*
'cmdheight' 'ch'        number  (default 1)
                        global
        Number of screen lines to use for the command-line.  Helps avoiding
        |hit-enter| prompts.
        The value of this option is stored with the tab page, so that each tab
        page can have a different value.

*'cmdwinheight'* *'cwh'*
'cmdwinheight' 'cwh'    number  (default 7)
                        global
        Number of screen lines to use for the command-line window. |cmdwin|

*'colorcolumn'* *'cc'*
'colorcolumn' 'cc'      string  (default "")
                        local to window
        'colorcolumn' is a comma separated list of screen columns that are
        highlighted with ColorColumn |hl-ColorColumn|.  Useful to align
        text.  Will make screen redrawing slower.
        The screen column can be an absolute number, or a number preceded with
        '+' or '-', which is added to or subtracted from 'textwidth'.

                :set cc=+1  " highlight column after 'textwidth'
                :set cc=+1,+2,+3  " highlight three columns after 'textwidth'
                :hi ColorColumn ctermbg=lightgrey guibg=lightgrey

        When 'textwidth' is zero then the items with '-' and '+' are not used.
        A maximum of 256 columns are highlighted.

*'columns'* *'co'* *E594*
'columns' 'co'          number  (default 80 or terminal width)
                        global
        Number of columns of the screen.  Normally this is set by the terminal
        initialization and does not have to be set by hand.
        When Vim is running in the GUI or in a resizable window, setting this
        option will cause the window size to be changed.  When you only want
        to use the size for the GUI, put the command in your |ginit.vim| file.
        When you set this option and Vim is unable to change the physical
        number of columns of the display, the display may be messed up.  For
        the GUI it is always possible and Vim limits the number of columns to
        what fits on the screen.  You can use this command to get the widest
        window possible:
                :set columns=9999
        Minimum value is 12, maximum value is 10000.

*'comments'* *'com'* *E524* *E525*
'comments' 'com'        string  (default
                                "s1:/*,mb:*,ex:*/,://,b:#,:%,:XCOMM,n:>,fb:-")
                        local to buffer
        A comma separated list of strings that can start a comment line.  See
        |format-comments|.  See |option-backslash| about using backslashes to
        insert a space.

*'commentstring'* *'cms'* *E537*
'commentstring' 'cms'   string  (default "/*%s*/")
                        local to buffer
        A template for a comment.  The "%s" in the value is replaced with the
        comment text.  Currently only used to add markers for folding, see
        |fold-marker|.
       其他用处:
       (只见到这个例子)
           https://github.com/tpope/vim-commentary里利用它了
               autocmd FileType apache setlocal commentstring=#\ %s
关于补全
    *'complete'* *'cpt'* *E535*
    'complete' 'cpt'        string  (default: ".,w,b,u,t")
                            local to buffer

    used for:

    1. whole-line completion |i_CTRL-X_CTRL-L|.
    2. when CTRL-P or  CTRL-N are used.
        This option specifies how keyword completion |ins-completion| works

        CTRL-N and  CTRL-P can be used to do any 'iskeyword'- based expansion
            (e.g.,
            dictionary |i_CTRL-X_CTRL-K|,
            included patterns |i_CTRL-X_CTRL-I|,
            tags |i_CTRL-X_CTRL-]|
            and normal expansions).


        It indicates the type of completion and the places to scan.
        It is a comma separated list of flags:

            .       scan the current buffer ('wrapscan' is ignored)
            w       scan buffers from other windows
            b       scan other loaded buffers that are in the buffer list
            u       scan the unloaded buffers that are in the buffer list
                        Unloaded buffers are not loaded,
                            thus their autocmds |:autocmd| are not executed,
                            this may lead to unexpected completions from some files (gzipped files for example).
                            Unloaded buffers are not scanned for whole-line completion.

            U       scan the buffers that are not in the buffer list

            k       scan the files given with the 'dictionary' option
            kspell  use the currently active spell checking |spell|
            k{dict} scan the file {dict}.  Several "k" flags can be given,  patterns are valid too.  For example:
                            :set cpt=k/usr/dict/*,k~/spanish
            s       scan the files given with the 'thesaurus' option
            s{tsr}  scan the file {tsr}.  Several "s" flags can be given, patterns  are valid too.

            i       scan current and included files
            d       scan current and included files for defined name or macro
                    |i_CTRL-X_CTRL-D|

            ]       tag completion
            t       same as "]"



    *'completefunc'* *'cfu'*
    'completefunc' 'cfu'    string  (default: empty)
                            local to buffer
            This option specifies a function to be used for Insert mode completion
            with CTRL-X CTRL-U. |i_CTRL-X_CTRL-U|
            See |complete-functions| for an explanation of how the function is
            invoked and what it should return.
            This option cannot be set from a |modeline| or in the |sandbox|, for  security reasons.

    *'completeslash'* *'csl'*
    'completeslash' 'csl'   string  (default: "")
                            local to buffer
                            {only for MS-Windows}
            When this option is set it overrules 'shellslash' for completion:
            - When this option is set to "slash", a forward slash is used for path
              completion in insert mode. This is useful when editing HTML tag, or
              Makefile with 'noshellslash' on MS-Windows.
            - When this option is set to "backslash", backslash is used. This is
              useful when editing a batch file with 'shellslash' set on MS-Windows.
            - When this option is empty, same character is used as for
              'shellslash'.
            For Insert mode completion the buffer-local value is used.  For
            command line completion the global value is used.

    *'completeopt'* *'cot'*
    'completeopt' 'cot'     string  (default: "menu,preview")
                            global
            A comma separated list of options for Insert mode completion
            |ins-completion|.  The supported values are:

               menu     Use a popup menu to show the possible completions.  The
                        menu is only shown when there is more than one match and
                        sufficient colors are available.  |ins-completion-menu|

               menuone  Use the popup menu also when there is only one match.
                        Useful when there is additional information about the
                        match, e.g., what file it comes from.

               longest  Only insert the longest common text of the matches.  If
                        the menu is displayed you can use CTRL-L to add more
                        characters.  Whether case is ignored depends on the kind
                        of completion.  For buffer text the 'ignorecase' option is
                        used.

               preview  Show extra information about the currently selected
                        completion in the preview window.  Only works in
                        combination with "menu" or "menuone".

              noinsert  Do not insert any text for a match until the user selects
                        a match from the menu. Only works in combination with
                        "menu" or "menuone". No effect if "longest" is present.

              noselect  Do not select a match in the menu, force the user to
                        select one from the menu. Only works in combination with
                        "menu" or "menuone".


*'concealcursor'*
'concealcursor' 'cocu'  string (default: "")
                        local to window
        Sets the modes in which text in the cursor line can also be concealed.
        When the current mode is listed then concealing happens just like in
        other lines.
          n             Normal mode
          v             Visual mode
          i             Insert mode
          c             Command line editing, for 'incsearch'

        'v' applies to all lines in the Visual area, not only the cursor.
            A useful value is "nc".
            This is used in help files.
            So long as you  are moving around text is concealed,
            but when starting to insert text
            or selecting a Visual area the concealed text is displayed,
            so that  you can see what you are doing.
        Keep in mind that the cursor position is not always where it's
        displayed.
        E.g.,
        when moving vertically it may change column.


*'conceallevel'* *'cole'*
'conceallevel' 'cole'   number (default 0)
                        local to window
        Determine how text with the "conceal" syntax attribute |:syn-conceal|
        is shown:

        Value           Effect
        0               Text is shown normally
        1               Each block of concealed text is replaced with one
                        character.  If the syntax item does not have a custom
                        replacement character defined (see |:syn-cchar|) the
                        character defined in 'listchars' is used.
                        It is highlighted with the "Conceal" highlight group.
        2               Concealed text is completely hidden unless it has a
                        custom replacement character defined (see
                        |:syn-cchar|).
        3               Concealed text is completely hidden.

        in the cursor line concealed text is not hidden, so that you can
        edit and copy the text.  This can be changed with the 'concealcursor'
        option.

*'confirm'* *'cf'* *'noconfirm'* *'nocf'*
'confirm' 'cf'          boolean (default off)
                        global
        When 'confirm' is on, certain operations that would normally
        fail because of unsaved changes to a buffer, e.g. ":q" and ":e",
        instead raise a dialog asking if you wish to save the current
        file(s).  You can still use a ! to unconditionally |abandon| a buffer.
        If 'confirm' is off you can still activate confirmation for one
        command only (this is most useful in mappings) with the |:confirm|
        command.
        Also see the |confirm()| function and the 'v' flag in 'guioptions'.

*'copyindent'* *'ci'* *'nocopyindent'* *'noci'*
'copyindent' 'ci'       boolean (default off)
                        local to buffer
        Copy the structure of the existing lines indent when autoindenting a
        new line.  Normally the new indent is reconstructed by a series of
        tabs followed by spaces as required (unless |'expandtab'| is enabled,
        in which case only spaces are used).  Enabling this option makes the
        new line copy whatever characters were used for indenting on the
        existing line.  'expandtab' has no effect on these characters, a Tab
        remains a Tab.  If the new indent is greater than on the existing
        line, the remaining space is filled in the normal manner.
        See 'preserveindent'.

vim里的这些option, nvim扔了:
    *'cp'*           *'nocp'*
    *'compatible'*  *'nocompatible'*
     (Nvim is always "nocompatible".)
    但有下面这个cpoptions:

*'cpoptions'* *'cpo'* *cpo*
'cpoptions' 'cpo'       string  (Vim default: "aABceFs_",
                        global

    A sequence of single character flags.
    A character is present:
        indicates 🔑Vi-compatible behavior🔑.

    'cpoptions' stands for cp_options,  "compatible-options".
    Commas can be added for readability.

    To avoid problems with flags that are added `in the future`,
    use the "+=" and
    "-=" feature of ":set" |add-option-flags|.

        contains    behavior

            a       When included, a ":read" command with a file name
                    argument will set the alternate file name for the
                    current window.

            A       When included, a ":write" command with a file name
                    argument will set the alternate file name for the
                    current window.

            b       bar
                    "\|" in a ":map" command is recognized as the end of  the map command.
                    The '\' is included in the mapping,
                    the text after the '|' is interpreted as the next  command.
                    Use a CTRL-V instead of a backslash to  include the '|' in the mapping.
                    Applies to all
                        mapping,
                        abbreviation,
                        menu
                        autocmd commands.
                    See also |map_bar|.

            B      Backslash
                    ":map X \<Esc>" results in X being mapped to:
                            'B' included:   `\^[ `   (^[ is a real <Esc>)
                            'B' excluded:   `<Esc>`  (5 characters)

                    :imap <C-l> \<Home>
                            'B' included:    insert `\`, then go to the beginning of the line
                            'B' excluded:   get six characters `<Home>`

                    'B' Make Backslash 不再用作escape  in
                            mappings,
                            abbreviations,
                            user commands,
                            the "to" part of the  menu commands.



            c       With 'c'
                    "abababababab" only gets three matches when repeating
                    "/abab", without 'c' there are five matches.

        Searching continues at the end of any match at the
                    cursor position, but not further than the start of the  next line.
                    When not present
                    searching continues  one character from the cursor position.


            C       Do not concatenate sourced lines that start with a
                    backslash.  See |line-continuation|.

            d       Using "./" in the 'tags' option doesn't mean to use
                    the tags file relative to the current file, but the
                    tags file in the current directory.

            D       Can't use CTRL-K to enter a digraph after Normal mode
                    commands with a character argument, like |r|, |f| and
                    |t|.

            e       When executing a register with ":@r", always add a
                    <CR> to the last line, also when the register is not
                    linewise.  If this flag is not present, the register
                    is not linewise and the last line does not end in a
                    <CR>, then the last line is put on the command-line
                    and can be edited before hitting <CR>.

            E       It is an error when using "y", "d", "c", "g~", "gu" or
                    "gU" on an Empty region.  The operators only work when
                    at least one character is to be operated on.  Example:
                    This makes "y0" fail in the first column.

            f       When included, a ":read" command with a file name
                    argument will set the file name for the current buffer,
                    if the current buffer doesn't have a file name yet.


                    if the current buffer doesn't have a file name  yet,
                    a ":write" command with a file name  argument will
                    set the file name for the current  buffer,
                    Also see |cpo-P|.

            i       When included, interrupting the reading of a file will
                    leave it modified.

            I       When moving the cursor up or down just after inserting
                    indent for 'autoindent', do not delete the indent.

            J       A |sentence| has to be followed by two spaces after
                    the '.', '!' or '?'.  A <Tab> is not recognized as
                    white space.

            K       Don't wait for a key code to complete when it is
                    halfway through a mapping.  This breaks mapping
                    <F1><F1> when only part of the second <F1> has been
                    read.  It enables cancelling the mapping by typing
                    <F1><Esc>.

            l       Backslash in a [] range in a search pattern is taken
                    literally, only "\]", "\^", "\-" and "\\" are special.
                    See |/[]|
                       'l' included: "/[ \t]"  finds <Space>, '\' and 't'
                       'l' excluded: "/[ \t]"  finds <Space> and <Tab>

            L       When the 'list' option is set, 'wrapmargin',
                    'textwidth', 'softtabstop' and Virtual Replace mode
                    (see |gR|) count a <Tab> as two characters, instead of
                    the normal behavior of a <Tab>.

            m       When included, a showmatch will always wait half a
                    second.  When not included, a showmatch will wait half
                    a second or until a character is typed.  |'showmatch'|

            M       When excluded, "%" matching will take backslashes into
                    account.  Thus in "( \( )" and "\( ( \)" the outer
                    parenthesis match.
                    When included
                        "%" ignores  backslashes, which is Vi compatible.

            n       When included, the column used for 'number' and
                    'relativenumber' will also be used for text of wrapped
                    lines.

            o       Line offset to search command is not remembered for
                    next search.

            O       Don't complain if a file is being overwritten, even
                    when it didn't exist when editing it.  This is a
                    protection against a file unexpectedly created by
                    someone else.  Vi didn't complain about this.

            p       Vi compatible Lisp indenting.  When not present, a
                    slightly better algorithm is used.

            P       When included, a ":write" command that appends to a
                    file will set the file name for the current buffer, if
                    the current buffer doesn't have a file name yet and
                    the 'F' flag is also included |cpo-F|.

            q       When joining multiple lines leave the cursor at the
                    position where it would be when joining two lines.

            r       Redo ("." command) uses "/" to repeat a search
                    command, instead of the actually used search string.

            R       Remove marks from filtered lines.  Without this flag
                    marks are kept like |:keepmarks| was used.

            s       Set buffer options when entering the buffer for the
                    first time.  This is like it is in Vim version 3.0.
                    And it is the default.  If not present the options are
                    set when the buffer is created.

            S       Set buffer options always when entering a buffer
                    (except 'readonly', 'fileformat', 'filetype' and
                    'syntax').  This is the (most) Vi compatible setting.
                    The options are set to the values in the current
                    buffer.  When you change an option and go to another
                    buffer, the value is copied.  Effectively makes the
                    buffer options global to all buffers.

                    's'    'S'     copy buffer options
                    no     no      when buffer created
                    yes    no      when buffer first entered (default)
                     X     yes     each time when buffer entered (vi comp.)

            t       Search pattern for the tag command is remembered for
                    "n" command.  Otherwise Vim only puts the pattern in
                    the history for search pattern, but doesn't change the
                    last used search pattern.

            u       Undo is Vi compatible.  See |undo-two-ways|.

            v       Backspaced characters remain visible on the screen in
                    Insert mode.  Without this flag the characters are
                    erased from the screen right away.  With this flag the
                    screen newly typed text overwrites backspaced
                    characters.

            W       Don't overwrite a readonly file.  When omitted, ":w!"
                    overwrites a readonly file, if possible.

            x       <Esc> on the command-line executes the command-line.
                    The default in Vim is to abandon the command-line,
                    because <Esc> normally aborts a command.  |c_<Esc>|

            X       When using a count with "R" the replaced text is
                    deleted only once.  Also when repeating "R" with "."
                    and a count.

            y       A yank command can be redone with ".".  Think twice if
                    you really want to use this, it may break some
                    plugins, since most people expect "." to only repeat a
                    change.

            Z       When using "w!" while the 'readonly' option is set,
                    don't reset 'readonly'.

            !       When redoing a filter command, use the last used
                    external command, whatever it was.  Otherwise the last
                    used -filter- command is used.

            $       When making a change to one line, don't redisplay the
                    line, but put a '$' at the end of the changed text.
                    The changed text will be overwritten when you type the
                    new text.  The line is redisplayed if you type any
                    command that moves the cursor from the insertion
                    point.

            %       Vi-compatible matching is done for the "%" command.
                    Does not recognize "#if", "#endif", etc.
                    Does not recognize "/*" and "*/".
                    Parens inside single and double quotes are also
                    counted, causing a string that contains a paren to
                    disturb the matching.  For example, in a line like
                    "if (strcmp("foo(", s))" the first paren does not
                    match the last one.  When this flag is not included,
                    parens inside single and double quotes are treated
                    specially.  When matching a paren outside of quotes,
                    everything inside quotes is ignored.  When matching a
                    paren inside quotes, it will find the matching one (if
                    there is one).  This works very well for C programs.
                    This flag is also used for other features, such as
                    C-indenting.

            +       When included, a ":write file" command will reset the
                    'modified' flag of the buffer, even though the buffer
                    itself may still be different from its file.

            >       When appending to a register, put a line break before
                    the appended text.

            ;       When using |,| or |;| to repeat the last |t| search
                    and the cursor is right in front of the searched
                    character, the cursor won't move. When not included,
                    the cursor would skip over it and jump to the
                    following occurrence.

            _       When using |cw| on a word, do not include the
                    whitespace following the word in the motion.

*'cscopepathcomp'* *'cspc'*
'cscopepathcomp' 'cspc' number  (default 0)
                        global
        Determines how many components of the path to show in a list of tags.
        See |cscopepathcomp|.

*'cscopeprg'* *'csprg'*
'cscopeprg' 'csprg'     string  (default "cscope")
                        global
        Specifies the command to execute cscope.  See |cscopeprg|.
        This option cannot be set from a |modeline| or in the |sandbox|, for  security reasons.

*'cscopequickfix'* *'csqf'*
'cscopequickfix' 'csqf' string  (default "")
                        global
        Specifies whether to use quickfix window to show cscope results.
        See |cscopequickfix|.

*'cscoperelative'* *'csre'* *'nocscoperelative'* *'nocsre'*
'cscoperelative' 'csre' boolean (default off)
                        global
        In the absence of a prefix (-P) for cscope. setting this option enables
        to use the basename of cscope.out path as the prefix.
        See |cscoperelative|.

*'cscopetag'* *'cst'* *'nocscopetag'* *'nocst'*
'cscopetag' 'cst'       boolean (default off)
                        global
        Use cscope for tag commands.  See |cscope-options|.

*'cscopetagorder'* *'csto'*
'cscopetagorder' 'csto' number  (default 0)
                        global
        Determines the order in which ":cstag" performs a search.  See
        |cscopetagorder|.

*'cursorbind'* *'crb'* *'nocursorbind'* *'nocrb'*
'cursorbind' 'crb'      boolean  (default off)
                        local to window
        When this option is set, as the cursor in the current
        window moves other cursorbound windows (windows that also have
        this option set) move their cursors to the corresponding line and
        column.  This option is useful for viewing the
        differences between two versions of a file (see 'diff'); in diff mode,
        inserted and deleted lines (though not characters within a line) are
        taken into account.


*'cursorcolumn'* *'cuc'* *'nocursorcolumn'* *'nocuc'*
'cursorcolumn' 'cuc'    boolean (default off)
                        local to window
        Highlight the screen column of the cursor with CursorColumn
        |hl-CursorColumn|.  Useful to align text.  Will make screen redrawing
        slower.
        If you only want the highlighting in the current window you can use
        these autocommands:
                au WinLeave * set nocursorline nocursorcolumn
                au WinEnter * set cursorline cursorcolumn


*'cursorline'* *'cul'* *'nocursorline'* *'nocul'*
'cursorline' 'cul'      boolean (default off)
                        local to window
        Highlight the text line of the cursor with CursorLine |hl-CursorLine|.
        Useful to easily spot the cursor.  Will make screen redrawing slower.
        When Visual mode is active the highlighting isn't used to make it
        easier to see the selected text.


*'cursorlineopt'* *'culopt'*
'cursorlineopt' 'culopt' string (default: "number,line")
                        local to window
        Comma separated list of settings for how 'cursorline' is displayed.
        Valid values:
        "line"          Highlight the text line of the cursor with
                        CursorLine |hl-CursorLine|.
        "screenline"    Highlight only the screen line of the cursor with
                        CursorLine |hl-CursorLine|.
        "number"        Highlight the line number of the cursor with
                        CursorLineNr |hl-CursorLineNr|.

        Special value:
        "both"          Alias for the values "line,number".

        "line" and "screenline" cannot be used together.


*'debug'*
'debug'                 string  (default "")
                        global
        These values can be used:
        msg     Error messages that would otherwise be omitted will be given
                anyway.
        throw   Error messages that would otherwise be omitted will be given
                anyway and also throw an exception and set |v:errmsg|.
        beep    A message will be given when otherwise only a beep would be
                produced.
        The values can be combined, separated by a comma.
        "msg" and "throw" are useful for debugging 'foldexpr', 'formatexpr' or
        'indentexpr'.

*'define'* *'def'*
'define' 'def'          string  (default "^\s*#\s*define")
                        global or local to buffer |global-local|
        Pattern to be used to find a macro definition.  It is a search
        pattern, just like for the "/" command.  This option is used for the
        commands like "[i" and "[d" |include-search|.  The 'isident' option is
        used to recognize the defined name after the match:
                {match with 'define'}{non-ID chars}{defined name}{non-ID char}
        See |option-backslash| about inserting backslashes to include a space
        or backslash.
        The default value is for C programs.  For C++ this value would be
        useful, to include const type declarations:
                ^\(#\s*define\|[a-z]*\s*const\s*[a-z]*\)
        You can also use "\ze" just before the name and continue the pattern
        to check what is following.  E.g. for Javascript, if a function is
        defined with "func_name = function(args)":
                ^\s*\ze\i\+\s*=\s*function(
        If the function is defined with "func_name : function() {...":
                ^\s*\ze\i\+\s*[:]\s*(*function\s*(
        When using the ":set" command, you need to double the backslashes!
        To avoid that use `:let` with a single quote string:
                let &l:define = '^\s*\ze\k\+\s*=\s*function('


*'delcombine'* *'deco'* *'nodelcombine'* *'nodeco'*
'delcombine' 'deco'     boolean (default off)
                        global
        If editing Unicode and this option is set, backspace and Normal mode
        "x" delete each combining character on its own.  When it is off (the
        default) the character along with its combining characters are
        deleted.
        When 'delcombine' is set "xx" may work differently from "2x"!

        This is useful for Arabic, Hebrew and many other languages where one
        may have combining characters overtop of base characters, and want
        to remove only the combining ones.

*'dictionary'* *'dict'*
'dictionary' 'dict'     string  (default "")
                        global or local to buffer |global-local|

    List of file names,  separated by commas,
        that are used to lookup words for keyword completion commands |i_CTRL-X_CTRL-K|.

        Each file should contain a list of words.
        This can be one word per line,  or several words per line,
        separated by non-keyword characters (white space is preferred).
        Maximum line length is 510 bytes.
        Where to find a list of words?
            Try "apt install spell" to get the "/usr/share/dict/words" file

     When this option is empty or
                         an entry "spell" is present,  and spell  checking is enabled,
         words in the word lists for the currently active  'spelllang' are used. See |spell|.

    Backticks cannot be used in this option for security reasons.

    when adding or  removing directories from the list.
        The use of |:set+=| and |:set-=| is preferred
        This avoids problems when a future version uses another default.

    In a file name:
        To include a comma
            precede it with a backslash.
        Spaces:
            after a comma
                are ignored,
            otherwise
                are included in the file name.

        See |option-backslash| about using backslashes.

        This has nothing to do with the |Dictionary| variable type.



*'diff'* *'nodiff'*
'diff'                  boolean (default off)
                        local to window
        Join the current window in the group of windows that shows differences
        between files.  See |diff-mode|.

*'dex'* *'diffexpr'*
'diffexpr' 'dex'        string  (default "")
                        global
        Expression which is evaluated to obtain a diff file (either ed-style
        or unified-style) from two versions of a file.  See |diff-diffexpr|.
        This option cannot be set from a |modeline| or in the |sandbox|, for  security reasons.

*'dip'* *'diffopt'*
'diffopt' 'dip'         string  (default "internal,filler,closeoff")
                        global
        Option settings for diff mode.  It can consist of the following items.
        All are optional.  Items must be separated by a comma.

                filler          Show filler lines, to keep the text
                                synchronized with a window that has inserted
                                lines at the same position.  Mostly useful
                                when windows are side-by-side and 'scrollbind'
                                is set.

                context:{n}     Use a context of {n} lines between a change
                                and a fold that contains unchanged lines.
                                When omitted a context of six lines is used.
                                When using zero the context is actually one,
                                since folds require a line in between, also
                                for a deleted line.
                                See |fold-diff|.

                iblank          Ignore changes where lines are all blank.  Adds
                                the "-B" flag to the "diff" command if
                                'diffexpr' is empty.  Check the documentation
                                of the "diff" command for what this does
                                exactly.
                                NOTE: the diff windows will get out of sync,
                                because no differences between blank lines are
                                taken into account.

                icase           Ignore changes in case of text.  "a" and "A"
                                are considered the same.  Adds the "-i" flag
                                to the "diff" command if 'diffexpr' is empty.

                iwhite          Ignore changes in amount of white space.  Adds
                                the "-b" flag to the "diff" command if
                                'diffexpr' is empty.  Check the documentation
                                of the "diff" command for what this does
                                exactly.  It should ignore adding trailing
                                white space, but not leading white space.

                iwhiteall       Ignore all white space changes.  Adds
                                the "-w" flag to the "diff" command if
                                'diffexpr' is empty.  Check the documentation
                                of the "diff" command for what this does
                                exactly.

                iwhiteeol       Ignore white space changes at end of line.
                                Adds the "-Z" flag to the "diff" command if
                                'diffexpr' is empty.  Check the documentation
                                of the "diff" command for what this does
                                exactly.

                horizontal      Start diff mode with horizontal splits (unless
                                explicitly specified otherwise).

                vertical        Start diff mode with vertical splits (unless
                                explicitly specified otherwise).

                closeoff        When a window is closed where 'diff' is set
                                and there is only one window remaining in the
                                same tab page with 'diff' set, execute
                                `:diffoff` in that window.  This undoes a
                                `:diffsplit` command.

                hiddenoff       Do not use diff mode for a buffer when it
                                becomes hidden.

                foldcolumn:{n}  Set the 'foldcolumn' option to {n} when
                                starting diff mode.  Without this 2 is used.

                followwrap      Follow the 'wrap' option and leave as it is.

                internal        Use the internal diff library.  This is
                                ignored when 'diffexpr' is set.  *E960*
                                When running out of memory when writing a
                                buffer this item will be ignored for diffs
                                involving that buffer.  Set the 'verbose'
                                option to see when this happens.

                indent-heuristic
                                Use the indent heuristic for the internal
                                diff library.

                algorithm:{text} Use the specified diff algorithm with the
                                internal diff engine. Currently supported
                                algorithms are:
                                myers      the default algorithm
                                minimal    spend extra time to generate the
                                           smallest possible diff
                                patience   patience diff algorithm
                                histogram  histogram diff algorithm

        Examples:
                :set diffopt=internal,filler,context:4
                :set diffopt=
                :set diffopt=internal,filler,foldcolumn:3
                :set diffopt-=internal  " do NOT use the internal diff parser

*'digraph'* *'dg'* *'nodigraph'* *'nodg'*
'digraph' 'dg'          boolean (default off)
                        global
        Enable the entering of digraphs in Insert mode with {char1} <BS>
        {char2}.  See |digraphs|.

*'directory'* *'dir'*
'directory' 'dir'       string  (default "$XDG_DATA_HOME/nvim/swap//")
                        global
        List of directory names for the swap file, separated with commas.

        Possible items:
        - The swap file will be created in the first directory where this is
          possible.  If it is not possible in any directory, but last
          directory listed in the option does not exist, it is created.
        - Empty means that no swap file will be used (recovery is
          impossible!) and no |E303| error will be given.
        - A directory "." means to put the swap file in the same directory as
          the edited file.  On Unix, a dot is prepended to the file name, so
          it doesn't show in a directory listing.  On MS-Windows the "hidden"
          attribute is set and a dot prepended if possible.
        - A directory starting with "./" (or ".\" for MS-Windows) means to put
          the swap file relative to where the edited file is.  The leading "."
          is replaced with the path name of the edited file.
        - For Unix and Win32, if a directory ends in two path separators "//",
          the swap file name will be built from the complete path to the file
          with all path separators replaced by percent '%' signs (including
          the colon following the drive letter on Win32). This will ensure
          file name uniqueness in the preserve directory.
          On Win32, it is also possible to end with "\\".  However, When a
          separating comma is following, you must use "//", since "\\" will
          include the comma in the file name. Therefore it is recommended to
          use '//', instead of '\\'.
        - Spaces after the comma are ignored, other spaces are considered part
          of the directory name.  To have a space at the start of a directory
          name, precede it with a backslash.
        - To include a comma in a directory name precede it with a backslash.
        - A directory name may end in an ':' or '/'.
        - Environment variables are expanded |:set_env|.
        - Careful with '\' characters, type one before a space, type two to
          get one in the option (see |option-backslash|), for example:
            :set dir=c:\\tmp,\ dir\\,with\\,commas,\\\ dir\ with\ spaces
        - For backwards compatibility with Vim version 3.0 a '>' at the start
          of the option is removed.
        Using "." first in the list is recommended.  This means that editing
        the same file twice will result in a warning.  Using "/tmp" on Unix is
        discouraged: When the system crashes you lose the swap file.
        "/var/tmp" is often not cleared when rebooting, thus is a better
        choice than "/tmp".  But others on the computer may be able to see the
        files, and it can contain a lot of files, your swap files get lost in
        the crowd.  That is why a "tmp" directory in your home directory is
        tried first.
        The use of |:set+=| and |:set-=| is preferred when adding or removing
        directories from the list.  This avoids problems when a future version
        uses another default.
        This option cannot be set from a |modeline| or in the |sandbox|, for  security reasons.

*'display'* *'dy'*
'display' 'dy'          string  (default "lastline,msgsep", Vi default: "")
                        global
        Change the way text is displayed.  This is comma separated list of
        flags:
        lastline        When included, as much as possible of the last line
                        in a window will be displayed.  "@@@" is put in the
                        last columns of the last screen line to indicate the
                        rest of the line is not displayed.
        truncate        Like "lastline", but "@@@" is displayed in the first
                        column of the last screen line.  Overrules "lastline".
        uhex            Show unprintable characters hexadecimal as <xx>
                        instead of using ^C and ~C.
        msgsep          When showing messages longer than 'cmdheight', only
                        scroll the message lines, not the entire screen. The
                        separator line is decorated by |hl-MsgSeparator| and
                        the "msgsep" flag of 'fillchars'.

        When neither "lastline" nor "truncate" is included, a last line that
        doesn't fit is replaced with "@" lines.

*'eadirection'* *'ead'*
'eadirection' 'ead'     string  (default "both")
                        global
        Tells when the 'equalalways' option applies:
                ver     vertically, width of windows is not affected
                hor     horizontally, height of windows is not affected
                both    width and height of windows is affected

*'emoji'* *'emo'*
'emoji' 'emo'   boolean (default: on)
                        global
        When on all Unicode emoji characters are considered to be full width.
        This excludes "text emoji" characters, which are normally displayed as
        single width.  Unfortunately there is no good specification for this
        and it has been determined on trial-and-error basis.

*'encoding'* *'enc'* *E543*
'encoding' 'enc'
        String-encoding used internally and for |RPC| communication.
        Always UTF-8.

        See 'fileencoding' to control file-content encoding.

*'endofline'* *'eol'* *'noendofline'* *'noeol'*
'endofline' 'eol'       boolean (default on)
                        local to buffer
        控制是否在文件末尾加<EOL>

        This option is automatically set or reset when  starting to edit a new file,
        depending on whether file has an <EOL>  for the last line in the file.
        Normally you don't have to set or  reset this option.

        When 'binary' is off
            'fixeol' is on
                the value is not used when  writing the file.
        When 'binary' is on or  'fixeol' is off
            it is used  to
            remember 是否存在  <EOL> for the last line in the file,
            so that when you write the file
                the situation from the original file can  be kept.
            But you can change it if you want to.

        When writing a file
            this option is off
                the 'binary' option  is on, or 'fixeol' option is off,
                    no <EOL> will be written for the  last line in the file.


*'equalalways'* *'ea'* *'noequalalways'* *'noea'*
'equalalways' 'ea'      boolean (default on)
                        global
        When on, all the windows are automatically made the same size after
        splitting or closing a window.  This also happens the moment the
        option is switched on.  When off, splitting a window will reduce the
        size of the current window and leave the other windows the same.  When
        closing a window the extra lines are given to the window next to it
        (depending on 'splitbelow' and 'splitright').
        When mixing vertically and horizontally split windows, a minimal size
        is computed and some windows may be larger if there is room.  The
        'eadirection' option tells in which direction the size is affected.
        Changing the height and width of a window can be avoided by setting
        'winfixheight' and 'winfixwidth', respectively.
        If a window size is specified when creating a new window sizes are
        currently not equalized (it's complicated, but may be implemented in
        the future).

*'equalprg'* *'ep'*
'equalprg' 'ep'         string  (default "")
                        global or local to buffer |global-local|
        External program to use for "=" command.

        Environment variables are expanded |:set_env|.  See |option-backslash|  about including spaces and backslashes.
        This option cannot be set from a |modeline| or in the |sandbox|, for  security reasons.

*'errorbells'* *'eb'* *'noerrorbells'* *'noeb'*
'errorbells' 'eb'       boolean (default off)
                        global
        Ring the bell (beep or screen flash) for error messages.  This only
        makes a difference for error messages, the bell will be used always
        for a lot of errors without a message (e.g., hitting <Esc> in Normal
        mode).  See 'visualbell' to make the bell behave like a screen flash
        or do nothing. See 'belloff' to finetune when to ring the bell.

*'errorfile'* *'ef'*
'errorfile' 'ef'        string  (default: "errors.err")
                        global
        Name of the errorfile for the QuickFix mode (see |:cf|).
        When the "-q" command-line argument is used, 'errorfile' is set to the
        following argument.  See |-q|.
        NOT used for the ":make" command.  See 'makeef' for that.
        Environment variables are expanded |:set_env|.
        See |option-backslash| about including spaces and backslashes.
        This option cannot be set from a |modeline| or in the |sandbox|, for  security reasons.

*'errorformat'* *'efm'*
'errorformat' 'efm'     string  (default is very long)
                        global or local to buffer |global-local|
        Scanf-like description of the format for the lines in the error file
        (see |errorformat|).

*'eventignore'* *'ei'*
'eventignore' 'ei'      string  (default "")
                        global
    A list of autocommand event names,
    which are to be ignored.
    When set to "all" or when "all" is one of the items,
    all autocommand events are ignored,
    autocommands will not be executed.
    Otherwise this is a comma separated list of event names.
    Example:
         :set ei=WinEnter,WinLeave

*'expandtab'* *'et'* *'noexpandtab'* *'noet'*
'expandtab' 'et'        boolean (default off)
                        local to buffer
        无法expand显存的
        In Insert mode:
            Use the appropriate number of spaces to insert a  <Tab>.

        with the '>' and '<' commands and  when 'autoindent' is on:
            Spaces are used in indents

        To insert a real tab when 'expandtab' is  on,
            use CTRL-V<Tab>.
        See also |:retab| and |ins-expandtab|.


*'fileencoding'* *'fenc'* *E213*
'fileencoding' 'fenc'   string (default: "")
                        local to buffer
        File-content encoding for the current buffer. Conversion is done with
        iconv() or as specified with 'charconvert'.

        When 'fileencoding' is not UTF-8, conversion will be done when
        writing the file.  For reading see below.
        When 'fileencoding' is empty, the file will be saved with UTF-8
        encoding (no conversion when reading or writing a file).

        WARNING: Conversion to a non-Unicode encoding can cause loss of
        information!

        See |encoding-names| for the possible values.  Additionally, values may be
        specified that can be handled by the converter, see
        |mbyte-conversion|.

        When reading a file 'fileencoding' will be set from 'fileencodings'.
        To read a file in a certain encoding it won't work by setting
        'fileencoding', use the |++enc| argument.  One exception: when
        'fileencodings' is empty the value of 'fileencoding' is used.
        For a new file the global value of 'fileencoding' is used.

        Prepending "8bit-" and "2byte-" has no meaning here, they are ignored.
        When the option is set, the value is converted to lowercase.  Thus
        you can set it with uppercase values too.  '_' characters are
        replaced with '-'.  If a name is recognized from the list at
        |encoding-names|, it is replaced by the standard name.  For example
        "ISO8859-2" becomes "iso-8859-2".

        When this option is set, after starting to edit a file, the 'modified'
        option is set, because the file would be different when written.

        Keep in mind that changing 'fenc' from a modeline happens
        AFTER the text has been read, thus it applies to when the file will be
        written.  If you do set 'fenc' in a modeline, you might want to set
        'nomodified' to avoid not being able to ":q".

        This option cannot be changed when 'modifiable' is off.

*'fileencodings'* *'fencs'*
'fileencodings' 'fencs' string (default: "ucs-bom,utf-8,default,latin1")
                        global
        This is a list of character encodings considered when starting to edit
        an existing file.  When a file is read, Vim tries to use the first
        mentioned character encoding.  If an error is detected, the next one
        in the list is tried.  When an encoding is found that works,
        'fileencoding' is set to it.  If all fail, 'fileencoding' is set to
        an empty string, which means that UTF-8 is used.
                WARNING: Conversion can cause loss of information! You can use
                the |++bad| argument to specify what is done with characters
                that can't be converted.
        For an empty file or a file with only ASCII characters most encodings
        will work and the first entry of 'fileencodings' will be used (except
        "ucs-bom", which requires the BOM to be present).  If you prefer
        another encoding use an BufReadPost autocommand event to test if your
        preferred encoding is to be used.  Example:
                au BufReadPost * if search('\S', 'w') == 0 |
                        \ set fenc=iso-2022-jp | endif
        This sets 'fileencoding' to "iso-2022-jp" if the file does not contain
        non-blank characters.
        When the |++enc| argument is used then the value of 'fileencodings' is
        not used.
        'fileencodings' is not used for a new file, the global value
        of 'fileencoding' is used instead.  You can set it with:
                :setglobal fenc=iso-8859-2
        This means that a non-existing file may get a different encoding than
        an empty file.
        The special value "ucs-bom" can be used to check for a Unicode BOM
        (Byte Order Mark) at the start of the file.  It must not be preceded
        by "utf-8" or another Unicode encoding for this to work properly.
        An entry for an 8-bit encoding (e.g., "latin1") should be the last,
        because Vim cannot detect an error, thus the encoding is always
        accepted.
        The special value "default" can be used for the encoding from the
        environment.  It is useful when your environment uses a non-latin1
        encoding, such as Russian.
        When a file contains an illegal UTF-8 byte sequence it won't be
        recognized as "utf-8".  You can use the |8g8| command to find the
        illegal byte sequence.
        WRONG VALUES:                   WHAT'S WRONG:
                latin1,utf-8            "latin1" will always be used
                utf-8,ucs-bom,latin1    BOM won't be recognized in an utf-8
                                        file
                cp1250,latin1           "cp1250" will always be used
        If 'fileencodings' is empty, 'fileencoding' is not modified.
        See 'fileencoding' for the possible values.
        Setting this option does not have an effect until the next time a file
        is read.

*'fileformat'* *'ff'*
'fileformat' 'ff'       string (Windows default: "dos",
                                Unix default: "unix")
                        local to buffer
        This gives the <EOL> of the current buffer,
        which is used for  reading/writing the buffer from/to a file:
            dos     <CR><NL>
            unix    <NL>
            mac     <CR>
        When "dos" is used
            CTRL-Z at the end of a file is ignored.
            See |file-formats| and |file-read|.

        For the character encoding of the file see 'fileencoding'.

        When 'binary' is set,
            file I/O  works like it was set to "unix".
            the value of 'fileformat' is ignored,

        'fileformats' is not empty and 'binary' is off.
            This option is set automatically when starting to edit a file and

        When this option is set,
            after starting to edit a file, the 'modified'  option is set,
            because the file would be different when written.

        This option cannot be changed when 'modifiable' is off.

*'fileformats'* *'ffs'*
'fileformats' 'ffs'     string (default:
                                Vim+Vi  Win32: "dos,unix",
                                Vim     Unix: "unix,dos",
                        global

        When 'binary' is set, the value of 'fileformats' is not used.

        This gives the end-of-line (<EOL>) formats that will be tried when
        starting to edit a new buffer and
        when reading a file into an existing  buffer:
        - When empty, the format defined with 'fileformat' will be used  always.
          It is not set automatically.
        - When set to one name,
               whenever a new buffer  is 🔑opened🔑.
                   that format will be used
                  'fileformat' is set accordingly for that buffer.
              when a file is `read` into an existing  buffer,
                  The  'fileformats' name will be used
                  no matter what 'fileformat' for that buffer is set to.
        - When more than one name is present,  separated by commas,
             when reading a file:
                  automatic  <EOL> detection will be done
             When starting to  edit a file
                  a check is done for the <EOL>:
                      1. If all lines end in <CR><NL>,
                              and 'fileformats' includes "dos",
                                 'fileformat' is set to "dos".
                      2. If a <NL> is found:
                              if 'fileformats' includes "unix",
                                  'fileformat'  is set to "unix".
                                   When a <NL> is found without a  preceding <CR>,
                                  "unix" is preferred over "dos".
                      3. If 'fileformat'  not  set,
                               if a <CR> is found,
                                    if 'fileformats' includes "mac",
                                        'fileformat' is set to "mac".
                     This means that "mac" is only chosen when:
                          "unix" is not present or
                          no <NL> is found in the file,

                          and

                          "dos" is not present
                          or no <CR><NL> is found in the file.

                     Except:
                         if "unix" was chosen, but there is a <CR> before  the first <NL>,
                         and there appear to be more <CR>s than <NL>s in  the first few lines, "mac" is used.

                      4. If 'fileformat' is still not set,
                              the first name from  'fileformats' is used.

        When reading a file into an existing buffer,
              the same is done, but
                  this happens like 'fileformat' has been set appropriately for that  file only,
                  the option is not changed.


        When Vim starts up with an empty buffer
            the first item is used.
            You  can overrule this by setting 'fileformat' in your .vimrc.

        For systems with a Dos-like <EOL> (<CR><NL>),
            when reading files that  are ":source"ed and  for vimrc files,
                automatic <EOL> detection may be  done:
                    - When 'fileformats' is empty, there is no automatic detection.  Dos
                      format will be used.
                    - When 'fileformats' is set to one or more names, automatic detection
                      is done.  This is based on the first <NL> in the file: If there is a
                      <CR> in front of it, Dos format is used, otherwise Unix format is
                      used.

        Also see |file-formats|.

*'fileignorecase'* *'fic'* *'nofileignorecase'* *'nofic'*
'fileignorecase' 'fic'  boolean (default on for systems where case in file
                                 names is normally ignored)
                        global
        When set case is ignored when using file names and directories.
        See 'wildignorecase' for only ignoring case when doing completion.

*'filetype'* *'ft'*
'filetype' 'ft'         string (default: "")
                        local to buffer

                    |:filetype|
        if with ":filetype on" :
            if the file type is detected:
                        this option will be modified,
                        then the FileType autocommand event is triggered.
                                All autocommands that match with the value of this option will be  executed.

                        'filetype'  比 file name (*.py等)更灵活?

        else:
                        this option does not always reflect the current file type.

        Setting this option to a different value is most useful in a modeline,
        for a file for which the file type is not automatically recognized.
        Example, for in an IDL file:
                /* vim: set filetype=idl : */

        When a dot appears in the value,
            then this separates two filetype  names.
            Example:
                /* vim: set filetype=c.doxygen : */
            This will use the "c" filetype first, then the "doxygen" filetype.

            This works both for filetype plugins and for syntax files.
            More than  one dot may appear.

        This option is not copied to another buffer, independent of the 's' or  'S' flag in 'cpoptions'.
        Only normal file name characters can be used,
            "/\*?[|<>" are illegal.

        see |FileType| |filetypes|

*'fillchars'* *'fcs'*
'fillchars' 'fcs'       string  (default "")
                        global or local to window |global-local|
        Characters to fill the statuslines and
        vertical separators.
        It is a comma separated list of items:

          item          default         Used for
          stl:c         ' ' or '^'      statusline of the current window
          stlnc:c       ' ' or '='      statusline of the non-current windows
          vert:c        '│' or '|'      vertical separators |:vsplit|
          fold:c        '·' or '-'      filling 'foldtext'
          foldopen:c    '-'             mark the beginning of a fold
          foldclose:c   '+'             show a closed fold
          foldsep:c     '│' or '|'      open fold middle marker
          diff:c        '-'             deleted lines of the 'diff' option
          msgsep:c      ' '             message separator 'display'
          eob:c         '~'             empty lines at the end of a buffer

        Any one that is omitted will fall back to the default.
        For "stl" and "stlnc" the space will be used when there is highlighting,
        '^' or '=' otherwise.

        If 'ambiwidth' is "double"
        then "vert",  "foldsep" and "fold" default to single-byte alternatives.

        Example:
            :set fillchars=stl:^,stlnc:=,vert:│,fold:·,diff:-
        This is similar to the default,
        except that these characters will also be used when there is highlighting.

        for "stl" and "stlnc" only single-byte values are supported.

        The highlighting used for these items:
          item          highlight group
          stl:c         StatusLine              |hl-StatusLine|
          stlnc:c       StatusLineNC            |hl-StatusLineNC|
          vert:c        VertSplit               |hl-VertSplit|
          fold:c        Folded                  |hl-Folded|
          diff:c        DiffDelete              |hl-DiffDelete|
          eob:c         EndOfBuffer             |hl-EndOfBuffer|

*'fixendofline'* *'fixeol'* *'nofixendofline'* *'nofixeol'*
'fixendofline' 'fixeol' boolean (default on)
                        local to buffer
        When writing a file and this option is on, <EOL> at the end of file
        will be restored if missing. Turn this option off if you want to
        preserve the situation from the original file.
        When the 'binary' option is set the value of this option doesn't
        matter.
        See the 'endofline' option.

与fold相关
*'foldmethod'* *'fdm'*
    'foldmethod' 'fdm'      string (default: "manual")
                            local to window

        The kind of folding used for the current window.  Possible values:
            manual        |fold-manual|
            indent        |fold-indent|
            expr          |fold-expr|
            marker        |fold-marker|
            syntax        |fold-syntax|
            diff          |fold-diff|


*'foldmarker'* *'fmr'* *E536*
        'foldmarker' 'fmr'      string (default: "{{{,}}}")
                                                        local to window
                        The start and
                        end marker used when 'foldmethod' is "marker".
                        There must be one comma,
                        which separates the start and
                        end marker.
                        The marker is a literal string (a regular expression would be too slow).
                        See |fold-marker|.

*'foldexpr'* *'fde'*
        'foldexpr' 'fde'        string (default: "0")
                                local to window
            The expression used for when 'foldmethod' is "expr".
            It is evaluated for each line to obtain its fold level.
            See |fold-expr|.
            The expression will be evaluated in the |sandbox| if set from a modeline,
            see |sandbox-option|.
            This option can't be set from a |modeline| when the 'diff' option is on or
            the 'modelineexpr' option is off.
            It is not allowed to change text or
            jump to another window while evaluating 'foldexpr' |textlock|.

*'foldclose'* *'fcl'*
    'foldclose' 'fcl'       string (default "")
                            global
        Useful if you want folds to automatically close when moving out of them.

        When set to "all",
        a fold is closed when the cursor isn't in it and
        its level is higher than 'foldlevel'.

*'foldcolumn'* *'fdc'*
    'foldcolumn' 'fdc'      string (default "0")
                            local to window
            When and how to draw the foldcolumn. (window左侧的一列)
            Valid values are:
                "auto":       resize to the minimum amount of folds to display.
                "auto:[1-9]": resize to accommodate multiple folds up to the
                              selected level
                0:            to disable foldcolumn
                "[1-9]":      to display a fixed number of columns
            See |folding|.

*'foldenable'* *'fen'*
*'nofoldenable'* *'nofen'*
    'foldenable' 'fen'      boolean (default on)
                            local to window
        When off,
        all folds are open.

        This option can be used to quickly switch between showing all text unfolded and
        viewing the text with folds (including manually opened or
        closed folds).
        It can be toggled with the |zi| command.

        The 'foldcolumn' will remain blank when 'foldenable' is off.
        This option is set by commands that create a new fold or
        close a fold.
        See |folding|.


*'foldignore'* *'fdi'*
    'foldignore' 'fdi'      string (default: "#")
                            local to window
                Used only when 'foldmethod' is "`indent`".

                Lines starting with characters in 'foldignore' will get their fold level from surrounding lines.
                White space is skipped before checking for this character.
                The default "#" works well for C programs.
                See |fold-indent|.

*'foldlevel'* *'fdl'*

    'foldlevel' 'fdl'       number (default: 0)
                            local to window
            Sets the fold level: Folds with a higher level will be closed.
            Setting this option to zero will close all folds.  Higher numbers will
            close fewer folds.
            This option is set by commands like |zm|, |zM| and |zR|.
            See |fold-foldlevel|.

*'foldlevelstart'* *'fdls'*
    'foldlevelstart' 'fdls' number (default: -1)
                            global
        Sets 'foldlevel' when starting to edit another buffer in a window.
        Useful to always start editing with all folds closed (value zero),
        some folds closed (one) or no folds closed (99).
        This is done before reading any modeline,
        thus a setting in a modeline overrules this option.
        Starting to edit a file for |diff-mode| also ignores this option and
        closes all folds.
        It is also done before BufReadPre autocommands,
        to allow an autocmd to overrule the 'foldlevel' value for specific files.
        When the value is negative,
        it is not used.



*'foldminlines'* *'fml'*
    'foldminlines' 'fml'    number (default: 1)
                            local to window
                    Sets the number of screen lines above which a fold can be displayed closed.
                    Also for manually closed folds.
                    With the default value of one a fold can only be closed if it takes up two or
                    more screen lines.
                    Set to zero to be able to close folds of just one screen line.

                                        this only has an effect on what is displayed.
                    After using "zc" to close a fold,
                    which is displayed open because it's smaller than 'foldminlines',
                    a following "zc" may close a containing fold.

*'foldnestmax'* *'fdn'*
    'foldnestmax' 'fdn'     number (default: 20)
                            local to window
            Sets the maximum nesting of folds for the "indent" and "syntax"
            methods.  This avoids that too many folds will be created.  Using more
            than 20 doesn't work, because the internal limit is 20.

*'foldopen'* *'fdo'*
    'foldopen' 'fdo'        string (default: "block,hor,mark,percent,quickfix,
                                                                 search,tag,undo")
                            global
            Specifies for which type of commands folds will be opened, if the
            command moves the cursor into a closed fold.  It is a comma separated
            list of items.
            NOTE: When the command is part of a mapping this option is not used.
            Add the |zv| command to the mapping to get the same effect.
            (rationale: the mapping may want to control opening folds itself)

                    item            commands
                    all             any
                    block           "(", "{", "[[", "[{", etc.
                    hor             horizontal movements: "l", "w", "fx", etc.
                    insert          any command in Insert mode
                    jump            far jumps: "G", "gg", etc.
                    mark            jumping to a mark: "'m", CTRL-O, etc.
                    percent         "%"
                    quickfix        ":cn", ":crew", ":make", etc.
                    search          search for a pattern: "/", "n", "*", "gd", etc.
                                    (not for a search pattern in a ":" command)
                                    Also for |[s| and |]s|.
                    tag             jumping to a tag: ":ta", CTRL-T, etc.
                    undo            undo or redo: "u" and CTRL-R
            When a movement command is used for an operator (e.g., "dl" or "y%")
            this option is not used.  This means the operator will include the
            whole closed fold.
            vertical movements are not here, because it would make it
            very difficult to move onto a closed fold.
            In insert mode the folds containing the cursor will always be open
            when text is inserted.
            To close folds you can re-apply 'foldlevel' with the |zx| command or
            set the 'foldclose' option to "all".

*'foldtext'* *'fdt'*
    'foldtext' 'fdt'        string (default: "foldtext()")
                            local to window
        An expression which is used to specify the text displayed for a closed fold.
        See |fold-foldtext|.

                                The expression will be evaluated in the |sandbox| if set from a modeline,
                                see |sandbox-option|.
                                This option cannot be set in a modeline when 'modelineexpr' is off.

                                It is not allowed to change text or
                                jump to another window while evaluating 'foldtext' |textlock|.

*'formatexpr'* *'fex'*


'formatexpr' 'fex'      string (default "")
                        local to buffer
        Expression which is evaluated to format a range of lines
        for the |gq|  operator or  automatic formatting (see 'formatoptions').

        When this  option is empty 'formatprg' is used.

        The |v:lnum|  variable holds the first line to be formatted.
        The |v:count| variable holds the number of lines to be formatted.
        The |v:char|  variable holds the character that is going to be
                      inserted if the expression is being evaluated due to
                      automatic formatting.  This can be empty.  Don't insert
                      it yet!

        Example:
                :set formatexpr=mylang#Format()
        This will invoke the mylang#Format() function in the
        autoload/mylang.vim file in 'runtimepath'. |autoload|

        🔑The expression is also evaluated when 'textwidth' is set and adding  text beyond that limit. 🔑 This happens under the same conditions as
        when internal formatting is used.  Make sure the cursor is kept in the
        same spot relative to the text then!  The |mode()| function will
        return "i" or "R" in this situation.

        When the expression evaluates to non-zero Vim will fall back to using  the internal format mechanism.

        The expression will be evaluated in the |sandbox| when set from a
        modeline, see |sandbox-option|.  That stops the option from working,
        since changing the buffer text is not allowed.

        This option cannot be set in a modeline when 'modelineexpr' is off.
        NOTE: This option is set to "" when 'compatible' is set.

*'formatlistpat'* *'flp'*
'formatlistpat' 'flp'   string (default: "^\s*\d\+[\]:.)}\t ]\s*")
                        local to buffer
        A pattern that is used to recognize a list header.  This is used for
        the "n" flag in 'formatoptions'.
        The pattern must match exactly the text that will be the indent for
        the line below it.  You can use |/\ze| to mark the end of the match
        while still checking more characters.  There must be a character
        following the pattern, when it matches the whole line it is handled
        like there is no match.
        The default recognizes a number, followed by an optional punctuation
        character and white space.

*'formatoptions'* *'fo'*
'formatoptions' 'fo'    string default: "tcqj"
                        local to buffer

    This is a sequence of letters which
    describes how automatic formatting is to be done
    |fo-table|.

    Commas can  be inserted for readability.
    To avoid problems with flags that are added in the future,
    use the "+=" and
    "-=" feature of ":set" |add-option-flags|.

*'formatprg'* *'fp'*
'formatprg' 'fp'        string (default "")
                        global or local to buffer |global-local|
        The name of an external program that will be used to format the lines
        selected with the |gq| operator.  The program must take the input on
        stdin and produce the output on stdout.  The Unix program "fmt" is
        such a program.
        If the 'formatexpr' option is not empty it will be used instead.
        Otherwise, if 'formatprg' option is an empty string, the internal
        format function will be used |C-indenting|.
        Environment variables are expanded |:set_env|.  See |option-backslash|
        about including spaces and backslashes.
        This option cannot be set from a |modeline| or in the |sandbox|, for  security reasons.

*'fsync'* *'fs'*
'fsync' 'fs'            boolean (default off)
                        global
        When on, the OS function fsync() will be called after saving a file
        (|:write|, |writefile()|, …), |swap-file| and |shada-file|. This
        flushes the file to disk, ensuring that it is safely written.
        Slow on some systems: writing buffers, quitting Nvim, and other
        operations may sometimes take a few seconds.

        Files are ALWAYS flushed ('fsync' is ignored) when:
        - |CursorHold| event is triggered
        - |:preserve| is called
        - system signals low battery life
        - Nvim exits abnormally

        This option cannot be set from a |modeline| or in the |sandbox|, for  security reasons.

*'gdefault'* *'gd'* *'nogdefault'* *'nogd'*
'gdefault' 'gd'         boolean (default off)
                        global
        When on, the ":substitute" flag 'g' is default on.  This means that
        all matches in a line are substituted instead of one.  When a 'g' flag
        is given to a ":substitute" command, this will toggle the substitution
        of all or one match.  See |complex-change|.

                command         'gdefault' on   'gdefault' off
                :s///             subst. all      subst. one
                :s///g            subst. one      subst. all
                :s///gg           subst. all      subst. one

        DEPRECATED: Setting this option may break plugins that are not aware
        of this option.  Also, many users get confused that adding the /g flag
        has the opposite effect of that it normally does.

*'grepformat'* *'gfm'*
'grepformat' 'gfm'      string  (default "%f:%l:%m,%f:%l%m,%f  %l%m")
                        global
        Format to recognize for the ":grep" command output.
        This is a scanf-like string that uses the same format as the
        'errorformat' option: see |errorformat|.

*'grepprg'* *'gp'*
'grepprg' 'gp'          string  (default "grep -n ",
                                 Unix: "grep -n $* /dev/null")
                        global or local to buffer |global-local|
        Program to use for the |:grep| command.  This option may contain '%'
        and '#' characters, which are expanded like when used in a command-
        line.  The placeholder "$*" is allowed to specify where the arguments
        will be included.  Environment variables are expanded |:set_env|.  See
        |option-backslash| about including spaces and backslashes.
        When your "grep" accepts the "-H" argument, use this to make ":grep"
        also work well with a single file:
                :set grepprg=grep\ -nH
        Special value: When 'grepprg' is set to "internal" the |:grep| command
        works like |:vimgrep|, |:lgrep| like |:lvimgrep|, |:grepadd| like
        |:vimgrepadd| and |:lgrepadd| like |:lvimgrepadd|.
        See also the section |:make_makeprg|, since most of the comments there
        apply equally to 'grepprg'.
        This option cannot be set from a |modeline| or in the |sandbox|, for  security reasons.

*'guicursor'* *'gcr'* *E545* *E546* *E548* *E549*
'guicursor' 'gcr'       string  (default "n-v-c-sm:block,i-ci-ve:ver25,r-cr-o:hor20")
                        global
        Configures the cursor style for each mode. Works in the GUI and 🔑many  terminals🔑.  See |tui-cursor-shape|.

        To disable cursor-styling, reset the option:
                :set guicursor=

        To enable mode shapes, "Cursor" highlight, and blinking:
                :set guicursor=n-v-c:block,i-ci-ve:ver25,r-cr:hor20,o:hor50
                  \,a:blinkwait700-blinkoff400-blinkon250-Cursor/lCursor
                  \,sm:block-blinkwait175-blinkoff150-blinkon175

        The option is a comma separated list of parts.  Each part consists of a
        mode-list and an argument-list:
                mode-list:argument-list,mode-list:argument-list,..
        The mode-list is a dash separated list of these modes:
                n       Normal mode
                v       Visual mode
                ve      Visual mode with 'selection' "exclusive" (same as 'v',
                        if not specified)
                o       Operator-pending mode
                i       Insert mode
                r       Replace mode
                c       Command-line Normal (append) mode
                ci      Command-line Insert mode
                cr      Command-line Replace mode
                sm      showmatch in Insert mode
                a       all modes
        The argument-list is a dash separated list of these arguments:
                hor{N}  horizontal bar, {N} percent of the character height
                ver{N}  vertical bar, {N} percent of the character width
                block   block cursor, fills the whole character
                        - Only one of the above three should be present.
                        - Default is "block" for each mode.
                blinkwait{N}                            *cursor-blinking*
                blinkon{N}
                blinkoff{N}
                        blink times for cursor: blinkwait is the delay before
                        the cursor starts blinking, blinkon is the time that
                        the cursor is shown and blinkoff is the time that the
                        cursor is not shown.  Times are in msec.  When one of
                        the numbers is zero, there is no blinking. E.g.:
                                :set guicursor=n:blinkon0
                        - Default is "blinkon0" for each mode.
                {group-name}
                        Highlight group that decides the color and font of the
                        cursor.
                        In the |TUI|:
                        - |inverse|/reverse and no group-name are interpreted
                          as "host-terminal default cursor colors" which
                          typically means "inverted bg and fg colors".
                        - |ctermfg| and |guifg| are ignored.
                {group-name}/{group-name}
                        Two highlight group names, the first is used when
                        no language mappings are used, the other when they
                        are. |language-mapping|

        Examples of parts:
           n-c-v:block-nCursor  In Normal, Command-line and Visual mode, use a
                                block cursor with colors from the "nCursor"
                                highlight group
           n-v-c-sm:block,i-ci-ve:ver25-Cursor,r-cr-o:hor20
                                In Normal et al. modes, use a block cursor
                                with the default colors defined by the host
                                terminal.  In Insert-likes modes, use
                                a vertical bar cursor with colors from
                                "Cursor" highlight group.  In Replace-likes
                                modes, use a underline cursor with
                                default colors.
           i-ci:ver30-iCursor-blinkwait300-blinkon200-blinkoff150
                                In Insert and Command-line Insert mode, use a
                                30% vertical bar cursor with colors from the
                                "iCursor" highlight group.  Blink a bit
                                faster.

        The 'a' mode is different.  It will set the given argument-list for
        all modes.  It does not reset anything to defaults.  This can be used
        to do a common setting for all modes.  For example, to switch off
        blinking: "a:blinkon0"

        Examples of cursor highlighting:
            :highlight Cursor gui=reverse guifg=NONE guibg=NONE
            :highlight Cursor gui=NONE guifg=bg guibg=fg

*'guifont'* *'gfn'*
*E235* *E596*
'guifont' 'gfn'         string  (default "")
                        global
        This is a list of fonts which will be used for the GUI version of Vim.
        In its simplest form the value is just one font name.  When
        the font cannot be found you will get an error message.  To try other
        font names a list can be specified, font names separated with commas.
        The first valid font is used.

        Spaces after a comma are ignored.  To include a comma in a font name
        precede it with a backslash.  Setting an option requires an extra
        backslash before a space and a backslash.  See also
        |option-backslash|.  For example:
            :set guifont=Screen15,\ 7x13,font\\,with\\,commas
        will make Vim try to use the font "Screen15" first, and if it fails it
        will try to use "7x13" and then "font,with,commas" instead.

        If none of the fonts can be loaded, Vim will keep the current setting.
        If an empty font list is given, Vim will try using other resource
        settings (for X, it will use the Vim.font resource), and finally it
        will try some builtin default which should always be there ("7x13" in
        the case of X).  The font names given should be "normal" fonts.  Vim
        will try to find the related bold and italic fonts.

        For Win32 and Mac OS:
            :set guifont=*
        will bring up a font requester, where you can pick the font you want.

        The font name depends on the GUI used.

        For Mac OSX you can use something like this:
            :set guifont=Monaco:h10
*E236*
        the fonts must be mono-spaced (all characters have the same
        width).

        To preview a font on X11, you might be able to use the "xfontsel"
        program.  The "xlsfonts" program gives a list of all available fonts.

        For the Win32 GUI                                       *E244* *E245*
        - takes these options in the font name:
                hXX - height is XX (points, can be floating-point)
                wXX - width is XX (points, can be floating-point)
                b   - bold
                i   - italic
                u   - underline
                s   - strikeout
                cXX - character set XX.  Valid charsets are: ANSI, ARABIC,
                      BALTIC, CHINESEBIG5, DEFAULT, EASTEUROPE, GB2312, GREEK,
                      HANGEUL, HEBREW, JOHAB, MAC, OEM, RUSSIAN, SHIFTJIS,
                      SYMBOL, THAI, TURKISH, VIETNAMESE ANSI and BALTIC.
                      Normally you would use "cDEFAULT".

          Use a ':' to separate the options.
        - A '_' can be used in the place of a space, so you don't need to use
          backslashes to escape the spaces.
        - Examples:
            :set guifont=courier_new:h12:w5:b:cRUSSIAN
            :set guifont=Andale_Mono:h7.5:w4.5

*'guifontwide'* *'gfw'* *E231* *E533* *E534*
'guifontwide' 'gfw'     string  (default "")
                        global
        Comma-separated list of fonts to be used for double-width characters.
        The first font that can be loaded is used.
        The size of these fonts must be exactly twice as wide as the one
        specified with 'guifont' and the same height.

        When 'guifont' has a valid font and 'guifontwide' is empty Vim will
        attempt to set 'guifontwide' to a matching double-width font.

*'guioptions'* *'go'*
'guioptions' 'go'       string  (default "egmrLT"   (MS-Windows))
                        global
        This option only has an effect in the GUI version of Vim.  It is a
        sequence of letters which describes what components and options of the
        GUI should be used.
        To avoid problems with flags that are added in the future, use the
        "+=" and "-=" feature of ":set" |add-option-flags|.

        Valid letters are as follows:
*guioptions_a* *'go-a'*
          'a'   Autoselect:  If present, then whenever VISUAL mode is started,
                or the Visual area extended, Vim tries to become the owner of
                the windowing system's global selection.  This means that the
                Visually highlighted text is available for pasting into other
                applications as well as into Vim itself.  When the Visual mode
                ends, possibly due to an operation on the text, or when an
                application wants to paste the selection, the highlighted text
                is automatically yanked into the "* selection register.
                Thus the selection is still available for pasting into other
                applications after the VISUAL mode has ended.
                    If not present, then Vim won't become the owner of the
                windowing system's global selection unless explicitly told to
                by a yank or delete operation for the "* register.
                The same applies to the modeless selection.
*'go-P'*
          'P'   Like autoselect but using the "+ register instead of the "*
                register.
*'go-A'*
          'A'   Autoselect for the modeless selection.  Like 'a', but only
                applies to the modeless selection.

                    'guioptions'   autoselect Visual  autoselect modeless
                         ""              -                       -
                         "a"            yes                     yes
                         "A"             -                      yes
                         "aA"           yes                     yes

*'go-c'*
          'c'   Use console dialogs instead of popup dialogs for simple
                choices.
*'go-d'*
          'd'   Use dark theme variant if available.
*'go-e'*
          'e'   Add tab pages when indicated with 'showtabline'.
                'guitablabel' can be used to change the text in the labels.
                When 'e' is missing a non-GUI tab pages line may be used.
                The GUI tabs are only supported on some systems, currently
                Mac OS/X and MS-Windows.
*'go-i'*
          'i'   Use a Vim icon.
*'go-m'*
          'm'   Menu bar is present.
*'go-M'*
          'M'   The system menu "$VIMRUNTIME/menu.vim" is not sourced.  Note
                that this flag must be added in the vimrc file, before
                switching on syntax or filetype recognition (when the |gvimrc|
                file is sourced the system menu has already been loaded; the
                `:syntax on` and `:filetype on` commands load the menu too).
*'go-g'*
          'g'   Grey menu items: Make menu items that are not active grey.  If
                'g' is not included inactive menu items are not shown at all.
*'go-T'*
          'T'   Include Toolbar.  Currently only in Win32 GUI.
*'go-r'*
          'r'   Right-hand scrollbar is always present.
*'go-R'*
          'R'   Right-hand scrollbar is present when there is a vertically
                split window.
*'go-l'*
          'l'   Left-hand scrollbar is always present.
*'go-L'*
          'L'   Left-hand scrollbar is present when there is a vertically
                split window.
*'go-b'*
          'b'   Bottom (horizontal) scrollbar is present.  Its size depends on
                the longest visible line, or on the cursor line if the 'h'
                flag is included. |gui-horiz-scroll|
*'go-h'*
          'h'   Limit horizontal scrollbar size to the length of the cursor
                line.  Reduces computations. |gui-horiz-scroll|

        And yes, you may even have scrollbars on the left AND the right if
        you really want to :-).  See |gui-scrollbars| for more information.

*'go-v'*
          'v'   Use a vertical button layout for dialogs.  When not included,
                a horizontal layout is preferred, but when it doesn't fit a
                vertical layout is used anyway.  Not supported in GTK 3.
*'go-p'*
          'p'   Use Pointer callbacks for X11 GUI.  This is required for some
                window managers.  If the cursor is not blinking or hollow at
                the right moment, try adding this flag.  This must be done
                before starting the GUI.  Set it in your |gvimrc|.  Adding or
                removing it after the GUI has started has no effect.
*'go-k'*
          'k'   Keep the GUI window size when adding/removing a scrollbar, or
                toolbar, tabline, etc.  Instead, the behavior is similar to
                when the window is maximized and will adjust 'lines' and
                'columns' to fit to the window.  Without the 'k' flag Vim will
                try to keep 'lines' and 'columns' the same when adding and
                removing GUI components.

*'guitablabel'* *'gtl'*
'guitablabel' 'gtl'     string  (default empty)
                        global
        When nonempty describes the text to use in a label of the GUI tab
        pages line.  When empty and when the result is empty Vim will use a
        default label.  See |setting-guitablabel| for more info.

        The format of this option is like that of 'statusline'.
        'guitabtooltip' is used for the tooltip, see below.
        The expression will be evaluated in the |sandbox| when set from a
        modeline, see |sandbox-option|.
        This option cannot be set in a modeline when 'modelineexpr' is off.

        Only used when the GUI tab pages line is displayed.  'e' must be
        present in 'guioptions'.  For the non-GUI tab pages line 'tabline' is
        used.

*'guitabtooltip'* *'gtt'*
'guitabtooltip' 'gtt'   string  (default empty)
                        global
        When nonempty describes the text to use in a tooltip for the GUI tab
        pages line.  When empty Vim will use a default tooltip.
        This option is otherwise just like 'guitablabel' above.
        You can include a line break.  Simplest method is to use |:let|:
                :let &guitabtooltip = "line one\nline two"


*'helpfile'* *'hf'*
'helpfile' 'hf'         string  (default (MS-Windows) "$VIMRUNTIME\doc\help.txt"
                                         (others) "$VIMRUNTIME/doc/help.txt")
                        global

    Name of the main help file.
    All distributed help files should be placed together in one directory.

    Additionally,
    all "doc" directories in 'runtimepath' will be used.
    Environment variables are expanded |:set_env|.
     For example:
        "$VIMRUNTIME/doc/help.txt".
    If $VIMRUNTIME is not set,
    $VIM is also tried.

    Also see |$VIMRUNTIME| and |option-backslash| about including spaces and  backslashes.
    This option cannot be set from a |modeline| or in the |sandbox|,  for  security reasons.

*'helpheight'* *'hh'*
'helpheight' 'hh'       number  (default 20)
                        global
        Minimal initial height of the help window when it is opened with the
        ":help" command.  The initial height of the help window is half of the
        current window, or (when the 'ea' option is on) the same as other
        windows.  When the height is less than 'helpheight', the height is
        set to 'helpheight'.  Set to zero to disable.

*'helplang'* *'hlg'*
'helplang' 'hlg'        string  (default: messages language or empty)
                        global
        Comma separated list of languages.  Vim will use the first language
        for which the desired help can be found.  The English help will always
        be used as a last resort.  You can add "en" to prefer English over
        another language, but that will only find tags that exist in that
        language and not in the English help.
        Example:
                :set helplang=de,it
        This will first search German, then Italian and finally English help
        files.
        When using |CTRL-]| and ":help!" in a non-English help file Vim will
        try to find the tag in the current language before using this option.
        See |help-translated|.

*'hidden'*  *'hid'*
*'nohidden'* *'nohid'*
    boolean (default on)
    global
    |'buflisted'| 是local的

    when a buffer is |abandon|ed.
        When off
            a buffer is unloaded (including loss of undo information)
        When on
            a buffer becomes hidden

    A buffer displayed in another window does not become hidden, of course.
    Commands that move through the buffer list sometimes hide a buffer
    although the 'hidden' option is off:
        when the buffer is modified,
        'autowrite' is off or writing is not possible, and the '!' flag was  used.
        See also |windows|.

    To hide a specific buffer use the 'bufhidden' option.

    'hidden' is set for one command with ":hide {command}" |:hide|.

*'history'* *'hi'*
'history' 'hi'          number  (Vim default: 10000, Vi default: 0)
                        global
        A history of ":" commands, and a history of previous search patterns
        is remembered.  This option decides how many entries may be stored in
        each of these histories (see |cmdline-editing|).
        The maximum value is 10000.

*'hkmap'* *'hk'* *'nohkmap'* *'nohk'*
'hkmap' 'hk'            boolean (default off)
                        global
        When on, the keyboard is mapped for the Hebrew character set.
        Normally you would set 'allowrevins' and use CTRL-_ in insert mode to
        toggle this option.  See |rileft.txt|.

*'hkmapp'* *'hkp'* *'nohkmapp'* *'nohkp'*
'hkmapp' 'hkp'          boolean (default off)
                        global
        When on, phonetic keyboard mapping is used.  'hkmap' must also be on.
        This is useful if you have a non-Hebrew keyboard.
        See |rileft.txt|.

*'hlsearch'* *'hls'* *'nohlsearch'* *'nohls'*
'hlsearch' 'hls'        boolean (default on)
                        global
        When there is a previous search pattern, highlight all its matches.
        The |hl-Search| highlight group determines the highlighting. Note that
        only the matching text is highlighted, any offsets are not applied.
        See also: 'incsearch' and |:match|.
        When you get bored looking at the highlighted matches, you can turn it
        off with |:nohlsearch|.  This does not change the option value, as
        soon as you use a search command, the highlighting comes back.
        'redrawtime' specifies the maximum time spent on finding matches.
        When the search pattern can match an end-of-line, Vim will try to
        highlight all of the matched text.  However, this depends on where the
        search starts.  This will be the first line in the window or the first
        line below a closed fold.  A match in a previous line which is not
        drawn may not continue in a newly drawn line.
        You can specify whether the highlight status is restored on startup
        with the 'h' flag in 'shada' |shada-h|.

*'icon'* *'noicon'*
'icon'                  boolean (default off, on when title can be restored)
                        global
        When on, the icon text of the window will be set to the value of
        'iconstring' (if it is not empty), or to the name of the file
        currently being edited.  Only the last part of the name is used.
        Overridden by the 'iconstring' option.
        Only works if the terminal supports setting window icons.

*'iconstring'*
'iconstring'            string  (default "")
                        global
        When this option is not empty, it will be used for the icon text of
        the window.  This happens only when the 'icon' option is on.
        Only works if the terminal supports setting window icon text
        When this option contains printf-style '%' items, they will be
        expanded according to the rules used for 'statusline'.  See
        'titlestring' for example settings.
        This option cannot be set in a modeline when 'modelineexpr' is off.

*'ignorecase'* *'ic'* *'noignorecase'* *'noic'*
'ignorecase' 'ic'       boolean (default off)
                        global
        Ignore case in search patterns.  Also used when searching in the tags
        file.
        Also see 'smartcase' and 'tagcase'.
        Can be overruled by using "\c" or "\C" in the pattern, see
        |/ignorecase|.

*'imcmdline'* *'imc'* *'noimcmdline'* *'noimc'*
'imcmdline' 'imc'       boolean (default off)
                        global
        When set the Input Method is always on when starting to edit a command
        line, unless entering a search pattern (see 'imsearch' for that).
        Setting this option is useful when your input method allows entering
        English characters directly, e.g., when it's used to type accented
        characters with dead keys.

*'imdisable'* *'imd'* *'noimdisable'* *'noimd'*
'imdisable' 'imd'       boolean (default off, on for some systems (SGI))
                        global
        When set the Input Method is never used.  This is useful to disable
        the IM when it doesn't work properly.
        Currently this option is on by default for SGI/IRIX machines.  This
        may change in later releases.

*'iminsert'* *'imi'*
'iminsert' 'imi'        number (default 0)
                        local to buffer
        Specifies whether :lmap or an Input Method (IM) is to be used in
        Insert mode.  Valid values:
                0       :lmap is off and IM is off
                1       :lmap is ON and IM is off
                2       :lmap is off and IM is ON
        To always reset the option to zero when leaving Insert mode with <Esc>
        this can be used:
                :inoremap <ESC> <ESC>:set iminsert=0<CR>
        This makes :lmap and IM turn off automatically when leaving Insert
        mode.
        this option changes when using CTRL-^ in Insert mode
        |i_CTRL-^|.
        The value is set to 1 when setting 'keymap' to a valid keymap name.
        It is also used for the argument of commands like "r" and "f".

*'imsearch'* *'ims'*
'imsearch' 'ims'        number (default -1)
                        local to buffer
        Specifies whether :lmap or an Input Method (IM) is to be used when
        entering a search pattern.  Valid values:
                -1      the value of 'iminsert' is used, makes it look like
                        'iminsert' is also used when typing a search pattern
                0       :lmap is off and IM is off
                1       :lmap is ON and IM is off
                2       :lmap is off and IM is ON
        this option changes when using CTRL-^ in Command-line mode
        |c_CTRL-^|.
        The value is set to 1 when it is not -1 and setting the 'keymap'
        option to a valid keymap name.

*'inccommand'* *'icm'*
'inccommand' 'icm'      string  (default "nosplit")
                        global

        When nonempty, shows the effects of |:substitute|, |:smagic|, and
        |:snomagic| as you type.

        Possible values:
                nosplit Shows the effects of a command incrementally in the
                        buffer.
                split   Like "nosplit", but also shows partial off-screen
                        results in a preview window.

        If the preview is too slow (exceeds 'redrawtime') then 'inccommand' is
        automatically disabled until |Command-line-mode| is done.

*'include'* *'inc'*
'include' 'inc'         string  (default "^\s*#\s*include")
                        global or local to buffer |global-local|
        Pattern to be used to find an include command.  It is a search
        pattern, just like for the "/" command (See |pattern|).  The default
        value is for C programs.  This option is used for the commands "[i",
        "]I", "[d", etc.
        Normally the 'isfname' option is used to recognize the file name that
        comes after the matched pattern.  But if "\zs" appears in the pattern
        then the text matched from "\zs" to the end, or until "\ze" if it
        appears, is used as the file name.  Use this to include characters
        that are not in 'isfname', such as a space.  You can then use
        'includeexpr' to process the matched text.
        See |option-backslash| about including spaces and backslashes.

*'includeexpr'* *'inex'*
'includeexpr' 'inex'    string  (default "")
                        local to buffer
        Expression to be used to transform the string found with the 'include'
        option to a file name.  Mostly useful to change "." to "/" for Java:
                :set includeexpr=substitute(v:fname,'\\.','/','g')
        The "v:fname" variable will be set to the file name that was detected.

        Also used for the |gf| command if an unmodified file name can't be
        found.  Allows doing "gf" on the name after an 'include' statement.
        Also used for |<cfile>|.

        The expression will be evaluated in the |sandbox| when set from a modeline, see |sandbox-option|.
        This option cannot be set in a modeline when 'modelineexpr' is off.

        It is not allowed to change text or jump to another window while
        evaluating 'includeexpr' |textlock|.

*'incsearch'* *'is'* *'noincsearch'* *'nois'*
'incsearch' 'is'        boolean (default on)
                        global
        While typing a search command, show where the pattern, as it was typed
        so far, matches.  The matched string is highlighted.  If the pattern
        is invalid or not found, nothing is shown.  The screen will be updated
        often, this is only useful on fast terminals.
        the match will be shown, but the cursor will return to its
        original position when no match is found and when pressing <Esc>.  You
        still need to finish the search command with <Enter> to move the
        cursor to the match.
        You can use the CTRL-G and CTRL-T keys to move to the next and
        previous match. |c_CTRL-G| |c_CTRL-T|
        Vim only searches for about half a second.  With a complicated
        pattern and/or a lot of text the match may not be found.  This is to
        avoid that Vim hangs while you are typing the pattern.
        The |hl-IncSearch| highlight group determines the highlighting.
        When 'hlsearch' is on, all matched strings are highlighted too while
        typing a search command. See also: 'hlsearch'.
        If you don't want to turn 'hlsearch' on, but want to highlight all
        matches while searching, you can turn on and off 'hlsearch' with
        autocmd.  Example:
                augroup vimrc-incsearch-highlight
                  autocmd!
                  autocmd CmdlineEnter /,\? :set hlsearch
                  autocmd CmdlineLeave /,\? :set nohlsearch
                augroup END

        CTRL-L can be used to add one character from after the current match
        to the command line.  If 'ignorecase' and 'smartcase' are set and the
        command line has no uppercase characters, the added character is
        converted to lowercase.
        CTRL-R CTRL-W can be used to add the word at the end of the current
        match, excluding the characters that were already typed.

*'indentexpr'* *'inde'*
'indentexpr' 'inde'     string  (default "")
                        local to buffer
        Expression which is evaluated to obtain the proper indent for a line.
        It is used when a new line is created, for the |=| operator and
        in Insert mode as specified with the 'indentkeys' option.
        When this option is not empty, it overrules the 'cindent' and
        'smartindent' indenting.  When 'lisp' is set, this option is
        overridden by the Lisp indentation algorithm.
        The expression is evaluated with |v:lnum| set to the line number for
        which the indent is to be computed.  The cursor is also in this line
        when the expression is evaluated (but it may be moved around).
        The expression must return the number of spaces worth of indent.  It
        can return "-1" to keep the current indent (this means 'autoindent' is
        used for the indent).
        Functions useful for computing the indent are |indent()|, |cindent()|
        and |lispindent()|.
        The evaluation of the expression must not have side effects!  It must
        not change the text, jump to another window, etc.  Afterwards the
        cursor position is always restored, thus the cursor may be moved.
        Normally this option would be set to call a function:
                :set indentexpr=GetMyIndent()
        Error messages will be suppressed, unless the 'debug' option contains
        "msg".
        See |indent-expression|.

        The expression will be evaluated in the |sandbox| when set from a  modeline, see |sandbox-option|.
        This option cannot be set in a modeline when 'modelineexpr' is off.

        It is not allowed to change text or jump to another window while
        evaluating 'indentexpr' |textlock|.


*'indentkeys'* *'indk'*
'indentkeys' 'indk'     string  (default "0{,0},0),0],:,0#,!^F,o,O,e")
                        local to buffer
        A list of keys that, when typed in Insert mode, cause reindenting of
        the current line.  Only happens if 'indentexpr' isn't empty.
        The format is identical to 'cinkeys', see |indentkeys-format|.
        See |C-indenting| and |indent-expression|.

*'infercase'* *'inf'* *'noinfercase'* *'noinf'*
'infercase' 'inf'       boolean (default off)
                        local to buffer
        When doing keyword completion in insert mode |ins-completion|, and
        'ignorecase' is also on, the case of the match is adjusted depending
        on the typed text.  If the typed text contains a lowercase letter
        where the match has an upper case letter, the completed part is made
        lowercase.  If the typed text has no lowercase letters and the match
        has a lowercase letter where the typed text has an uppercase letter,
        and there is a letter before it, the completed part is made uppercase.
        With 'noinfercase' the match is used as-is.


让word用户适应vim?
*'insertmode'* *'im'* *'noinsertmode'* *'noim'*
'insertmode' 'im'       boolean (default off)
                        global
        Makes Vim work in a way that Insert mode is the default mode.
        Useful  if you want to use Vim as a modeless editor.
        These Insert mode commands will be useful:
            - Use the cursor keys to move around.
            - Use CTRL-O to execute one Normal mode command |i_CTRL-O|.
              When  this is a mapping
                  it is executed as if 'insertmode' was off.
                  Normal mode remains active until the mapping is finished.
            - Use CTRL-L to execute a number of Normal mode commands,
                then use  <Esc> to get back to Insert mode.
                CTRL-L moves the cursor  left,
                like <Esc> does when 'insertmode' isn't set.  |i_CTRL-L|

         when 'insertmode' is set:
            - when starting to edit of a file, Vim goes to Insert mode.
            - <Esc> in Insert mode is a no-op and beeps.
            - <Esc> in Normal mode makes Vim go to Insert mode.
            - CTRL-L in Insert mode is a command, it is not inserted.
            - CTRL-Z in Insert mode suspends Vim, see |CTRL-Z|.     *i_CTRL-Z*
            However, when <Esc> is used inside a mapping, it behaves like
            'insertmode' was not set.  This was done to be able to use the same
            mappings with 'insertmode' set or not set.

            When executing commands with |:normal| 'insertmode' is not used.

*'isfname'* *'isf'*
'isfname' 'isf'         string  (default for Windows:
                             "@,48-57,/,\,.,-,_,+,,,#,$,%,{,},[,],:,@-@,!,~,="
                            otherwise: "@,48-57,/,.,-,_,+,,,#,$,%,~,=")
                        global
        The characters specified by this option are included in file names and
        path names.  Filenames are used for commands like "gf", "[i" and in
        the tags file.  It is also used for "\f" in a |pattern|.
        Multi-byte characters 256 and above are always included, only the
        characters up to 255 are specified with this option.
        For UTF-8 the characters 0xa0 to 0xff are included as well.
        Think twice before adding white space to this option.  Although a
        space may appear inside a file name, the effect will be that Vim
        doesn't know where a file name starts or ends when doing completion.
        It most likely works better without a space in 'isfname'.

        on systems using a backslash as path separator, Vim tries to
        do its best to make it work as you would expect.  That is a bit
        tricky, since Vi originally used the backslash to escape special
        characters.  Vim will not remove a backslash in front of a normal file
        name character on these systems, but it will on Unix and alikes.  The
        '&' and '^' are not included by default, because these are special for
        cmd.exe.

        The format of this option is a list of parts, separated with commas.
        Each part can be a single character number or a range.  A range is two
        character numbers with '-' in between.  A character number can be a
        decimal number between 0 and 255 or the ASCII character itself (does
        not work for digits).  Example:
                "_,-,128-140,#-43"      (include '_' and '-' and the range
                                        128 to 140 and '#' to 43)
        If a part starts with '^', the following character number or range
        will be excluded from the option.  The option is interpreted from left
        to right.  Put the excluded character after the range where it is
        included.  To include '^' itself use it as the last character of the
        option or the end of a range.  Example:
                "^a-z,#,^"      (exclude 'a' to 'z', include '#' and '^')
        If the character is '@', all characters where isalpha() returns TRUE
        are included.  Normally these are the characters a to z and A to Z,
        plus accented characters.  To include '@' itself use "@-@".  Examples:
                "@,^a-z"        All alphabetic characters, excluding lower
                                case ASCII letters.
                "a-z,A-Z,@-@"   All letters plus the '@' character.
        A comma can be included by using it where a character number is
        expected.  Example:
                "48-57,,,_"     Digits, comma and underscore.
        A comma can be excluded by prepending a '^'.  Example:
                " -~,^,,9"      All characters from space to '~', excluding
                                comma, plus <Tab>.
        See |option-backslash| about including spaces and backslashes.

*'isident'* *'isi'*
'isident' 'isi'         string  (default for Windows:
                                           "@,48-57,_,128-167,224-235"
                                otherwise: "@,48-57,_,192-255")
                        global
        The characters given by this option are included in identifiers.
        Identifiers are used in recognizing environment variables and after a
        match of the 'define' option.  It is also used for "\i" in a
        |pattern|.  See 'isfname' for a description of the format of this
        option.  For '@' only characters up to 255 are used.
        Careful: If you change this option, it might break expanding
        environment variables.  E.g., when '/' is included and Vim tries to
        expand "$HOME/.local/share/nvim/shada/main.shada".  Maybe you should
        change 'iskeyword' instead.

*'iskeyword'* *'isk'*
'iskeyword' 'isk'       string (default: @,48-57,_,192-255
                                Vi default: @,48-57,_)
                        local to buffer
        Keywords are used in searching and recognizing with many commands:
        "w", "*", "[i", etc.  It is also used for "\k" in a |pattern|.  See
        'isfname' for a description of the format of this option.  For '@'
        characters above 255 check the "word" character class (any character
        that is not white space or punctuation).
        For C programs you could use "a-z,A-Z,48-57,_,.,-,>".
        For a help file it is set to all non-blank printable characters except
        '*', '"' and '|' (so that CTRL-] on a command finds the help for that
        command).
        When the 'lisp' option is on the '-' character is always included.
        This option also influences syntax highlighting, unless the syntax
        uses |:syn-iskeyword|.

*'isprint'* *'isp'*
'isprint' 'isp' string  (default: "@,161-255")
                        global
        The characters given by this option are displayed directly on the
        screen.  It is also used for "\p" in a |pattern|.  The characters from
        space (ASCII 32) to '~' (ASCII 126) are always displayed directly,
        even when they are not included in 'isprint' or excluded.  See
        'isfname' for a description of the format of this option.

        Non-printable characters are displayed with two characters:
                  0 -  31       "^@" - "^_"
                 32 - 126       always single characters
                   127          "^?"
                128 - 159       "~@" - "~_"
                160 - 254       "| " - "|~"
                   255          "~?"
        Illegal bytes from 128 to 255 (invalid UTF-8) are
        displayed as <xx>, with the hexadecimal value of the byte.
        When 'display' contains "uhex" all unprintable characters are
        displayed as <xx>.
        The SpecialKey highlighting will be used for unprintable characters.
        |hl-SpecialKey|

        Multi-byte characters 256 and above are always included, only the
        characters up to 255 are specified with this option.  When a character
        is printable but it is not available in the current font, a
        replacement character will be shown.
        Unprintable and zero-width Unicode characters are displayed as <xxxx>.
        There is no option to specify these characters.

*'jumpoptions'* *'jop'*
'jumpoptions' 'jop'     string  (default "")
                        global
        List of words that change the behavior of the |jumplist|.
          stack         Make the jumplist behave like the tagstack or like a
                        web browser.  Relative location of entries in the
                        jumplist is preserved at the cost of discarding
                        subsequent entries when navigating backwards in the
                        jumplist and then jumping to a location.
                        |jumplist-stack|

*'joinspaces'* *'js'* *'nojoinspaces'* *'nojs'*
'joinspaces' 'js'       boolean (default off)
                        global
        Insert two spaces after a '.', '?' and '!' with a join command.
        Otherwise only one space is inserted.

*'keymap'* *'kmp'* *E544*
'keymap' 'kmp'          string  (default "")
                        local to buffer
        Name of a keyboard mapping.  See |mbyte-keymap|.
        Setting this option to a valid keymap name has the side effect of
        setting 'iminsert' to one, so that the keymap becomes effective.
        'imsearch' is also set to one, unless it was -1
        Only normal file name characters can be used, "/\*?[|<>" are illegal.

*'keymodel'* *'km'*
'keymodel' 'km'         string  (default "")
                        global
        List of comma separated words, which enable special things that keys
        can do.  These values can be used:
           startsel     Using a shifted special key starts selection (either
                        Select mode or Visual mode, depending on "key" being
                        present in 'selectmode').
           stopsel      Using a not-shifted special key stops selection.
        Special keys in this context are the cursor keys, <End>, <Home>,
        <PageUp> and <PageDown>.
        The 'keymodel' option is set by the |:behave| command.

*'keywordprg'* *'kp'*
'keywordprg' 'kp'       string  (default ":Man", Windows: ":help")
                        global or local to buffer |global-local|
        Program to use for the |K| command.  Environment variables are
        expanded |:set_env|.  ":help" may be used to access the Vim internal
        help.  (previously setting the global option to the empty
        value did this, which is now deprecated.)
        When the first character is ":", the command is invoked as a Vim
        command prefixed with [count].
        When "man" or "man -s" is used, Vim will automatically translate
        a [count] for the "K" command to a section number.
        See |option-backslash| about including spaces and backslashes.
        Example:
                :set keywordprg=man\ -s
                :set keywordprg=:Man
        This option cannot be set from a |modeline| or in the |sandbox|, for  security reasons.

*'langmap'* *'lmap'* *E357* *E358*
'langmap' 'lmap'        string  (default "")
                        global
        This option allows switching your keyboard into a special language
        mode.  When you are typing text in Insert mode the characters are
        inserted directly.  When in Normal mode the 'langmap' option takes
        care of translating these special characters to the original meaning
        of the key.  This means you don't have to change the keyboard mode to
        be able to execute Normal mode commands.
        This is the opposite of the 'keymap' option, where characters are
        mapped in Insert mode.
        Also consider setting 'langremap' to off, to prevent 'langmap' from
        applying to characters resulting from a mapping.
        This option cannot be set from a |modeline| or in the |sandbox|, for  security reasons.

        Example (for Greek, in UTF-8):                          *greek*
            :set langmap=ΑA,ΒB,ΨC,ΔD,ΕE,ΦF,ΓG,ΗH,ΙI,ΞJ,ΚK,ΛL,ΜM,ΝN,ΟO,ΠP,QQ,ΡR,ΣS,ΤT,ΘU,ΩV,WW,ΧX,ΥY,ΖZ,αa,βb,ψc,δd,εe,φf,γg,ηh,ιi,ξj,κk,λl,μm,νn,οo,πp,qq,ρr,σs,τt,θu,ωv,ςw,χx,υy,ζz
        Example (exchanges meaning of z and y for commands):
            :set langmap=zy,yz,ZY,YZ

        The 'langmap' option is a list of parts, separated with commas.  Each
        part can be in one of two forms:
        1.  A list of pairs.  Each pair is a "from" character immediately
            followed by the "to" character.  Examples: "aA", "aAbBcC".
        2.  A list of "from" characters, a semi-colon and a list of "to"
            characters.  Example: "abc;ABC"
        Example: "aA,fgh;FGH,cCdDeE"
        Special characters need to be preceded with a backslash.  These are
        ";", ',', '"', '|' and backslash itself.

        This will allow you to activate vim actions without having to switch
        back and forth between the languages.  Your language characters will
        be understood as normal vim English characters (according to the
        langmap mappings) in the following cases:
         o Normal/Visual mode (commands, buffer/register names, user mappings)
         o Insert/Replace Mode: Register names after CTRL-R
         o Insert/Replace Mode: Mappings
        Characters entered in Command-line mode will NOT be affected by
        this option.   this option can be changed at any time
        allowing to switch between mappings for different languages/encodings.
        Use a mapping to avoid having to type it each time!

*'langmenu'* *'lm'*
'langmenu' 'lm'         string  (default "")
                        global
        Language to use for menu translation.  Tells which file is loaded
        from the "lang" directory in 'runtimepath':
                "lang/menu_" . &langmenu . ".vim"
        (without the spaces).  For example, to always use the Dutch menus, no
        matter what $LANG is set to:
                :set langmenu=nl_NL.ISO_8859-1
        When 'langmenu' is empty, |v:lang| is used.
        Only normal file name characters can be used, "/\*?[|<>" are illegal.
        If your $LANG is set to a non-English language but you do want to use
        the English menus:
                :set langmenu=none
        This option must be set before loading menus, switching on filetype
        detection or syntax highlighting.  Once the menus are defined setting
        this option has no effect.  But you could do this:
                :source $VIMRUNTIME/delmenu.vim
                :set langmenu=de_DE.ISO_8859-1
                :source $VIMRUNTIME/menu.vim
        Warning: This deletes all menus that you defined yourself!

*'langremap'* *'lrm'* *'nolangremap'* *'nolrm'*
'langremap' 'lrm'       boolean (default off)
                        global
        When off, setting 'langmap' does not apply to characters resulting from
        a mapping.  If setting 'langmap' disables some of your mappings, make
        sure this option is off.

*'laststatus'* *'ls'*
'laststatus' 'ls'       number  (default 2)
                        global
        The value of this option influences when the last window will have a
        status line:
                0: never
                1: only if there are at least two windows
                2: always
        The screen looks nicer with a status line if you have several
        windows, but it takes another screen line. |status-line|

*'lazyredraw'* *'lz'* *'nolazyredraw'* *'nolz'*
'lazyredraw' 'lz'       boolean (default off)
                        global
        When this option is set, the screen will not be redrawn while
        executing macros, registers and other commands that have not been
        typed.  Also, updating the window title is postponed.  To force an
        update use |:redraw|.

*'linebreak'* *'lbr'* *'nolinebreak'* *'nolbr'*
'linebreak' 'lbr'       boolean (default off)
                        local to window

When the 'wrap' option is on:

    If 'linebreak' is on,
    Vim will wrap long lines at a character in 'breakat', rather than at the last character that fits on the screen.

Unlike  'wrapmargin' and 'textwidth, this does `not insert <EOL>s` in the file,

If 'breakindent' is set,
line is visually indented.

Then, the value  of 'showbreak' is used to put in front of wrapped lines.


<Tab> characters after an <EOL> are mostly not displayed  with the right amount of white space.

*'lines'* *E593*
'lines'                 number  (default 24 or terminal height)
                        global

    Number of lines of the Vim window.
    Normally you don't need to set this.
    It is done automatically by
    the terminal initialization code.
    When Vim is running in the GUI or
    in a resizable window,
    setting this option will cause the window size to be changed.
    When you only want to use the size for the GUI,
    put the command in your |gvimrc| file.
    Vim limits the number of lines to what fits on the screen.
    You can use this command to get the tallest window possible:
                :set lines=999
        Minimum value is 2, maximum value is 1000.

*'linespace'* *'lsp'*
'linespace' 'lsp'       number  (default 0)
                        global
                        {only in the GUI}
        Number of pixel lines inserted between characters.  Useful if the font
        uses the full character cell height, making lines touch each other.
        When non-zero there is room for underlining.
        With some fonts there can be too much room between lines (to have
        space for ascents and descents).  Then it makes sense to set
        'linespace' to a negative value.  This may cause display problems
        though!

*'lisp'* *'nolisp'*
'lisp'                  boolean (default off)
                        local to buffer
        Lisp mode: When <Enter> is typed in insert mode set the indent for
        the next line to Lisp standards (well, sort of).  Also happens with
        "cc" or "S".  'autoindent' must also be on for this to work.  The 'p'
        flag in 'cpoptions' changes the method of indenting: Vi compatible or
        better.  Also see 'lispwords'.
        The '-' character is included in keyword characters.  Redefines the
        "=" operator to use this same indentation algorithm rather than
        calling an external program if 'equalprg' is empty.

*'lispwords'* *'lw'*
'lispwords' 'lw'        string  (default is very long)
                        global or local to buffer |global-local|
        Comma separated list of words that influence the Lisp indenting.
        |'lisp'|


 vim:tw=78:ts=8:noet:ft=help:norl:
leo_DIY
DIY_v2
