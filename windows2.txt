==============================================================================
7. Argument list and buffer list commands                    *buffer-list*

          args list                buffer list              meaning
    1. :[N]argument [N]     11. :[N]buffer [N]           to arg/buf N
    2. :[N]next [file ..]   12. :[N]bnext [N]            to Nth next arg/buf
    3. :[N]Next [N]         13. :[N]bNext [N]            to Nth previous arg/buf
    4. :[N]previous [N]     14. :[N]bprevious [N]        to Nth previous arg/buf
    5. :rewind / :first     15. :brewind / :bfirst       to first arg/buf
    6. :last                16. :blast                   to last arg/buf
    7. :all                 17. :ball                    edit all args/buffers
                            18. :unhide                  edit all loaded buffers
                            19. :[N]bmod [N]             to Nth modified buf

      split & args list       split & buffer list
    21. :[N]sargument [N]   31. :[N]sbuffer [N]          split + to arg/buf N
    22. :[N]snext [file ..] 32. :[N]sbnext [N]           split + to Nth next arg/buf
    23. :[N]sNext [N]       33. :[N]sbNext [N]           split + to Nth previous arg/buf
    24. :[N]sprevious [N]   34. :[N]sbprevious [N]       split + to Nth previous arg/buf
    25. :srewind / :sfirst  35. :sbrewind / :sbfirst     split + to first arg/buf
    26. :slast              36. :sblast                  split + to last arg/buf
    27. :sall               37. :sball                   edit all args/buffers
                            38. :sunhide                 edit all loaded buffers
                            39. :[N]sbmod [N]            split + to Nth modified buf

    40. :args                                             list of arguments
                            41. :buffers                  list of buffers

    The meaning of [N] depends on the command:
        [N] is the number of buffers to go forward/backward on 2/12/22/32,
         3/13/23/33, and 4/14/24/34
        [N] is an argument number, defaulting to current argument, for 1 and 21
        [N] is a buffer number, defaulting to current buffer, for 11 and 31
        [N] is a count for 19 and 39

        Note: ":next" is an exception, because it must accept a list of file names  for compatibility with Vi.


The argument list and multiple windows
--------------------------------------

    The current position in the argument list can be different for each window.
    Remember that when doing ":e file",
    the position in the argument list stays the same,
    but you are not editing the file at that position.
    To indicate this,
    the file message (and  the title,
    if you have one) shows "(file (N) of M)",
    where "(N)" is the current position in the file list,
    and  "M" the number of files in the file list.
    All the entries in the argument list are added to the buffer list.
    Thus,
    you can also get to them with the buffer list commands,
    like ":bnext".

逐个解释:
    :[N]al[l][!] [N]                                *:al* *:all* *:sal* *:sall*
    :[N]sal[l][!] [N]
        Rearrange the screen to open one window for each argument.
        All other windows are closed.
        When a count is given,
        this is
                    the maximum number of windows to open.
                    With the |:tab| modifier open a tab page for each argument.
                    When there are more arguments than 'tabpagemax' further ones
                    become split windows in the last tab page.
                    When the 'hidden' option is set, all buffers in closed windows
                    become hidden.
                    When 'hidden' is not set, and the 'autowrite' option is set,
                    modified buffers are written.  Otherwise, windows that have
                    buffers that are modified are not removed, unless the [!] is
                    given, then they become hidden.  But modified buffers are
                    never abandoned, so changes cannot get lost.
                    [N] is the maximum number of windows to open.  'winheight'
                    also limits the number of windows opened ('winwidth' if
                    |:vertical| was prepended).
                    Buf/Win Enter/Leave autocommands are not executed for the new
                    windows here, that's only done when they are really entered.
                    If autocommands change the window layout while this command is
                    busy an error will be given. *E249*

    :[N]sa[rgument][!] [++opt] [+cmd] [N]                   *:sa* *:sargument*
        Short for ":split | argument [N]":
        split window and
        go to Nth argument.
        But when there is no such argument,
        the window is not split.
        Also see |++opt| and
        |+cmd|.

    :[N]sn[ext][!] [++opt] [+cmd] [file ..]                 *:sn* *:snext*
                    Short for ":split | [N]next": split window and go to Nth next
                    argument.  But when there is no next file, the window is not
                    split.  Also see |++opt| and |+cmd|.

    :[N]spr[evious][!] [++opt] [+cmd] [N]                   *:spr* *:sprevious*
    :[N]sN[ext][!] [++opt] [+cmd] [N]                       *:sN* *:sNext*
                    Short for ":split | [N]Next": split window and go to Nth
                    previous argument.  But when there is no previous file, the
                    window is not split.  Also see |++opt| and |+cmd|.

    *:sre* *:srewind*
    :sre[wind][!] [++opt] [+cmd]
                    Short for ":split | rewind": split window and go to first
                    argument.  But when there is no argument list, the window is
                    not split.  Also see |++opt| and |+cmd|.

    *:sfir* *:sfirst*
    :sfir[st] [++opt] [+cmd]
                    Same as ":srewind".

    *:sla* *:slast*
    :sla[st][!] [++opt] [+cmd]
                    Short for ":split | last": split window and go to last
                    argument.  But when there is no argument list, the window is
                    not split.  Also see |++opt| and |+cmd|.

    *:dr* *:drop*
    :dr[op] [++opt] [+cmd] {file} ..
        Edit the first {file} in a window.
        - If the file is already open in a window change to that window.
        - If the file is not open in a window edit the file in the current window.
        If the current buffer can't be |abandon|ed,
        the window is split first.
        - Windows that are not in the argument list or
        are not full width will be closed if possible.
        The |argument-list| is set,
        like with the |:next| command.
        The purpose of this command is that
            it can be used from a program that wants Vim to edit another file,
            e.g., a debugger.
        When using the |:tab| modifier each argument is opened in a tab page.
        The last window is used if it's empty.
        Also see |++opt| and
        |+cmd|.

==============================================================================
8. Do a command in all buffers or windows                       *list-repeat*

*:windo*
:[range]windo {cmd}     Execute {cmd} in each window or if [range] is given
                        only in windows for which the window number lies in
                        the [range]. It works like doing this:

                                CTRL-W t
                                :{cmd}
                                CTRL-W w
                                :{cmd}
                                etc.
                       This only operates in the current tab page.
                        When an error is detected on one window, further
                        windows will not be visited.
                        The last window (or where an error occurred) becomes
                        the current window.
                        {cmd} can contain '|' to concatenate several commands.
                        {cmd} must not open or close windows or reorder them.
                        Also see |:tabdo|, |:argdo|, |:bufdo|, |:cdo|, |:ldo|,
                        |:cfdo| and |:lfdo|.

*:bufdo*
:[range]bufdo[!] {cmd}  Execute {cmd} in each buffer in the buffer list or if
                        [range] is given only for buffers for which their
                        buffer number is in the [range]. It works like doing
                        this:

                                :bfirst
                                :{cmd}
                                :bnext
                                :{cmd}
                                etc.
                       When the current file can't be |abandon|ed and the [!]
                       is not present, the command fails.
                       When an error is detected on one buffer, further
                        buffers will not be visited.
                        Unlisted buffers are skipped.
                        The last buffer (or where an error occurred) becomes
                        the current buffer.
                        {cmd} can contain '|' to concatenate several commands.
                        {cmd} must not delete buffers or add buffers to the
                        buffer list.
                        While this command is executing, the Syntax
                        autocommand event is disabled by adding it to
                        'eventignore'.  This considerably speeds up editing
                        each buffer.
                        Also see |:tabdo|, |:argdo|, |:windo|, |:cdo|, |:ldo|,
                        |:cfdo| and |:lfdo|.

Examples:


        :windo set nolist foldcolumn=0 | normal! zn

This resets the 'list' option and disables folding in all windows. >

        :bufdo set fileencoding= | update

This resets the 'fileencoding' in each buffer and writes it if this changed
the buffer.  The result is that all buffers will use the 'encoding' encoding
(if conversion succeeds).

==============================================================================
9. Tag or file name under the cursor                    *window-tag*

*:sta* *:stag*
:sta[g][!] [tagname]
                Does ":tag[!] [tagname]" and splits the window for the found
                tag.  See also |:tag|.

CTRL-W ]                                        *CTRL-W_]* *CTRL-W_CTRL-]*
CTRL-W CTRL-]   Split current window in two.  Use identifier under cursor as a
                tag and jump to it in the new upper window.
                In Visual mode uses the Visually selected text as a tag.
                Make new window N high.

*CTRL-W_g]*
CTRL-W g ]      Split current window in two.  Use identifier under cursor as a
                tag and perform ":tselect" on it in the new upper window.
                In Visual mode uses the Visually selected text as a tag.
                Make new window N high.

*CTRL-W_g_CTRL-]*
CTRL-W g CTRL-] Split current window in two.  Use identifier under cursor as a
                tag and perform ":tjump" on it in the new upper window.
                In Visual mode uses the Visually selected text as a tag.
                Make new window N high.

CTRL-W f                                        *CTRL-W_f* *CTRL-W_CTRL-F*
CTRL-W CTRL-F   Split current window in two.  Edit file name under cursor.
                Like ":split gf", but window isn't split if the file does not
                exist.
                Uses the 'path' variable as a list of directory names where to
                look for the file.  Also the path for current file is
                used to search for the file name.
                If the name is a hypertext link that looks like
                "type://machine/path", only "/path" is used.
                If a count is given, the count'th matching file is edited.

CTRL-W F                                                *CTRL-W_F*
                Split current window in two.  Edit file name under cursor and
                jump to the line number following the file name. See |gF| for
                details on how the line number is obtained.

CTRL-W gf                                               *CTRL-W_gf*
                Open a new tab page and edit the file name under the cursor.
                Like "tab split" and "gf", but the new tab page isn't created
                if the file does not exist.

CTRL-W gF                                               *CTRL-W_gF*
                Open a new tab page and edit the file name under the cursor
                and jump to the line number following the file name.  Like
                "tab split" and "gF", but the new tab page isn't created if
                the file does not exist.

CTRL-W gt                                               *CTRL-W_gt*
                Go to next tab page, same as `gt`.

CTRL-W gT                                               *CTRL-W_gT*
                Go to previous tab page, same as `gT`.

Also see |CTRL-W_CTRL-I|: open window for an included file that includes
the keyword under the cursor.

==============================================================================
10. The preview window                          *preview-window*

    The preview window is a special window to show (preview) another file.
    It is  normally a small window used to show an include file or definition of a function.

There can be only one preview window (per tab page).
 It is created with one of the commands below.
 The 'previewheight' option can be set to specify the height of the preview window when it's opened.
 The 'previewwindow' option is set in the preview window to be able to recognize it.
 The 'winfixheight' option is set to have it keep the same height when opening/closing other windows.

*:pta* *:ptag*
:pta[g][!] [tagname]

 Does ":tag[!] [tagname]" and shows the found tag in a "Preview" window without changing the current buffer or
cursor  position.
 If a "Preview" window already exists,
 it is re-used (like a help window is).
 If a new one is opened,
'previewheight' is used for the height of the window.
  See also |:tag|.
 See below for an example.  |CursorHold-example|
 Small difference from |:tag|: When [tagname] is equal to the already displayed tag,
the position in the matching tag list is not reset.
 This makes the CursorHold example work after a |:ptnext|.

CTRL-W z                                        *CTRL-W_z*
CTRL-W CTRL-Z                                   *CTRL-W_CTRL-Z* *:pc* *:pclose*
:pc[lose][!]    Close any "Preview" window currently open.  When the 'hidden'
                option is set, or when the buffer was changed and the [!] is
                used, the buffer becomes hidden (unless there is another
                window editing it).  The command fails if any "Preview" buffer
                cannot be closed.  See also |:close|.

*:pp* *:ppop*
:[count]pp[op][!]
                Does ":[count]pop[!]" in the preview window.  See |:pop| and
                |:ptag|.

CTRL-W }                                                *CTRL-W_}*
                Use identifier under cursor as a tag and perform a :ptag on
                it.  Make the new Preview window (if required) N high.  If N is
                not given, 'previewheight' is used.

CTRL-W g }                                              *CTRL-W_g}*
                Use identifier under cursor as a tag and perform a :ptjump on
                it.  Make the new Preview window (if required) N high.  If N is
                not given, 'previewheight' is used.

*:ped* *:pedit*
:ped[it][!] [++opt] [+cmd] {file}

 Edit {file} in the preview window.
 The preview window is opened like with |:ptag|.
 The current window and cursor position isn't changed.
 Useful example:

                        :pedit +/fputc /usr/include/stdio.h

*:ps* *:psearch*
:[range]ps[earch][!] [count] [/]pattern[/]

 Works like |:ijump| but shows the found match in the preview window.
 The preview window is opened like with |:ptag|.
 The current window and cursor position isn't changed.
 Useful example:

 :psearch popen

ike with the |:ptag| command,
you can use this to automatically show information about the word under the cursor.
This is less clever than using |:ptag|,
but you don't need a tags file and it will also find matches in system include files.
 Example:

  :au! CursorHold *.[ch] ++nested exe "silent! psearch " . expand("<cword>")
               Warning: This can be slow.

Example
*CursorHold-example*  >

  :au! CursorHold *.[ch] ++nested exe "silent! ptag " . expand("<cword>")

This will cause a ":ptag" to be executed for the keyword under the cursor,
when the cursor hasn't moved for the time set with 'updatetime'.  "++nested"
makes other autocommands be executed, so that syntax highlighting works in the
preview window.  The "silent!" avoids an error message when the tag could not
be found.  Also see |CursorHold|.  To disable this again:


  :au! CursorHold

A nice addition is to highlight the found tag, avoid the ":ptag" when there
is no word under the cursor, and a few other things:


  :au! CursorHold *.[ch] ++nested call PreviewWord()
  :func PreviewWord()
  :  if &previewwindow                  " don't do this in the preview window
  :    return
  :  endif
  :  let w = expand("<cword>")          " get the word under cursor
  :  if w =~ '\a'                       " if the word contains a letter
  :
  :    " Delete any existing highlight before showing another tag
  :    silent! wincmd P                 " jump to preview window
  :    if &previewwindow                        " if we really get there...
  :      match none                     " delete existing highlight
  :      wincmd p                       " back to old window
  :    endif
  :
  :    " Try displaying a matching tag for the word under the cursor
  :    try
  :       exe "ptag " . w
  :    catch
  :      return
  :    endtry
  :
  :    silent! wincmd P                 " jump to preview window
  :    if &previewwindow                " if we really get there...
  :      if has("folding")
  :        silent! .foldopen            " don't want a closed fold
  :      endif
  :      call search("$", "b")          " to end of previous line
  :      let w = substitute(w, '\\', '\\\\', "")
  :      call search('\<\V' . w . '\>') " position cursor on match
  :      " Add a match highlight to the word at this position
  :      hi previewWord term=bold ctermbg=green guibg=green
  :      exe 'match previewWord "\%' . line(".") . 'l\%' . col(".") . 'c\k*"'
  :      wincmd p                       " back to old window
  :    endif
  :  endif
  :endfun

==============================================================================
11. Using hidden buffers                                *buffer-hidden*

    This makes it possible to jump from file to file,
    without the need to read or write the file every time you get another buffer in a window.

        (为啥这个helptag叫这个名字:)
    If the option 'hidden' is on (default value )

        buffers are kept for all commands that start editing another file:
            ":edit",
            ":next",
            ":tag",
            etc.

    else
        If:
            a buffer is modified,
            and some commands that move through the buffer list
            and the buffer is forced (with '!') to be removed from a window ( *:buffer-!* )
            and 'autowrite' is off or the buffer can't be written

            then:
            the current buffer is hidden


    The 'hidden' is global,
        it is used for all buffers.
    But 'bufhidden'  can be used to make an exception for a specific buffer.
        It can take these values:
            <empty>         Use the value of 'hidden'.
            hide            Hide this buffer,  also when 'hidden' is not set.
            unload          Don't hide but unload this buffer,  also when 'hidden' is set.
            delete          Delete the buffer.

    *hidden-quit*
        When you try to quit Vim while there is a hidden and modified buffer,
            you will get an error message and
            Vim will make that buffer the current buffer.

    各种命令
        *:files*
        *:buffers*
        *:ls*
        :files[!] [flags]
        :buffers[!] [flags]
        :ls[!] [flags]

            list(Show) all buffers.  Example:

                    1 #h   "/test/text"             line 1
                    2u     "asdf"                   line 0
                    3 %a + "version.c"              line 1

            When the [!] is included
                the `list will show unlisted buffers` (unlisted这个名字太扯淡了)
            buftype为help的文件, 不显示完整路径?


            Indicators
                (chars in the same column are mutually exclusive)
                |u           an    |unlisted-buffer|
                | |%         the buffer in the current window (current buffer?)
                | |#         the alternate buffer for ":e #" and CTRL-^
                | | |a       an active buffer: it is loaded and visible
                | | |h       a |hidden-buffer|
                | | | |-     a buffer with 'nomodifiable'
                | | | |=     a readonly buffer
                | | | |
                | | | |R     a terminal buffer with a running job
                | | | |F     a terminal buffer with a finished job
                | | | |?     a terminal buffer without a job: `:terminal NONE`
                | | | | |+   a modified buffer
                | | | | |x   a buffer with read errors

            [flags] can be a combination of the those indicators , 另外加上 `t`   (show time last used)
                Combining flags means they are "AND"ed together
                they restrict the buffers to be listed

                 e.g.:
                          h+
                          a+


            When using |:filter|
                the pattern is matched against the  displayed buffer name, e.g.:

                    filter /\.vim/ ls

        :[N]b[uffer][!] [+cmd] [N]              *:b* *:bu* *:buf* *:buffer* *E86*
            或者normal下: "N CTRL-^"

            Edit buffer [N] from the buffer list.

            N is the buffer number.
                Each buffer has a unique number.
                That number will not change,
                thus you can always go to a specific buffer

            If [N] is not given,
                the current buffer  remains being edited.
                     ps: buftype为help时, 就算是current, 也会跳到其他buffer

            See |:buffer-!| for  [!].

            This will also edit a buffer that is not in the buffer list,
                without setting the 'buflisted' flag.

            Also see |+cmd|.

        *:bad* *:badd*
        :bad[d] [+lnum] {fname}
            If {fname} wasn't listed yet.
                Add that file's name  to the buffer list,
                without loading it,

            If the buffer was previously deleted, not wiped,
                it will be made listed again.

            If "lnum" is specified,
                the cursor will be positioned at that line when the buffer is first entered.

            Other commands after the + will be ignored.

        *:balt*
        :balt [+lnum] {fname}
             Like `:badd` and also set the alternate file for the current window to {fname}.

        :[N]bd[elete][!]                        *:bd* *:bdel* *:bdelete* *E516*
        :bd[elete][!] [N] 系列

                Unload buffer [N] (default:  current buffer)
                delete it from the buffer list.

                If the buffer was changed,
                    this fails,
                    unless when [!] is specified,
                        in which  case changes are lost.
                        The file remains unaffected.
                Any windows for this buffer are closed.
                If buffer [N] is the current buffer,
                   another buffer will be displayed instead.
                   This is the most recent entry in the jump list that points into a loaded buffer.

                The buffer is removed from the buffer list |unlisted-buffer|
                    option values,  比如set filetype=llllll后, :bdelete, 再打开, 会复原.
                                                             但:wq后不会
                    variables
                    mappings/abbreviations for the buffer are cleared.

                The buffer isn't completely deleted,


            :bdelete[!] {bufname}                                           *E93* *E94*
                            Like ":bdelete[!] [N]", but buffer given by name, see  |{bufname}|.

            :bdelete[!] N1 N2 ...
                            Do ":bdelete[!]" for buffer N1, N2, etc.
                            The arguments can be
                                buffer numbers or
                                buffer names (but not buffer names that are  a number).
                                    Insert a backslash before a space in a buffer  name.

            :N,Mbdelete[!]  Do ":bdelete[!]" for all buffers in the range N to M
                            |inclusive|.
                            Examples:
                                : .,$- bdelete   "delete buffers from the current one to last but one
                                : % bdelete      " delete all buffers

        *:bw* *:bwipe*  *E517*
            :[N]bw[ipeout][!]
            :bw[ipeout][!] {bufname}
            :N,Mbw[ipeout][!]
            :bw[ipeout][!] N1 N2 ...

            Like |:bdelete|,
            but really delete the buffer.
            Everything related to the buffer is lost:
                marks
                option settings
                .. ..
            Don't use this unless you know what you are doing.
            Examples:
                            :.+,$ bwipeout   " wipe out all buffers after the current  one

        :[N]bun[load][!]                                *:bun* *:bunload* *E515*
        :bun[load][!] [N] 系列
            Unload buffer [N] (default:  current buffer).
            The memory allocated for this buffer will be freed.
            Any windows for this buffer are closed.

            🔑The buffer (file name?)remains in the buffer list🔑.
            if the buffer was changed:
                if no [!]:
                    this fails,
                else:
                    the changes are lost.

            If buffer [N] is the current buffer:
                another buffer will be displayed instead.
                This is the most recent entry in the jump list that points into a loaded buffer.

            :bunload[!] {bufname}
                基本同上

            :N,Mbunload[!]
                Do ":bunload[!]" for all buffers in the range N to M
                |inclusive|.

            :bunload[!] N1 N2 ...
                Do ":bunload[!]" for buffer N1, N2, etc.  The arguments can be
                buffer numbers or buffer names (but not buffer names that are  a number).
                Insert a backslash before a space in a buffer  name.


        :[N]b[uffer][!] [+cmd] {bufname}                                *{bufname}*

                        Edit buffer for {bufname} from the buffer list.  A partial
                        name also works, so long as it is unique in the list of
                        buffers.
                        A buffer whose name is a number cannot be referenced
                        by that name; use the buffer number instead.
                        Insert a backslash before a space in a buffer name.
                        See |:buffer-!| for [!].
                        This will also edit a buffer that is not in the buffer list,
                        without setting the 'buflisted' flag.
                        Also see |+cmd|.

        :[N]sb[uffer] [+cmd] [N]                                *:sb* *:sbuffer*
                        Split window and edit buffer [N] from the buffer list.  If [N]
                        is not given, the current buffer is edited.  Respects the
                        "useopen" setting of 'switchbuf' when splitting.  This will
                        also edit a buffer that is not in the buffer list, without
                        setting the 'buflisted' flag.
                        Also see |+cmd|.

        :[N]sb[uffer] [+cmd] {bufname}
                        Split window and edit buffer for |{bufname}| from the buffer
                        list.  This will also edit a buffer that is not in the buffer
                        list, without setting the 'buflisted' flag.
                        If what you want to do is split the buffer, make a copy
                        under another name, you can do it this way:

                                :w foobar | sp #
                       Also see |+cmd|.

        :[N]bn[ext][!] [+cmd] [N]                               *:bn* *:bnext* *E87*
                        Go to [N]th next buffer in buffer list.  [N] defaults to one.
                        Wraps around the end of the buffer list.
                        See |:buffer-!| for [!].
                        Also see |+cmd|.
                        If you are in a help buffer, this takes you to the next help
                        buffer (if there is one).  Similarly, if you are in a normal
                        (non-help) buffer, this takes you to the next normal buffer.
                        This is so that if you have invoked help, it doesn't get in
                        the way when you're browsing code/text buffers.  The next three
                        commands also work like this.

        *:sbn* *:sbnext*
        :[N]sbn[ext] [+cmd] [N]
                        Split window and go to [N]th next buffer in buffer list.
                        Wraps around the end of the buffer list.  Uses 'switchbuf'
                        Also see |+cmd|.

        :[N]bN[ext][!] [+cmd] [N]               *:bN* *:bNext* *:bp* *:bprevious* *E88*
        :[N]bp[revious][!] [+cmd] [N]
                        Go to [N]th previous buffer in buffer list.  [N] defaults to
                        one.  Wraps around the start of the buffer list.
                        See |:buffer-!| for [!] and 'switchbuf'.
                        Also see |+cmd|.

        :[N]sbN[ext] [+cmd] [N]                 *:sbN* *:sbNext* *:sbp* *:sbprevious*
        :[N]sbp[revious] [+cmd] [N]
                        Split window and go to [N]th previous buffer in buffer list.
                        Wraps around the start of the buffer list.
                        Uses 'switchbuf'.
                        Also see |+cmd|.

        :br[ewind][!] [+cmd]                                    *:br* *:bre* *:brewind*
        buffer re window?
            Go to first buffer in buffer list.  If the buffer list is
            empty, go to the first unlisted buffer.
            See |:buffer-!| for [!].

        :bf[irst] [+cmd]                                        *:bf* *:bfirst*
                        Same as |:brewind|.
                        Also see |+cmd|.

        :sbr[ewind] [+cmd]                                      *:sbr* *:sbrewind*
                        Split window and go to first buffer in buffer list.  If the
                        buffer list is empty, go to the first unlisted buffer.
                        Respects the 'switchbuf' option.
                        Also see |+cmd|.

        :sbf[irst] [+cmd]                                       *:sbf* *:sbfirst*
                        Same as ":sbrewind".

        :bl[ast][!] [+cmd]                                      *:bl* *:blast*
                        Go to last buffer in buffer list.  If the buffer list is
                        empty, go to the last unlisted buffer.
                        See |:buffer-!| for [!].

        :sbl[ast] [+cmd]                                        *:sbl* *:sblast*
                        Split window and go to last buffer in buffer list.  If the
                        buffer list is empty, go to the last unlisted buffer.
                        Respects 'switchbuf' option.

        :[N]bm[odified][!] [+cmd] [N]                   *:bm* *:bmodified* *E84*
                        Go to [N]th next modified buffer.  Note: this command also
                        finds unlisted buffers.  If there is no modified buffer the
                        command fails.

        :[N]sbm[odified] [+cmd] [N]                             *:sbm* *:sbmodified*
                        Split window and go to [N]th next modified buffer.
                        Respects 'switchbuf' option.
                        Note: this command also finds buffers not in the buffer list.

        :[N]unh[ide] [N]                        *:unh* *:unhide* *:sun* *:sunhide*
        :[N]sun[hide] [N]
                        Rearrange the screen to open one window for each loaded buffer
                        in the buffer list.  When a count is given, this is the
                        maximum number of windows to open.

        :[N]ba[ll] [N]                                  *:ba* *:ball* *:sba* *:sball*
        :[N]sba[ll] [N] Rearrange the screen to open one window for each buffer in
                        the buffer list.  When a count is given, this is the maximum
                        number of windows to open.  'winheight' also limits the number
                        of windows opened ('winwidth' if |:vertical| was prepended).
                        Buf/Win Enter/Leave autocommands are not executed for the new
                        windows here, that's only done when they are really entered.
                        When the |:tab| modifier is used new windows are opened in a
                        new tab, up to 'tabpagemax'.

     Differs from the ":edit" command,
        which sets the 'readonly' flag each time the file is read.

    All the commands above that
        start editing another buffer,
        will keep the  'readonly' flag as it was.


==============================================================================
12. Special kinds of buffers                    *special-buffers*

    Instead of containing the text of a file,
    buffers can also be used for other purposes.
    A few options can be set to change the behavior of a buffer:

        'bufhidden'     what happens when the buffer is no longer displayed
                        in a window.
        'buftype'       what kind of a buffer this is
        'swapfile'      whether the buffer will have a swap file
        'buflisted'     buffer shows up in the buffer list

    A few useful kinds of a buffer:

    quickfix        Used to contain the error list or the location list.  See
                    |:cwindow| and |:lwindow|.  This command sets the 'buftype'
                    option to "quickfix".  You are not supposed to change this!
                    'swapfile' is off.

    help
                    Contains a help file.
                    Will only be created with the |:help|  command.

                    The flag that indicates a help buffer is internal  and can't be changed.
                    不是啊, `set buftype=` 没报错
                    The 'buflisted' option will be reset for a help buffer.

    terminal        A terminal window buffer, see |terminal|. The contents cannot
                    be read or changed until the job ends.

    directory       Displays directory contents.  Can be used by a file explorer
                    plugin.  The buffer is created with these settings:

                            :setlocal buftype=nowrite
                            :setlocal bufhidden=delete
                            :setlocal noswapfile
                   The buffer name is the name of the directory and is adjusted
                    when using the |:cd| command.

    *scratch-buffer*
    scratch         Contains text that can be discarded at any time.  It is kept
                    when closing the window, it must be deleted explicitly.
                    Settings:

                            :setlocal buftype=nofile
                            :setlocal bufhidden=hide
                            :setlocal noswapfile
                   The buffer name can be used to identify the buffer, if you
                    give it a meaningful name.

    *unlisted-buffer*
        The buffer is `not in the buffer list`

        It is not used for normal editing,
        but to
            show a help file,
            remember a file name or  marks.
            The ":bdelete" command will also set this option,  thus it doesn't completely delete the buffer.

        Settings:

            :setlocal nobuflisted
            :setlocal buflisted

        网友:
            the only reason for using :bdelete is to make buffer-navigation (with :bnext,  :bprevious, :ls,  etc.) easier by skipping unwanted buffers.
            That said,  I—and others—often end up with 100, 200,  or more buffers,
            unlisted or not,
            without any impact on usability.
            It doesn't make it harder to switch buffers and
            it doesn't cause any slow down
            so… you don't really have to worry about that.

DIY_v2
